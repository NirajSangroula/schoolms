SCRIPT  c:\vim\.vim\plugged\vim-polyglot\syntax\php.vim
Sourced 3 times
Total time:   0.418303
 Self time:   0.060968

count  total (s)   self (s)
    3   0.000432   0.000301 if polyglot#init#is_disabled(expand('<sfile>:p'), 'php', 'syntax/php.vim')
                              finish
    3              0.000004 endif
                            
                            " Vim syntax file
                            " Language: PHP 5.3 & up
                            "
                            " @block('Last-modified')
                            "
                            " Mon, 25 Mar 2019 09:59:20 +0000, PHP 5.6.40, 7.0.33, 7.1.27, 7.2.16, 7.3.3
                            "
                            " @endblock
                            "
                            " Maintainer: Paul Garvin <paul@paulgarvin.net>
                            "
                            " Contributor: Stan Angeloff <stanimir@angeloff.name>
                            " URL: https://github.com/StanAngeloff/php.vim
                            "
                            " Contributor: Alessandro Antonello <aleantonello@hotmail.com>
                            " URL: https://github.com/aantonello/php.vim
                            "
                            " Contributor: Tim Carry <tim@pixelastic.com>
                            " URL: https://github.com/pixelastic/php.vim
                            "
                            " Contributor: Joshua Sherman <josh@gravityblvd.com>
                            " URL: https://github.com/joshtronic/php.vim
                            "
                            " Former Maintainer:  Peter Hodge <toomuchphp-vim@yahoo.com>
                            " Former URL: http://www.vim.org/scripts/script.php?script_id=1571
                            "
                            " Note: All of the switches for VIM 5.X and 6.X compatability were removed.
                            "       DO NOT USE THIS FILE WITH A VERSION OF VIM < 7.0.
                            "
                            " Note: If you are using a colour terminal with dark background, you will probably find
                            "       the 'elflord' colorscheme is much better for PHP's syntax than the default
                            "       colourscheme, because elflord's colours will better highlight the break-points
                            "       (Statements) in your code.
                            "
                            " Options:  php_sql_query = 1  for SQL syntax highlighting inside strings (default: 0)
                            "           php_sql_heredoc = 1 for SQL syntax highlighting inside heredocs (default: 1)
                            "           php_sql_nowdoc = 1 for SQL syntax highlighting inside nowdocs (default: 1)
                            "           b:sql_type_override = 'postgresql' for PostgreSQL syntax highlighting in current buffer (default: 'mysql')
                            "           g:sql_type_default = 'postgresql' to set global SQL syntax highlighting language default (default: 'mysql')"
                            "           php_xml_heredoc = 1 for XML syntax highlighting inside heredocs (default: 0)
                            "           php_xml_nowdoc = 1 for XML syntax highlighting inside nowdocs (default: 0)
                            "           php_html_in_strings = 1  for HTML syntax highlighting inside strings (default: 0)
                            "           php_html_in_heredoc = 1 for HTML syntax highlighting inside heredocs (default: 1)
                            "           php_html_in_nowdoc = 1 for HTML syntax highlighting inside nowdocs (default: 1)
                            "           php_html_load = 1 for loading the HTML syntax at all.  Overwrites php_html_in_strings and php_html_in_heredoc (default: 1)
                            "           php_ignore_phpdoc = 0 for not highlighting parts of phpDocs
                            "           php_parent_error_close = 1  for highlighting parent error ] or ) (default: 0)
                            "           php_parent_error_open = 1  for skipping an php end tag,
                            "                                      if there exists an open ( or [ without a closing one (default: 0)
                            "           php_folding = 1  for folding loops, if/elseif/else, switch, try/catch, classes, and functions based on
                            "                            indent, finds a } with an indent matching the structure.
                            "                         2  for folding all { }, ( ), and [ ] pairs. (see known bugs ii)
                            "           php_phpdoc_folding = 0 Don't fold phpDoc comments (default)
                            "                                1 Fold phpDoc comments
                            "           php_sync_method = x
                            "                             x=-1 to sync by search ( default )
                            "                             x>0 to sync at least x lines backwards
                            "                             x=0 to sync from start
                            "
                            "           php_var_selector_is_identifier = 1  include the '$' as part of identifiers.
                            "                                               Variables will be highlighted as a single 'phpIdentifier' group
                            "                                               instead of as 'phpOperator' for '$' and 'phpIdentifier' the rest.
                            "                                               (default: 0)
                            "
                            "           g:php_syntax_extensions_enabled
                            "           g:php_syntax_extensions_disabled  A list of extension names (lowercase) for which built-in functions,
                            "                                             constants, classes and interfaces is enabled / disabled.
                            "
                            " Known Bugs:
                            "  - setting  php_parent_error_close  on  and  php_parent_error_open  off
                            "    has these two leaks:
                            "     i) A closing ) or ] inside a string match to the last open ( or [
                            "        before the string, when the the closing ) or ] is on the same line
                            "        where the string started. In this case a following ) or ] after
                            "        the string would be highlighted as an error, what is incorrect.
                            "    ii) Same problem if you are setting php_folding = 2 with a closing
                            "        } inside an string on the first line of this string.
                            "
                            "  - A double-quoted string like this:
                            "      "$foo->someVar->someOtherVar->bar"
                            "    will highight '->someOtherVar->bar' as though they will be parsed
                            "    as object member variables, but PHP only recognizes the first
                            "    object member variable ($foo->someVar).
                            
                            
    3              0.000018 if exists("b:current_syntax")
                              finish
    3              0.000003 endif
                            
    3              0.000012 if !exists("main_syntax")
    3              0.000022   let main_syntax = 'php'
    3              0.000003 endif
                            
                            " Save the 'iskeyword' setting before including the HTML syntax.
                            " See https://github.com/pangloss/vim-javascript/issues/153
    3              0.000018 let s:iskeyword_save = &iskeyword
                            
    3              0.000014 if !exists("php_html_load")
                              let php_html_load=1
    3              0.000003 endif
                            
    3              0.000015 if (exists("php_html_load") && php_html_load)
    3              0.000014   if !exists("php_html_in_heredoc")
                                let php_html_in_heredoc=1
    3              0.000003   endif
                            
    3              0.000013   if !exists("php_html_in_nowdoc")
                                let php_html_in_nowdoc=1
    3              0.000003   endif
                            
    3   0.348767   0.009749   runtime! syntax/html.vim
    3              0.000027   unlet! b:current_syntax
                              " HTML syntax file turns on spelling for all top level words, we attempt to turn off
    3              0.000017   syntax spell default
                            
    3              0.000034   syn cluster htmlPreproc add=phpRegion
                            else
                              " If it is desired that the HTML syntax file not be loaded at all, set the options for highlighting it in string
                              " heredocs and nowdocs to false.
                              let php_html_in_strings=0
                              let php_html_in_heredoc=0
                              let php_html_in_nowdoc=0
    3              0.000005 endif
                            
    3              0.000029 if (exists("php_html_in_strings") && php_html_in_strings)
                              syn cluster phpAddStrings add=@htmlTop
    3              0.000004 endif
                            
                            " Set sync method if none declared
    3              0.000022 if ( ! exists("php_sync_method") || php_sync_method == 1)
                              if exists("php_minlines")
                                let php_sync_method=php_minlines
                              else
                                let php_sync_method=-1
                              endif
    3              0.000003 endif
                            
    3              0.000014 if !exists("php_sql_heredoc")
                              let php_sql_heredoc=1
    3              0.000003 endif
                            
    3              0.000013 if !exists("php_sql_nowdoc")
                              let php_sql_nowdoc=1
    3              0.000003 endif
                            
    3              0.000034 if ((exists("php_sql_query") && php_sql_query) || (exists("php_sql_heredoc") && php_sql_heredoc) || (exists("php_sql_nowdoc") && php_sql_nowdoc))
                              " Use MySQL as the default SQL syntax file.
                              " See https://github.com/StanAngeloff/php.vim/pull/1
    3              0.000023   if !exists('b:sql_type_override') && !exists('g:sql_type_default')
    3              0.000014     let b:sql_type_override='mysql'
    3              0.000004   endif
    3   0.023994   0.005809   syn include @sqlTop syntax/sql.vim
                            
    3              0.000059   syn sync clear
    3              0.000016   unlet! b:current_syntax
    3              0.000044   syn cluster sqlTop remove=sqlString,sqlComment
                            
    3              0.000025   if (exists("php_sql_query") && php_sql_query)
                                syn cluster phpAddStrings contains=@sqlTop
    3              0.000005   endif
    3              0.000004 endif
                            
    3              0.000015 if !exists("php_xml_heredoc")
                              let php_xml_heredoc=0
    3              0.000005 endif
                            
    3              0.000012 if !exists("php_xml_nowdoc")
                              let php_xml_nowdoc=0
    3              0.000003 endif
                            
    3              0.000027 if ((exists("php_xml_heredoc") && php_xml_heredoc) || (exists("php_xml_nowdoc") && php_xml_nowdoc))
                              syn include @xmlTop syntax/xml.vim
                            
                              syn sync clear
                              unlet! b:current_syntax
    3              0.000003 endif
                            
                            " set default for php_folding so we don't have to keep checking its existence.
    3              0.000012 if !exists("php_folding")
                              let php_folding = 0
    3              0.000003 endif
                            
                            " set default for php_phpdoc_folding so we don't have to keep checking its existence.
    3              0.000013 if !exists("php_phpdoc_folding")
                              let php_phpdoc_folding = 0
    3              0.000003 endif
                            
                            " set default global php version
    3              0.000013 if !exists('g:php_version_id')
                              let g:php_version_id = 70300
    3              0.000003 endif
                            
                            " set default buffer level php version
    3              0.000014 if !exists('b:php_version_id')
    3              0.000014   let b:php_version_id = g:php_version_id
    3              0.000003 endif
                            
                            " Folding Support {{{
    3              0.000014 if php_folding==1 && has("folding")
                              command! -nargs=+ SynFold <args> fold
    3              0.000005 else
    3              0.000054   command! -nargs=+ SynFold <args>
    3              0.000004 endif
                            
    3              0.000013 if php_phpdoc_folding==1 && has("folding")
                              command! -nargs=+ SynFoldDoc <args> fold
    3              0.000004 else
    3              0.000033   command! -nargs=+ SynFoldDoc <args>
    3              0.000003 endif
                            
                            " }}}
                            
    3              0.000008 syn case match
                            
                            " Superglobals
    3              0.000040 syn keyword phpSuperglobals GLOBALS _GET _POST _REQUEST _FILES _COOKIE _SERVER _SESSION _ENV HTTP_RAW_POST_DATA php_errormsg http_response_header argc argv contained
                            
                            " Magic Constants
    3              0.000023 syn keyword phpMagicConstants __LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ contained
                            
                            " $_SERVER Variables
    3              0.000049 syn keyword phpServerVars GATEWAY_INTERFACE SERVER_NAME SERVER_SOFTWARE SERVER_PROTOCOL REQUEST_METHOD QUERY_STRING DOCUMENT_ROOT HTTP_ACCEPT HTTP_ACCEPT_CHARSET HTTP_ENCODING HTTP_ACCEPT_LANGUAGE HTTP_CONNECTION HTTP_HOST HTTP_REFERER HTTP_USER_AGENT REMOTE_ADDR REMOTE_PORT SCRIPT_FILENAME SERVER_ADMIN SERVER_PORT SERVER_SIGNATURE PATH_TRANSLATED SCRIPT_NAME REQUEST_URI PHP_SELF contained
                            
                            " @block('Extensions')
                            
    3              0.000031 if ! exists("g:php_syntax_extensions_enabled")
                                let g:php_syntax_extensions_enabled = ["bcmath", "bz2", "core", "curl", "date", "dom", "ereg", "gd", "gettext", "hash", "iconv", "json", "libxml", "mbstring", "mcrypt", "mhash", "mysql", "mysqli", "openssl", "pcre", "pdo", "pgsql", "phar", "reflection", "session", "simplexml", "soap", "sockets", "spl", "sqlite3", "standard", "tokenizer", "wddx", "xml", "xmlreader", "xmlwriter", "zip", "zlib"]
    3              0.000005 endif
    3              0.000016 if ! exists("g:php_syntax_extensions_disabled")
                                let g:php_syntax_extensions_disabled = []
    3              0.000003 endif
    3              0.000017 syn case match
    3              0.000063 if index(g:php_syntax_extensions_enabled, "core") >= 0 && index(g:php_syntax_extensions_disabled, "core") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "core") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "core") < 0)
                            " Core constants
    3              0.000130 syn keyword phpConstants DEBUG_BACKTRACE_IGNORE_ARGS DEBUG_BACKTRACE_PROVIDE_OBJECT DEFAULT_INCLUDE_PATH E_ALL E_COMPILE_ERROR E_COMPILE_WARNING E_CORE_ERROR E_CORE_WARNING E_DEPRECATED E_ERROR E_NOTICE E_PARSE E_RECOVERABLE_ERROR E_STRICT E_USER_DEPRECATED E_USER_ERROR E_USER_NOTICE E_USER_WARNING E_WARNING PEAR_EXTENSION_DIR PEAR_INSTALL_DIR PHP_BINARY PHP_BINDIR PHP_CONFIG_FILE_PATH PHP_CONFIG_FILE_SCAN_DIR PHP_DATADIR PHP_DEBUG PHP_EOL PHP_EXTENSION_DIR PHP_EXTRA_VERSION PHP_FD_SETSIZE PHP_FLOAT_DIG PHP_FLOAT_EPSILON PHP_FLOAT_MAX PHP_FLOAT_MIN PHP_INT_MAX PHP_INT_MIN PHP_INT_SIZE PHP_LIBDIR PHP_LOCALSTATEDIR PHP_MAJOR_VERSION PHP_MANDIR PHP_MAXPATHLEN PHP_MINOR_VERSION PHP_OS PHP_OS_FAMILY PHP_OUTPUT_HANDLER_CLEAN PHP_OUTPUT_HANDLER_CLEANABLE PHP_OUTPUT_HANDLER_CONT PHP_OUTPUT_HANDLER_DISABLED PHP_OUTPUT_HANDLER_END PHP_OUTPUT_HANDLER_FINAL PHP_OUTPUT_HANDLER_FLUSH PHP_OUTPUT_HANDLER_FLUSHABLE PHP_OUTPUT_HANDLER_REMOVABLE PHP_OUTPUT_HANDLER_START PHP_OUTPUT_HANDLER_STARTED PHP_OUTPUT_HANDLER_STDFLAGS PH
    3              0.000013 endif
    3              0.000055 if index(g:php_syntax_extensions_enabled, "curl") >= 0 && index(g:php_syntax_extensions_disabled, "curl") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "curl") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "curl") < 0)
                            " curl constants
    3              0.009369 syn keyword phpConstants CURLAUTH_ANY CURLAUTH_ANYSAFE CURLAUTH_BASIC CURLAUTH_DIGEST CURLAUTH_DIGEST_IE CURLAUTH_GSSAPI CURLAUTH_GSSNEGOTIATE CURLAUTH_NEGOTIATE CURLAUTH_NONE CURLAUTH_NTLM CURLAUTH_NTLM_WB CURLAUTH_ONLY CURLE_ABORTED_BY_CALLBACK CURLE_BAD_CALLING_ORDER CURLE_BAD_CONTENT_ENCODING CURLE_BAD_DOWNLOAD_RESUME CURLE_BAD_FUNCTION_ARGUMENT CURLE_BAD_PASSWORD_ENTERED CURLE_COULDNT_CONNECT CURLE_COULDNT_RESOLVE_HOST CURLE_COULDNT_RESOLVE_PROXY CURLE_FAILED_INIT CURLE_FILESIZE_EXCEEDED CURLE_FILE_COULDNT_READ_FILE CURLE_FTP_ACCESS_DENIED CURLE_FTP_BAD_DOWNLOAD_RESUME CURLE_FTP_CANT_GET_HOST CURLE_FTP_CANT_RECONNECT CURLE_FTP_COULDNT_GET_SIZE CURLE_FTP_COULDNT_RETR_FILE CURLE_FTP_COULDNT_SET_ASCII CURLE_FTP_COULDNT_SET_BINARY CURLE_FTP_COULDNT_STOR_FILE CURLE_FTP_COULDNT_USE_REST CURLE_FTP_PARTIAL_FILE CURLE_FTP_PORT_FAILED CURLE_FTP_QUOTE_ERROR CURLE_FTP_SSL_FAILED CURLE_FTP_USER_PASSWORD_INCORRECT CURLE_FTP_WEIRD_227_FORMAT CURLE_FTP_WEIRD_PASS_REPLY CURLE_FTP_WEIRD_PASV_REPLY CURLE_FTP_WEIRD_SERVER_
    3              0.000017 endif
    3              0.000066 if index(g:php_syntax_extensions_enabled, "date") >= 0 && index(g:php_syntax_extensions_disabled, "date") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "date") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "date") < 0)
                            " date constants
    3              0.000071 syn keyword phpConstants AFRICA ALL ALL_WITH_BC AMERICA ANTARCTICA ARCTIC ASIA ATLANTIC ATOM AUSTRALIA COOKIE DATE_ATOM DATE_COOKIE DATE_ISO8601 DATE_RFC822 DATE_RFC850 DATE_RFC1036 DATE_RFC1123 DATE_RFC2822 DATE_RFC3339 DATE_RFC3339_EXTENDED DATE_RFC7231 DATE_RSS DATE_W3C EUROPE EXCLUDE_START_DATE INDIAN ISO8601 PACIFIC PER_COUNTRY RFC822 RFC850 RFC1036 RFC1123 RFC2822 RFC3339 RFC3339_EXTENDED RFC7231 RSS SUNFUNCS_RET_DOUBLE SUNFUNCS_RET_STRING SUNFUNCS_RET_TIMESTAMP UTC W3C contained
    3              0.000013 endif
    3              0.000060 if index(g:php_syntax_extensions_enabled, "dom") >= 0 && index(g:php_syntax_extensions_disabled, "dom") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "dom") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "dom") < 0)
                            " dom constants
    3              0.000096 syn keyword phpConstants DOMSTRING_SIZE_ERR DOM_HIERARCHY_REQUEST_ERR DOM_INDEX_SIZE_ERR DOM_INUSE_ATTRIBUTE_ERR DOM_INVALID_ACCESS_ERR DOM_INVALID_CHARACTER_ERR DOM_INVALID_MODIFICATION_ERR DOM_INVALID_STATE_ERR DOM_NAMESPACE_ERR DOM_NOT_FOUND_ERR DOM_NOT_SUPPORTED_ERR DOM_NO_DATA_ALLOWED_ERR DOM_NO_MODIFICATION_ALLOWED_ERR DOM_PHP_ERR DOM_SYNTAX_ERR DOM_VALIDATION_ERR DOM_WRONG_DOCUMENT_ERR XML_ATTRIBUTE_CDATA XML_ATTRIBUTE_DECL_NODE XML_ATTRIBUTE_ENTITY XML_ATTRIBUTE_ENUMERATION XML_ATTRIBUTE_ID XML_ATTRIBUTE_IDREF XML_ATTRIBUTE_IDREFS XML_ATTRIBUTE_NMTOKEN XML_ATTRIBUTE_NMTOKENS XML_ATTRIBUTE_NODE XML_ATTRIBUTE_NOTATION XML_CDATA_SECTION_NODE XML_COMMENT_NODE XML_DOCUMENT_FRAG_NODE XML_DOCUMENT_NODE XML_DOCUMENT_TYPE_NODE XML_DTD_NODE XML_ELEMENT_DECL_NODE XML_ELEMENT_NODE XML_ENTITY_DECL_NODE XML_ENTITY_NODE XML_ENTITY_REF_NODE XML_HTML_DOCUMENT_NODE XML_LOCAL_NAMESPACE XML_NAMESPACE_DECL_NODE XML_NOTATION_NODE XML_PI_NODE XML_TEXT_NODE contained
    3              0.000013 endif
    3              0.000058 if index(g:php_syntax_extensions_enabled, "gd") >= 0 && index(g:php_syntax_extensions_disabled, "gd") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "gd") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "gd") < 0)
                            " gd constants
    3              0.000171 syn keyword phpConstants GD_BUNDLED GD_EXTRA_VERSION GD_MAJOR_VERSION GD_MINOR_VERSION GD_RELEASE_VERSION GD_VERSION IMG_AFFINE_ROTATE IMG_AFFINE_SCALE IMG_AFFINE_SHEAR_HORIZONTAL IMG_AFFINE_SHEAR_VERTICAL IMG_AFFINE_TRANSLATE IMG_ARC_CHORD IMG_ARC_EDGED IMG_ARC_NOFILL IMG_ARC_PIE IMG_ARC_ROUNDED IMG_BELL IMG_BESSEL IMG_BICUBIC IMG_BICUBIC_FIXED IMG_BILINEAR_FIXED IMG_BLACKMAN IMG_BMP IMG_BOX IMG_BSPLINE IMG_CATMULLROM IMG_COLOR_BRUSHED IMG_COLOR_STYLED IMG_COLOR_STYLEDBRUSHED IMG_COLOR_TILED IMG_COLOR_TRANSPARENT IMG_CROP_BLACK IMG_CROP_DEFAULT IMG_CROP_SIDES IMG_CROP_THRESHOLD IMG_CROP_TRANSPARENT IMG_CROP_WHITE IMG_EFFECT_ALPHABLEND IMG_EFFECT_MULTIPLY IMG_EFFECT_NORMAL IMG_EFFECT_OVERLAY IMG_EFFECT_REPLACE IMG_FILTER_BRIGHTNESS IMG_FILTER_COLORIZE IMG_FILTER_CONTRAST IMG_FILTER_EDGEDETECT IMG_FILTER_EMBOSS IMG_FILTER_GAUSSIAN_BLUR IMG_FILTER_GRAYSCALE IMG_FILTER_MEAN_REMOVAL IMG_FILTER_NEGATE IMG_FILTER_PIXELATE IMG_FILTER_SELECTIVE_BLUR IMG_FILTER_SMOOTH IMG_FLIP_BOTH IMG_FLIP_HORIZONTAL IMG_FLIP_VERTIC
    3              0.000013 endif
    3              0.000058 if index(g:php_syntax_extensions_enabled, "hash") >= 0 && index(g:php_syntax_extensions_disabled, "hash") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "hash") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "hash") < 0)
                            " hash constants
    3              0.000048 syn keyword phpConstants HASH_HMAC MHASH_ADLER32 MHASH_CRC32 MHASH_CRC32B MHASH_FNV1A32 MHASH_FNV1A64 MHASH_FNV132 MHASH_FNV164 MHASH_GOST MHASH_HAVAL128 MHASH_HAVAL160 MHASH_HAVAL192 MHASH_HAVAL224 MHASH_HAVAL256 MHASH_JOAAT MHASH_MD2 MHASH_MD4 MHASH_MD5 MHASH_RIPEMD128 MHASH_RIPEMD160 MHASH_RIPEMD256 MHASH_RIPEMD320 MHASH_SHA1 MHASH_SHA224 MHASH_SHA256 MHASH_SHA384 MHASH_SHA512 MHASH_SNEFRU256 MHASH_TIGER MHASH_TIGER128 MHASH_TIGER160 MHASH_WHIRLPOOL contained
    3              0.000012 endif
    3              0.000055 if index(g:php_syntax_extensions_enabled, "iconv") >= 0 && index(g:php_syntax_extensions_disabled, "iconv") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "iconv") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "iconv") < 0)
                            " iconv constants
    3              0.000018 syn keyword phpConstants ICONV_IMPL ICONV_MIME_DECODE_CONTINUE_ON_ERROR ICONV_MIME_DECODE_STRICT ICONV_VERSION contained
    3              0.000012 endif
    3              0.000054 if index(g:php_syntax_extensions_enabled, "json") >= 0 && index(g:php_syntax_extensions_disabled, "json") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "json") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "json") < 0)
                            " json constants
    3              0.000050 syn keyword phpConstants JSON_BIGINT_AS_STRING JSON_ERROR_CTRL_CHAR JSON_ERROR_DEPTH JSON_ERROR_INF_OR_NAN JSON_ERROR_INVALID_PROPERTY_NAME JSON_ERROR_NONE JSON_ERROR_RECURSION JSON_ERROR_STATE_MISMATCH JSON_ERROR_SYNTAX JSON_ERROR_UNSUPPORTED_TYPE JSON_ERROR_UTF8 JSON_ERROR_UTF16 JSON_FORCE_OBJECT JSON_HEX_AMP JSON_HEX_APOS JSON_HEX_QUOT JSON_HEX_TAG JSON_INVALID_UTF8_IGNORE JSON_INVALID_UTF8_SUBSTITUTE JSON_NUMERIC_CHECK JSON_OBJECT_AS_ARRAY JSON_PARTIAL_OUTPUT_ON_ERROR JSON_PRESERVE_ZERO_FRACTION JSON_PRETTY_PRINT JSON_THROW_ON_ERROR JSON_UNESCAPED_LINE_TERMINATORS JSON_UNESCAPED_SLASHES JSON_UNESCAPED_UNICODE contained
    3              0.000012 endif
    3              0.000057 if index(g:php_syntax_extensions_enabled, "libxml") >= 0 && index(g:php_syntax_extensions_disabled, "libxml") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "libxml") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "libxml") < 0)
                            " libxml constants
    3              0.000043 syn keyword phpConstants LIBXML_BIGLINES LIBXML_COMPACT LIBXML_DOTTED_VERSION LIBXML_DTDATTR LIBXML_DTDLOAD LIBXML_DTDVALID LIBXML_ERR_ERROR LIBXML_ERR_FATAL LIBXML_ERR_NONE LIBXML_ERR_WARNING LIBXML_HTML_NODEFDTD LIBXML_HTML_NOIMPLIED LIBXML_LOADED_VERSION LIBXML_NOBLANKS LIBXML_NOCDATA LIBXML_NOEMPTYTAG LIBXML_NOENT LIBXML_NOERROR LIBXML_NONET LIBXML_NOWARNING LIBXML_NOXMLDECL LIBXML_NSCLEAN LIBXML_PARSEHUGE LIBXML_PEDANTIC LIBXML_SCHEMA_CREATE LIBXML_VERSION LIBXML_XINCLUDE contained
    3              0.000012 endif
    3              0.000056 if index(g:php_syntax_extensions_enabled, "mbstring") >= 0 && index(g:php_syntax_extensions_disabled, "mbstring") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "mbstring") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "mbstring") < 0)
                            " mbstring constants
    3              0.000024 syn keyword phpConstants MB_CASE_FOLD MB_CASE_FOLD_SIMPLE MB_CASE_LOWER MB_CASE_LOWER_SIMPLE MB_CASE_TITLE MB_CASE_TITLE_SIMPLE MB_CASE_UPPER MB_CASE_UPPER_SIMPLE MB_OVERLOAD_MAIL MB_OVERLOAD_REGEX MB_OVERLOAD_STRING contained
    3              0.000012 endif
    3              0.000055 if index(g:php_syntax_extensions_enabled, "mcrypt") >= 0 && index(g:php_syntax_extensions_disabled, "mcrypt") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "mcrypt") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "mcrypt") < 0)
                            " mcrypt constants
    3              0.000056 syn keyword phpConstants MCRYPT_3DES MCRYPT_ARCFOUR MCRYPT_ARCFOUR_IV MCRYPT_BLOWFISH MCRYPT_BLOWFISH_COMPAT MCRYPT_CAST_128 MCRYPT_CAST_256 MCRYPT_CRYPT MCRYPT_DECRYPT MCRYPT_DES MCRYPT_DEV_RANDOM MCRYPT_DEV_URANDOM MCRYPT_ENCRYPT MCRYPT_ENIGNA MCRYPT_GOST MCRYPT_IDEA MCRYPT_LOKI97 MCRYPT_MARS MCRYPT_MODE_CBC MCRYPT_MODE_CFB MCRYPT_MODE_ECB MCRYPT_MODE_NOFB MCRYPT_MODE_OFB MCRYPT_MODE_STREAM MCRYPT_PANAMA MCRYPT_RAND MCRYPT_RC2 MCRYPT_RC6 MCRYPT_RIJNDAEL_128 MCRYPT_RIJNDAEL_192 MCRYPT_RIJNDAEL_256 MCRYPT_SAFER64 MCRYPT_SAFER128 MCRYPT_SAFERPLUS MCRYPT_SERPENT MCRYPT_SKIPJACK MCRYPT_THREEWAY MCRYPT_TRIPLEDES MCRYPT_TWOFISH MCRYPT_WAKE MCRYPT_XTEA contained
    3              0.000012 endif
    3              0.000056 if index(g:php_syntax_extensions_enabled, "mysql") >= 0 && index(g:php_syntax_extensions_disabled, "mysql") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "mysql") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "mysql") < 0)
                            " mysql constants
    3              0.000019 syn keyword phpConstants MYSQL_ASSOC MYSQL_BOTH MYSQL_CLIENT_COMPRESS MYSQL_CLIENT_IGNORE_SPACE MYSQL_CLIENT_INTERACTIVE MYSQL_CLIENT_SSL MYSQL_NUM contained
    3              0.000012 endif
    3              0.000056 if index(g:php_syntax_extensions_enabled, "mysqli") >= 0 && index(g:php_syntax_extensions_disabled, "mysqli") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "mysqli") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "mysqli") < 0)
                            " mysqli constants
    3              0.000167 syn keyword phpConstants MYSQLI_ASSOC MYSQLI_ASYNC MYSQLI_AUTO_INCREMENT_FLAG MYSQLI_BINARY_FLAG MYSQLI_BLOB_FLAG MYSQLI_BOTH MYSQLI_CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS MYSQLI_CLIENT_COMPRESS MYSQLI_CLIENT_FOUND_ROWS MYSQLI_CLIENT_IGNORE_SPACE MYSQLI_CLIENT_INTERACTIVE MYSQLI_CLIENT_NO_SCHEMA MYSQLI_CLIENT_SSL MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT MYSQLI_CLIENT_SSL_VERIFY_SERVER_CERT MYSQLI_CURSOR_TYPE_FOR_UPDATE MYSQLI_CURSOR_TYPE_NO_CURSOR MYSQLI_CURSOR_TYPE_READ_ONLY MYSQLI_CURSOR_TYPE_SCROLLABLE MYSQLI_DATA_TRUNCATED MYSQLI_DEBUG_TRACE_ENABLED MYSQLI_ENUM_FLAG MYSQLI_GROUP_FLAG MYSQLI_INIT_COMMAND MYSQLI_MULTIPLE_KEY_FLAG MYSQLI_NOT_NULL_FLAG MYSQLI_NO_DATA MYSQLI_NO_DEFAULT_VALUE_FLAG MYSQLI_NUM MYSQLI_NUM_FLAG MYSQLI_ON_UPDATE_NOW_FLAG MYSQLI_OPT_CAN_HANDLE_EXPIRED_PASSWORDS MYSQLI_OPT_CONNECT_TIMEOUT MYSQLI_OPT_INT_AND_FLOAT_NATIVE MYSQLI_OPT_LOCAL_INFILE MYSQLI_OPT_NET_CMD_BUFFER_SIZE MYSQLI_OPT_NET_READ_BUFFER_SIZE MYSQLI_OPT_READ_TIMEOUT MYSQLI_OPT_SSL_VERIFY_SERVER_CERT MYSQLI_PART_KEY_FLAG MY
    3              0.000013 endif
    3              0.000059 if index(g:php_syntax_extensions_enabled, "openssl") >= 0 && index(g:php_syntax_extensions_disabled, "openssl") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "openssl") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "openssl") < 0)
                            " openssl constants
    3              0.000077 syn keyword phpConstants OPENSSL_ALGO_MD4 OPENSSL_ALGO_MD5 OPENSSL_ALGO_RMD160 OPENSSL_ALGO_SHA1 OPENSSL_ALGO_SHA224 OPENSSL_ALGO_SHA256 OPENSSL_ALGO_SHA384 OPENSSL_ALGO_SHA512 OPENSSL_CIPHER_3DES OPENSSL_CIPHER_AES_128_CBC OPENSSL_CIPHER_AES_192_CBC OPENSSL_CIPHER_AES_256_CBC OPENSSL_CIPHER_DES OPENSSL_CIPHER_RC2_40 OPENSSL_CIPHER_RC2_64 OPENSSL_CIPHER_RC2_128 OPENSSL_DEFAULT_STREAM_CIPHERS OPENSSL_DONT_ZERO_PAD_KEY OPENSSL_KEYTYPE_DH OPENSSL_KEYTYPE_DSA OPENSSL_KEYTYPE_EC OPENSSL_KEYTYPE_RSA OPENSSL_NO_PADDING OPENSSL_PKCS1_OAEP_PADDING OPENSSL_PKCS1_PADDING OPENSSL_RAW_DATA OPENSSL_SSLV23_PADDING OPENSSL_TLSEXT_SERVER_NAME OPENSSL_VERSION_NUMBER OPENSSL_VERSION_TEXT OPENSSL_ZERO_PADDING PKCS7_BINARY PKCS7_DETACHED PKCS7_NOATTR PKCS7_NOCERTS PKCS7_NOCHAIN PKCS7_NOINTERN PKCS7_NOSIGS PKCS7_NOVERIFY PKCS7_TEXT X509_PURPOSE_ANY X509_PURPOSE_CRL_SIGN X509_PURPOSE_NS_SSL_SERVER X509_PURPOSE_SMIME_ENCRYPT X509_PURPOSE_SMIME_SIGN X509_PURPOSE_SSL_CLIENT X509_PURPOSE_SSL_SERVER contained
    3              0.000038 endif
    3              0.000058 if index(g:php_syntax_extensions_enabled, "pcre") >= 0 && index(g:php_syntax_extensions_disabled, "pcre") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "pcre") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "pcre") < 0)
                            " pcre constants
    3              0.000036 syn keyword phpConstants PCRE_JIT_SUPPORT PCRE_VERSION PCRE_VERSION_MAJOR PCRE_VERSION_MINOR PREG_BACKTRACK_LIMIT_ERROR PREG_BAD_UTF8_ERROR PREG_BAD_UTF8_OFFSET_ERROR PREG_GREP_INVERT PREG_INTERNAL_ERROR PREG_JIT_STACKLIMIT_ERROR PREG_NO_ERROR PREG_OFFSET_CAPTURE PREG_PATTERN_ORDER PREG_RECURSION_LIMIT_ERROR PREG_SET_ORDER PREG_SPLIT_DELIM_CAPTURE PREG_SPLIT_NO_EMPTY PREG_SPLIT_OFFSET_CAPTURE PREG_UNMATCHED_AS_NULL contained
    3              0.000012 endif
    3              0.000056 if index(g:php_syntax_extensions_enabled, "pdo") >= 0 && index(g:php_syntax_extensions_disabled, "pdo") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "pdo") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "pdo") < 0)
                            " PDO constants
    3              0.000155 syn keyword phpConstants ATTR_AUTOCOMMIT ATTR_CASE ATTR_CLIENT_VERSION ATTR_CONNECTION_STATUS ATTR_CURSOR ATTR_CURSOR_NAME ATTR_DEFAULT_FETCH_MODE ATTR_DEFAULT_STR_PARAM ATTR_DRIVER_NAME ATTR_EMULATE_PREPARES ATTR_ERRMODE ATTR_FETCH_CATALOG_NAMES ATTR_FETCH_TABLE_NAMES ATTR_MAX_COLUMN_LEN ATTR_ORACLE_NULLS ATTR_PERSISTENT ATTR_PREFETCH ATTR_SERVER_INFO ATTR_SERVER_VERSION ATTR_STATEMENT_CLASS ATTR_STRINGIFY_FETCHES ATTR_TIMEOUT CASE_LOWER CASE_NATURAL CASE_UPPER CURSOR_FWDONLY CURSOR_SCROLL ERRMODE_EXCEPTION ERRMODE_SILENT ERRMODE_WARNING ERR_NONE FETCH_ASSOC FETCH_BOTH FETCH_BOUND FETCH_CLASS FETCH_CLASSTYPE FETCH_COLUMN FETCH_FUNC FETCH_GROUP FETCH_INTO FETCH_KEY_PAIR FETCH_LAZY FETCH_NAMED FETCH_NUM FETCH_OBJ FETCH_ORI_ABS FETCH_ORI_FIRST FETCH_ORI_LAST FETCH_ORI_NEXT FETCH_ORI_PRIOR FETCH_ORI_REL FETCH_PROPS_LATE FETCH_SERIALIZE FETCH_UNIQUE MYSQL_ATTR_COMPRESS MYSQL_ATTR_DIRECT_QUERY MYSQL_ATTR_FOUND_ROWS MYSQL_ATTR_IGNORE_SPACE MYSQL_ATTR_INIT_COMMAND MYSQL_ATTR_LOCAL_INFILE MYSQL_ATTR_MULTI_STATEMENTS
    3              0.000013 endif
    3              0.000057 if index(g:php_syntax_extensions_enabled, "pgsql") >= 0 && index(g:php_syntax_extensions_disabled, "pgsql") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "pgsql") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "pgsql") < 0)
                            " pgsql constants
    3              0.000141 syn keyword phpConstants PGSQL_ASSOC PGSQL_BAD_RESPONSE PGSQL_BOTH PGSQL_COMMAND_OK PGSQL_CONNECTION_AUTH_OK PGSQL_CONNECTION_AWAITING_RESPONSE PGSQL_CONNECTION_BAD PGSQL_CONNECTION_MADE PGSQL_CONNECTION_OK PGSQL_CONNECTION_SETENV PGSQL_CONNECTION_STARTED PGSQL_CONNECT_ASYNC PGSQL_CONNECT_FORCE_NEW PGSQL_CONV_FORCE_NULL PGSQL_CONV_IGNORE_DEFAULT PGSQL_CONV_IGNORE_NOT_NULL PGSQL_COPY_IN PGSQL_COPY_OUT PGSQL_DIAG_COLUMN_NAME PGSQL_DIAG_CONSTRAINT_NAME PGSQL_DIAG_CONTEXT PGSQL_DIAG_DATATYPE_NAME PGSQL_DIAG_INTERNAL_POSITION PGSQL_DIAG_INTERNAL_QUERY PGSQL_DIAG_MESSAGE_DETAIL PGSQL_DIAG_MESSAGE_HINT PGSQL_DIAG_MESSAGE_PRIMARY PGSQL_DIAG_SCHEMA_NAME PGSQL_DIAG_SEVERITY PGSQL_DIAG_SEVERITY_NONLOCALIZED PGSQL_DIAG_SOURCE_FILE PGSQL_DIAG_SOURCE_FUNCTION PGSQL_DIAG_SOURCE_LINE PGSQL_DIAG_SQLSTATE PGSQL_DIAG_STATEMENT_POSITION PGSQL_DIAG_TABLE_NAME PGSQL_DML_ASYNC PGSQL_DML_ESCAPE PGSQL_DML_EXEC PGSQL_DML_NO_CONV PGSQL_DML_STRING PGSQL_EMPTY_QUERY PGSQL_ERRORS_DEFAULT PGSQL_ERRORS_TERSE PGSQL_ERRORS_VERBOSE PGSQL_FATA
    3              0.000013 endif
    3              0.000060 if index(g:php_syntax_extensions_enabled, "phar") >= 0 && index(g:php_syntax_extensions_disabled, "phar") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "phar") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "phar") < 0)
                            " Phar constants
    3              0.000048 syn keyword phpConstants BZ2 COMPRESSED CURRENT_AS_FILEINFO CURRENT_AS_PATHNAME CURRENT_AS_SELF CURRENT_MODE_MASK FOLLOW_SYMLINKS GZ KEY_AS_FILENAME KEY_AS_PATHNAME KEY_MODE_MASK MD5 NEW_CURRENT_AND_KEY NONE OPENSSL OTHER_MODE_MASK PHAR PHP PHPS SHA1 SHA256 SHA512 SKIP_DOTS TAR UNIX_PATHS ZIP contained
    3              0.000012 endif
    3              0.000057 if index(g:php_syntax_extensions_enabled, "reflection") >= 0 && index(g:php_syntax_extensions_disabled, "reflection") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "reflection") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "reflection") < 0)
                            " Reflection constants
    3              0.000021 syn keyword phpConstants IS_ABSTRACT IS_DEPRECATED IS_EXPLICIT_ABSTRACT IS_FINAL IS_IMPLICIT_ABSTRACT IS_PRIVATE IS_PROTECTED IS_PUBLIC IS_STATIC contained
    3              0.000012 endif
    3              0.000055 if index(g:php_syntax_extensions_enabled, "session") >= 0 && index(g:php_syntax_extensions_disabled, "session") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "session") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "session") < 0)
                            " session constants
    3              0.000013 syn keyword phpConstants PHP_SESSION_ACTIVE PHP_SESSION_DISABLED PHP_SESSION_NONE contained
    3              0.000012 endif
    3              0.000055 if index(g:php_syntax_extensions_enabled, "soap") >= 0 && index(g:php_syntax_extensions_disabled, "soap") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "soap") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "soap") < 0)
                            " soap constants
    3              0.000112 syn keyword phpConstants APACHE_MAP SOAP_1_1 SOAP_1_2 SOAP_ACTOR_NEXT SOAP_ACTOR_NONE SOAP_ACTOR_UNLIMATERECEIVER SOAP_AUTHENTICATION_BASIC SOAP_AUTHENTICATION_DIGEST SOAP_COMPRESSION_ACCEPT SOAP_COMPRESSION_DEFLATE SOAP_COMPRESSION_GZIP SOAP_DOCUMENT SOAP_ENCODED SOAP_ENC_ARRAY SOAP_ENC_OBJECT SOAP_FUNCTIONS_ALL SOAP_LITERAL SOAP_PERSISTENCE_REQUEST SOAP_PERSISTENCE_SESSION SOAP_RPC SOAP_SINGLE_ELEMENT_ARRAYS SOAP_SSL_METHOD_SSLv2 SOAP_SSL_METHOD_SSLv3 SOAP_SSL_METHOD_SSLv23 SOAP_SSL_METHOD_TLS SOAP_USE_XSI_ARRAY_TYPE SOAP_WAIT_ONE_WAY_CALLS UNKNOWN_TYPE WSDL_CACHE_BOTH WSDL_CACHE_DISK WSDL_CACHE_MEMORY WSDL_CACHE_NONE XSD_1999_NAMESPACE XSD_1999_TIMEINSTANT XSD_ANYTYPE XSD_ANYURI XSD_ANYXML XSD_BASE64BINARY XSD_BOOLEAN XSD_BYTE XSD_DATE XSD_DATETIME XSD_DECIMAL XSD_DOUBLE XSD_DURATION XSD_ENTITIES XSD_ENTITY XSD_FLOAT XSD_GDAY XSD_GMONTH XSD_GMONTHDAY XSD_GYEAR XSD_GYEARMONTH XSD_HEXBINARY XSD_ID XSD_IDREF XSD_IDREFS XSD_INT XSD_INTEGER XSD_LANGUAGE XSD_LONG XSD_NAME XSD_NAMESPACE XSD_NCNAME XSD_NEGATIVEIN
    3              0.000012 endif
    3              0.000057 if index(g:php_syntax_extensions_enabled, "sockets") >= 0 && index(g:php_syntax_extensions_disabled, "sockets") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "sockets") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "sockets") < 0)
                            " sockets constants
    3              0.000251 syn keyword phpConstants AF_INET AF_INET6 AF_UNIX AI_ADDRCONFIG AI_ALL AI_CANONIDN AI_CANONNAME AI_IDN AI_IDN_ALLOW_UNASSIGNED AI_IDN_USE_STD3_ASCII_RULES AI_NUMERICHOST AI_NUMERICSERV AI_PASSIVE AI_V4MAPPED IPPROTO_IP IPPROTO_IPV6 IPV6_HOPLIMIT IPV6_MULTICAST_HOPS IPV6_MULTICAST_IF IPV6_MULTICAST_LOOP IPV6_PKTINFO IPV6_RECVHOPLIMIT IPV6_RECVPKTINFO IPV6_RECVTCLASS IPV6_TCLASS IPV6_UNICAST_HOPS IPV6_V6ONLY IP_MULTICAST_IF IP_MULTICAST_LOOP IP_MULTICAST_TTL MCAST_BLOCK_SOURCE MCAST_JOIN_GROUP MCAST_JOIN_SOURCE_GROUP MCAST_LEAVE_GROUP MCAST_LEAVE_SOURCE_GROUP MCAST_UNBLOCK_SOURCE MSG_CMSG_CLOEXEC MSG_CONFIRM MSG_CTRUNC MSG_DONTROUTE MSG_DONTWAIT MSG_EOF MSG_EOR MSG_ERRQUEUE MSG_MORE MSG_NOSIGNAL MSG_OOB MSG_PEEK MSG_TRUNC MSG_WAITALL MSG_WAITFORONE PHP_BINARY_READ PHP_NORMAL_READ SCM_CREDENTIALS SCM_RIGHTS SOCKET_E2BIG SOCKET_EACCES SOCKET_EADDRINUSE SOCKET_EADDRNOTAVAIL SOCKET_EADV SOCKET_EAFNOSUPPORT SOCKET_EAGAIN SOCKET_EALREADY SOCKET_EBADE SOCKET_EBADF SOCKET_EBADFD SOCKET_EBADMSG SOCKET_EBADR SOCKET_EBAD
    3              0.000013 endif
    3              0.000060 if index(g:php_syntax_extensions_enabled, "spl") >= 0 && index(g:php_syntax_extensions_disabled, "spl") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "spl") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "spl") < 0)
                            " SPL constants
    3              0.000086 syn keyword phpConstants ALL_MATCHES ARRAY_AS_PROPS BYPASS_CURRENT BYPASS_KEY CALL_TOSTRING CATCH_GET_CHILD CHILD_ARRAYS_ONLY CHILD_FIRST CURRENT_AS_FILEINFO CURRENT_AS_PATHNAME CURRENT_AS_SELF CURRENT_MODE_MASK DROP_NEW_LINE EXTR_BOTH EXTR_DATA EXTR_PRIORITY FOLLOW_SYMLINKS FULL_CACHE GET_MATCH INVERT_MATCH IT_MODE_DELETE IT_MODE_FIFO IT_MODE_KEEP IT_MODE_LIFO KEY_AS_FILENAME KEY_AS_PATHNAME KEY_MODE_MASK LEAVES_ONLY MATCH MIT_KEYS_ASSOC MIT_KEYS_NUMERIC MIT_NEED_ALL MIT_NEED_ANY NEW_CURRENT_AND_KEY OTHER_MODE_MASK PREFIX_END_HAS_NEXT PREFIX_END_LAST PREFIX_LEFT PREFIX_MID_HAS_NEXT PREFIX_MID_LAST PREFIX_RIGHT READ_AHEAD READ_CSV REPLACE SELF_FIRST SKIP_DOTS SKIP_EMPTY SPLIT STD_PROP_LIST TOSTRING_USE_CURRENT TOSTRING_USE_INNER TOSTRING_USE_KEY UNIX_PATHS USE_KEY contained
    3              0.000039 endif
    3              0.000063 if index(g:php_syntax_extensions_enabled, "sqlite3") >= 0 && index(g:php_syntax_extensions_disabled, "sqlite3") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "sqlite3") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "sqlite3") < 0)
                            " sqlite3 constants
    3              0.000038 syn keyword phpConstants SQLITE3_ASSOC SQLITE3_BLOB SQLITE3_BOTH SQLITE3_DETERMINISTIC SQLITE3_FLOAT SQLITE3_INTEGER SQLITE3_NULL SQLITE3_NUM SQLITE3_OPEN_CREATE SQLITE3_OPEN_READONLY SQLITE3_OPEN_READWRITE SQLITE3_TEXT contained
    3              0.000013 endif
    3              0.000061 if index(g:php_syntax_extensions_enabled, "standard") >= 0 && index(g:php_syntax_extensions_disabled, "standard") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "standard") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "standard") < 0)
                            " standard constants
    3              0.000520 syn keyword phpConstants ABDAY_1 ABDAY_2 ABDAY_3 ABDAY_4 ABDAY_5 ABDAY_6 ABDAY_7 ABMON_1 ABMON_2 ABMON_3 ABMON_4 ABMON_5 ABMON_6 ABMON_7 ABMON_8 ABMON_9 ABMON_10 ABMON_11 ABMON_12 ALT_DIGITS AM_STR ARRAY_FILTER_USE_BOTH ARRAY_FILTER_USE_KEY ASSERT_ACTIVE ASSERT_BAIL ASSERT_CALLBACK ASSERT_EXCEPTION ASSERT_QUIET_EVAL ASSERT_WARNING CASE_LOWER CASE_UPPER CHAR_MAX CODESET CONNECTION_ABORTED CONNECTION_NORMAL CONNECTION_TIMEOUT COUNT_NORMAL COUNT_RECURSIVE CREDITS_ALL CREDITS_DOCS CREDITS_FULLPAGE CREDITS_GENERAL CREDITS_GROUP CREDITS_MODULES CREDITS_QA CREDITS_SAPI CRNCYSTR CRYPT_BLOWFISH CRYPT_EXT_DES CRYPT_MD5 CRYPT_SALT_LENGTH CRYPT_SHA256 CRYPT_SHA512 CRYPT_STD_DES DAY_1 DAY_2 DAY_3 DAY_4 DAY_5 DAY_6 DAY_7 DIRECTORY_SEPARATOR DNS_A DNS_A6 DNS_AAAA DNS_ALL DNS_ANY DNS_CAA DNS_CNAME DNS_HINFO DNS_MX DNS_NAPTR DNS_NS DNS_PTR DNS_SOA DNS_SRV DNS_TXT D_FMT D_T_FMT ENT_COMPAT ENT_DISALLOWED ENT_HTML5 ENT_HTML401 ENT_IGNORE ENT_NOQUOTES ENT_QUOTES ENT_SUBSTITUTE ENT_XHTML ENT_XML1 ERA ERA_D_FMT ERA_D_T_FMT ERA_T_F
    3              0.000014 endif
    3              0.000065 if index(g:php_syntax_extensions_enabled, "tokenizer") >= 0 && index(g:php_syntax_extensions_disabled, "tokenizer") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "tokenizer") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "tokenizer") < 0)
                            " tokenizer constants
    3              0.000203 syn keyword phpConstants TOKEN_PARSE T_ABSTRACT T_AND_EQUAL T_ARRAY T_ARRAY_CAST T_AS T_BAD_CHARACTER T_BOOLEAN_AND T_BOOLEAN_OR T_BOOL_CAST T_BREAK T_CALLABLE T_CASE T_CATCH T_CHARACTER T_CLASS T_CLASS_C T_CLONE T_CLOSE_TAG T_COALESCE T_COMMENT T_CONCAT_EQUAL T_CONST T_CONSTANT_ENCAPSED_STRING T_CONTINUE T_CURLY_OPEN T_DEC T_DECLARE T_DEFAULT T_DIR T_DIV_EQUAL T_DNUMBER T_DO T_DOC_COMMENT T_DOLLAR_OPEN_CURLY_BRACES T_DOUBLE_ARROW T_DOUBLE_CAST T_DOUBLE_COLON T_ECHO T_ELLIPSIS T_ELSE T_ELSEIF T_EMPTY T_ENCAPSED_AND_WHITESPACE T_ENDDECLARE T_ENDFOR T_ENDFOREACH T_ENDIF T_ENDSWITCH T_ENDWHILE T_END_HEREDOC T_EVAL T_EXIT T_EXTENDS T_FILE T_FINAL T_FINALLY T_FOR T_FOREACH T_FUNCTION T_FUNC_C T_GLOBAL T_GOTO T_HALT_COMPILER T_IF T_IMPLEMENTS T_INC T_INCLUDE T_INCLUDE_ONCE T_INLINE_HTML T_INSTANCEOF T_INSTEADOF T_INTERFACE T_INT_CAST T_ISSET T_IS_EQUAL T_IS_GREATER_OR_EQUAL T_IS_IDENTICAL T_IS_NOT_EQUAL T_IS_NOT_IDENTICAL T_IS_SMALLER_OR_EQUAL T_LINE T_LIST T_LNUMBER T_LOGICAL_AND T_LOGICAL_OR T_LOGICAL_XOR T_METH
    3              0.000040 endif
    3              0.000062 if index(g:php_syntax_extensions_enabled, "xml") >= 0 && index(g:php_syntax_extensions_disabled, "xml") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "xml") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "xml") < 0)
                            " xml constants
    3              0.000056 syn keyword phpConstants XML_ERROR_ASYNC_ENTITY XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF XML_ERROR_BAD_CHAR_REF XML_ERROR_BINARY_ENTITY_REF XML_ERROR_DUPLICATE_ATTRIBUTE XML_ERROR_EXTERNAL_ENTITY_HANDLING XML_ERROR_INCORRECT_ENCODING XML_ERROR_INVALID_TOKEN XML_ERROR_JUNK_AFTER_DOC_ELEMENT XML_ERROR_MISPLACED_XML_PI XML_ERROR_NONE XML_ERROR_NO_ELEMENTS XML_ERROR_NO_MEMORY XML_ERROR_PARAM_ENTITY_REF XML_ERROR_PARTIAL_CHAR XML_ERROR_RECURSIVE_ENTITY_REF XML_ERROR_SYNTAX XML_ERROR_TAG_MISMATCH XML_ERROR_UNCLOSED_CDATA_SECTION XML_ERROR_UNCLOSED_TOKEN XML_ERROR_UNDEFINED_ENTITY XML_ERROR_UNKNOWN_ENCODING XML_OPTION_CASE_FOLDING XML_OPTION_SKIP_TAGSTART XML_OPTION_SKIP_WHITE XML_OPTION_TARGET_ENCODING XML_SAX_IMPL contained
    3              0.000013 endif
    3              0.000061 if index(g:php_syntax_extensions_enabled, "xmlreader") >= 0 && index(g:php_syntax_extensions_disabled, "xmlreader") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "xmlreader") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "xmlreader") < 0)
                            " xmlreader constants
    3              0.000043 syn keyword phpConstants ATTRIBUTE CDATA COMMENT DEFAULTATTRS DOC DOC_FRAGMENT DOC_TYPE ELEMENT END_ELEMENT END_ENTITY ENTITY ENTITY_REF LOADDTD NONE NOTATION PI SIGNIFICANT_WHITESPACE SUBST_ENTITIES TEXT VALIDATE WHITESPACE XML_DECLARATION contained
    3              0.000012 endif
    3              0.000066 if index(g:php_syntax_extensions_enabled, "zip") >= 0 && index(g:php_syntax_extensions_disabled, "zip") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "zip") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "zip") < 0)
                            " zip constants
    3              0.000139 syn keyword phpConstants CHECKCONS CM_BZIP2 CM_DEFAULT CM_DEFLATE CM_DEFLATE64 CM_IMPLODE CM_LZ77 CM_LZMA CM_PKWARE_IMPLODE CM_PPMD CM_REDUCE_1 CM_REDUCE_2 CM_REDUCE_3 CM_REDUCE_4 CM_SHRINK CM_STORE CM_TERSE CM_WAVPACK CREATE ER_CHANGED ER_CLOSE ER_COMPNOTSUPP ER_CRC ER_DELETED ER_EOF ER_EXISTS ER_INCONS ER_INTERNAL ER_INVAL ER_MEMORY ER_MULTIDISK ER_NOENT ER_NOZIP ER_OK ER_OPEN ER_READ ER_REMOVE ER_RENAME ER_SEEK ER_TMPOPEN ER_WRITE ER_ZIPCLOSED ER_ZLIB EXCL FL_COMPRESSED FL_ENC_CP437 FL_ENC_GUESS FL_ENC_RAW FL_ENC_STRICT FL_ENC_UTF_8 FL_NOCASE FL_NODIR FL_UNCHANGED OPSYS_ACORN_RISC OPSYS_ALTERNATE_MVS OPSYS_AMIGA OPSYS_ATARI_ST OPSYS_BEOS OPSYS_CPM OPSYS_DEFAULT OPSYS_DOS OPSYS_MACINTOSH OPSYS_MVS OPSYS_OPENVMS OPSYS_OS_2 OPSYS_OS_400 OPSYS_OS_X OPSYS_TANDEM OPSYS_UNIX OPSYS_VFAT OPSYS_VM_CMS OPSYS_VSE OPSYS_WINDOWS_NTFS OPSYS_Z_CPM OPSYS_Z_SYSTEM OVERWRITE contained
    3              0.000018 endif
    3              0.000086 if index(g:php_syntax_extensions_enabled, "zlib") >= 0 && index(g:php_syntax_extensions_disabled, "zlib") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "zlib") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "zlib") < 0)
                            " zlib constants
    3              0.000081 syn keyword phpConstants FORCE_DEFLATE FORCE_GZIP ZLIB_BLOCK ZLIB_BUF_ERROR ZLIB_DATA_ERROR ZLIB_DEFAULT_STRATEGY ZLIB_ENCODING_DEFLATE ZLIB_ENCODING_GZIP ZLIB_ENCODING_RAW ZLIB_ERRNO ZLIB_FILTERED ZLIB_FINISH ZLIB_FIXED ZLIB_FULL_FLUSH ZLIB_HUFFMAN_ONLY ZLIB_MEM_ERROR ZLIB_NEED_DICT ZLIB_NO_FLUSH ZLIB_OK ZLIB_PARTIAL_FLUSH ZLIB_RLE ZLIB_STREAM_END ZLIB_STREAM_ERROR ZLIB_SYNC_FLUSH ZLIB_VERNUM ZLIB_VERSION ZLIB_VERSION_ERROR contained
    3              0.000007 endif
    3              0.000021 syn case ignore
    3              0.000062 if index(g:php_syntax_extensions_enabled, "bcmath") >= 0 && index(g:php_syntax_extensions_disabled, "bcmath") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "bcmath") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "bcmath") < 0)
                            " bcmath functions
    3              0.000035 syn keyword phpFunctions bcadd bccomp bcdiv bcmod bcmul bcpow bcpowmod bcscale bcsqrt bcsub contained
    3              0.000013 endif
    3              0.000057 if index(g:php_syntax_extensions_enabled, "bz2") >= 0 && index(g:php_syntax_extensions_disabled, "bz2") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "bz2") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "bz2") < 0)
                            " bz2 functions
    3              0.000037 syn keyword phpFunctions bzclose bzcompress bzdecompress bzerrno bzerror bzerrstr bzflush bzopen bzread bzwrite contained
    3              0.000012 endif
    3              0.000055 if index(g:php_syntax_extensions_enabled, "core") >= 0 && index(g:php_syntax_extensions_disabled, "core") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "core") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "core") < 0)
                            " Core functions
    3              0.000188 syn keyword phpFunctions class_alias class_exists create_function debug_backtrace debug_print_backtrace define defined each error_reporting extension_loaded func_get_arg func_get_args func_num_args function_exists gc_collect_cycles gc_disable gc_enable gc_enabled gc_mem_caches gc_status get_called_class get_class get_class_methods get_class_vars get_declared_classes get_declared_interfaces get_declared_traits get_defined_constants get_defined_functions get_defined_vars get_extension_funcs get_included_files get_loaded_extensions get_object_vars get_parent_class get_required_files get_resource_type get_resources interface_exists is_a is_subclass_of method_exists property_exists restore_error_handler restore_exception_handler set_error_handler set_exception_handler strcasecmp strcmp strlen strncasecmp strncmp trait_exists trigger_error user_error zend_version contained
                            " Core classes and interfaces
    3              0.000065 syn keyword phpClasses ArgumentCountError ArithmeticError ArrayAccess ClosedGeneratorException Closure CompileError Countable DivisionByZeroError Error ErrorException Exception Generator Iterator IteratorAggregate ParseError Serializable Throwable Traversable TypeError stdClass contained
    3              0.000012 endif
    3              0.000057 if index(g:php_syntax_extensions_enabled, "curl") >= 0 && index(g:php_syntax_extensions_disabled, "curl") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "curl") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "curl") < 0)
                            " curl functions
    3              0.000105 syn keyword phpFunctions curl_close curl_copy_handle curl_errno curl_error curl_escape curl_exec curl_file_create curl_getinfo curl_init curl_multi_add_handle curl_multi_close curl_multi_errno curl_multi_exec curl_multi_getcontent curl_multi_info_read curl_multi_init curl_multi_remove_handle curl_multi_select curl_multi_setopt curl_multi_strerror curl_pause curl_reset curl_setopt curl_setopt_array curl_share_close curl_share_errno curl_share_init curl_share_setopt curl_share_strerror curl_strerror curl_unescape curl_version contained
                            " curl classes and interfaces
    3              0.000015 syn keyword phpClasses CURLFile contained
    3              0.000012 endif
    3              0.000058 if index(g:php_syntax_extensions_enabled, "date") >= 0 && index(g:php_syntax_extensions_disabled, "date") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "date") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "date") < 0)
                            " date functions
    3              0.000149 syn keyword phpFunctions checkdate date date_add date_create date_create_from_format date_create_immutable date_create_immutable_from_format date_date_set date_default_timezone_get date_default_timezone_set date_diff date_format date_get_last_errors date_interval_create_from_date_string date_interval_format date_isodate_set date_modify date_offset_get date_parse date_parse_from_format date_sub date_sun_info date_sunrise date_sunset date_time_set date_timestamp_get date_timestamp_set date_timezone_get date_timezone_set getdate gmdate gmmktime gmstrftime idate localtime mktime strftime strtotime time timezone_abbreviations_list timezone_identifiers_list timezone_location_get timezone_name_from_abbr timezone_name_get timezone_offset_get timezone_open timezone_transitions_get timezone_version_get contained
                            " date classes and interfaces
    3              0.000033 syn keyword phpClasses DateInterval DatePeriod DateTime DateTimeImmutable DateTimeInterface DateTimeZone contained
    3              0.000012 endif
    3              0.000061 if index(g:php_syntax_extensions_enabled, "dom") >= 0 && index(g:php_syntax_extensions_disabled, "dom") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "dom") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "dom") < 0)
                            " dom functions
    3              0.000016 syn keyword phpFunctions dom_import_simplexml contained
                            " dom classes and interfaces
    3              0.000101 syn keyword phpClasses DOMAttr DOMCdataSection DOMCharacterData DOMComment DOMConfiguration DOMDocument DOMDocumentFragment DOMDocumentType DOMDomError DOMElement DOMEntity DOMEntityReference DOMErrorHandler DOMException DOMImplementation DOMImplementationList DOMImplementationSource DOMLocator DOMNameList DOMNameSpaceNode DOMNamedNodeMap DOMNode DOMNodeList DOMNotation DOMProcessingInstruction DOMStringExtend DOMStringList DOMText DOMTypeinfo DOMUserDataHandler DOMXPath contained
    3              0.000012 endif
    3              0.000058 if index(g:php_syntax_extensions_enabled, "ereg") >= 0 && index(g:php_syntax_extensions_disabled, "ereg") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "ereg") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "ereg") < 0)
                            " ereg functions
    3              0.000029 syn keyword phpFunctions ereg ereg_replace eregi eregi_replace split spliti sql_regcase contained
    3              0.000012 endif
    3              0.000058 if index(g:php_syntax_extensions_enabled, "gd") >= 0 && index(g:php_syntax_extensions_disabled, "gd") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "gd") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "gd") < 0)
                            " gd functions
    3              0.000625 syn keyword phpFunctions gd_info image2wbmp imageaffine imageaffinematrixconcat imageaffinematrixget imagealphablending imageantialias imagearc imagebmp imagechar imagecharup imagecolorallocate imagecolorallocatealpha imagecolorat imagecolorclosest imagecolorclosestalpha imagecolorclosesthwb imagecolordeallocate imagecolorexact imagecolorexactalpha imagecolormatch imagecolorresolve imagecolorresolvealpha imagecolorset imagecolorsforindex imagecolorstotal imagecolortransparent imageconvolution imagecopy imagecopymerge imagecopymergegray imagecopyresampled imagecopyresized imagecreate imagecreatefrombmp imagecreatefromgd imagecreatefromgd2 imagecreatefromgd2part imagecreatefromgif imagecreatefromjpeg imagecreatefrompng imagecreatefromstring imagecreatefromwbmp imagecreatefromwebp imagecreatefromxbm imagecreatefromxpm imagecreatetruecolor imagecrop imagecropauto imagedashedline imagedestroy imageellipse imagefill imagefilledarc imagefilledellipse imagefilledpolygon imagefilledrectangle imagefilltoborder imagefi
    3              0.000014 endif
    3              0.000061 if index(g:php_syntax_extensions_enabled, "gettext") >= 0 && index(g:php_syntax_extensions_disabled, "gettext") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "gettext") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "gettext") < 0)
                            " gettext functions
    3              0.000038 syn keyword phpFunctions _ bind_textdomain_codeset bindtextdomain dcgettext dcngettext dgettext dngettext gettext ngettext textdomain contained
    3              0.000044 endif
    3              0.000058 if index(g:php_syntax_extensions_enabled, "hash") >= 0 && index(g:php_syntax_extensions_disabled, "hash") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "hash") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "hash") < 0)
                            " hash functions
    3              0.000056 syn keyword phpFunctions hash hash_algos hash_copy hash_equals hash_file hash_final hash_hkdf hash_hmac hash_hmac_algos hash_hmac_file hash_init hash_pbkdf2 hash_update hash_update_file hash_update_stream mhash mhash_count mhash_get_block_size mhash_get_hash_name mhash_keygen_s2k contained
                            " hash classes and interfaces
    3              0.000013 syn keyword phpClasses HashContext contained
    3              0.000012 endif
    3              0.000057 if index(g:php_syntax_extensions_enabled, "iconv") >= 0 && index(g:php_syntax_extensions_disabled, "iconv") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "iconv") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "iconv") < 0)
                            " iconv functions
    3              0.000036 syn keyword phpFunctions iconv iconv_get_encoding iconv_mime_decode iconv_mime_decode_headers iconv_mime_encode iconv_set_encoding iconv_strlen iconv_strpos iconv_strrpos iconv_substr contained
    3              0.000012 endif
    3              0.000061 if index(g:php_syntax_extensions_enabled, "json") >= 0 && index(g:php_syntax_extensions_disabled, "json") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "json") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "json") < 0)
                            " json functions
    3              0.000020 syn keyword phpFunctions json_decode json_encode json_last_error json_last_error_msg contained
                            " json classes and interfaces
    3              0.000016 syn keyword phpClasses JsonException JsonSerializable contained
    3              0.000012 endif
    3              0.000057 if index(g:php_syntax_extensions_enabled, "libxml") >= 0 && index(g:php_syntax_extensions_disabled, "libxml") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "libxml") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "libxml") < 0)
                            " libxml functions
    3              0.000040 syn keyword phpFunctions libxml_clear_errors libxml_disable_entity_loader libxml_get_errors libxml_get_last_error libxml_set_external_entity_loader libxml_set_streams_context libxml_use_internal_errors contained
                            " libxml classes and interfaces
    3              0.000013 syn keyword phpClasses LibXMLError contained
    3              0.000013 endif
    3              0.000058 if index(g:php_syntax_extensions_enabled, "mbstring") >= 0 && index(g:php_syntax_extensions_disabled, "mbstring") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "mbstring") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "mbstring") < 0)
                            " mbstring functions
    3              0.000180 syn keyword phpFunctions mb_check_encoding mb_chr mb_convert_case mb_convert_encoding mb_convert_kana mb_convert_variables mb_decode_mimeheader mb_decode_numericentity mb_detect_encoding mb_detect_order mb_encode_mimeheader mb_encode_numericentity mb_encoding_aliases mb_ereg mb_ereg_match mb_ereg_replace mb_ereg_replace_callback mb_ereg_search mb_ereg_search_getpos mb_ereg_search_getregs mb_ereg_search_init mb_ereg_search_pos mb_ereg_search_regs mb_ereg_search_setpos mb_eregi mb_eregi_replace mb_get_info mb_http_input mb_http_output mb_internal_encoding mb_language mb_list_encodings mb_ord mb_output_handler mb_parse_str mb_preferred_mime_name mb_regex_encoding mb_regex_set_options mb_scrub mb_send_mail mb_split mb_strcut mb_strimwidth mb_stripos mb_stristr mb_strlen mb_strpos mb_strrchr mb_strrichr mb_strripos mb_strrpos mb_strstr mb_strtolower mb_strtoupper mb_strwidth mb_substitute_character mb_substr mb_substr_count mbereg mbereg_match mbereg_replace mbereg_search mbereg_search_getpos mbereg_search_getreg
    3              0.000039 endif
    3              0.000062 if index(g:php_syntax_extensions_enabled, "mcrypt") >= 0 && index(g:php_syntax_extensions_disabled, "mcrypt") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "mcrypt") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "mcrypt") < 0)
                            " mcrypt functions
    3              0.000122 syn keyword phpFunctions mcrypt_cbc mcrypt_cfb mcrypt_create_iv mcrypt_decrypt mcrypt_ecb mcrypt_enc_get_algorithms_name mcrypt_enc_get_block_size mcrypt_enc_get_iv_size mcrypt_enc_get_key_size mcrypt_enc_get_modes_name mcrypt_enc_get_supported_key_sizes mcrypt_enc_is_block_algorithm mcrypt_enc_is_block_algorithm_mode mcrypt_enc_is_block_mode mcrypt_enc_self_test mcrypt_encrypt mcrypt_generic mcrypt_generic_deinit mcrypt_generic_end mcrypt_generic_init mcrypt_get_block_size mcrypt_get_cipher_name mcrypt_get_iv_size mcrypt_get_key_size mcrypt_list_algorithms mcrypt_list_modes mcrypt_module_close mcrypt_module_get_algo_block_size mcrypt_module_get_algo_key_size mcrypt_module_get_supported_key_sizes mcrypt_module_is_block_algorithm mcrypt_module_is_block_algorithm_mode mcrypt_module_is_block_mode mcrypt_module_open mcrypt_module_self_test mcrypt_ofb mdecrypt_generic contained
    3              0.000013 endif
    3              0.000059 if index(g:php_syntax_extensions_enabled, "mysql") >= 0 && index(g:php_syntax_extensions_disabled, "mysql") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "mysql") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "mysql") < 0)
                            " mysql functions
    3              0.000159 syn keyword phpFunctions mysql mysql_affected_rows mysql_client_encoding mysql_close mysql_connect mysql_data_seek mysql_db_name mysql_db_query mysql_dbname mysql_errno mysql_error mysql_escape_string mysql_fetch_array mysql_fetch_assoc mysql_fetch_field mysql_fetch_lengths mysql_fetch_object mysql_fetch_row mysql_field_flags mysql_field_len mysql_field_name mysql_field_seek mysql_field_table mysql_field_type mysql_fieldflags mysql_fieldlen mysql_fieldname mysql_fieldtable mysql_fieldtype mysql_free_result mysql_freeresult mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql_insert_id mysql_list_dbs mysql_list_fields mysql_list_processes mysql_list_tables mysql_listdbs mysql_listfields mysql_listtables mysql_num_fields mysql_num_rows mysql_numfields mysql_numrows mysql_pconnect mysql_ping mysql_query mysql_real_escape_string mysql_result mysql_select_db mysql_selectdb mysql_set_charset mysql_stat mysql_table_name mysql_tablename mysql_thread_id mysql_unbuffere
    3              0.000013 endif
    3              0.000064 if index(g:php_syntax_extensions_enabled, "mysqli") >= 0 && index(g:php_syntax_extensions_disabled, "mysqli") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "mysqli") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "mysqli") < 0)
                            " mysqli functions
    3              0.000364 syn keyword phpFunctions mysqli_affected_rows mysqli_autocommit mysqli_begin_transaction mysqli_change_user mysqli_character_set_name mysqli_close mysqli_commit mysqli_connect mysqli_connect_errno mysqli_connect_error mysqli_data_seek mysqli_debug mysqli_dump_debug_info mysqli_errno mysqli_error mysqli_error_list mysqli_escape_string mysqli_execute mysqli_fetch_all mysqli_fetch_array mysqli_fetch_assoc mysqli_fetch_field mysqli_fetch_field_direct mysqli_fetch_fields mysqli_fetch_lengths mysqli_fetch_object mysqli_fetch_row mysqli_field_count mysqli_field_seek mysqli_field_tell mysqli_free_result mysqli_get_charset mysqli_get_client_info mysqli_get_client_stats mysqli_get_client_version mysqli_get_connection_stats mysqli_get_host_info mysqli_get_links_stats mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version mysqli_get_warnings mysqli_info mysqli_init mysqli_insert_id mysqli_kill mysqli_more_results mysqli_multi_query mysqli_next_result mysqli_num_fields mysqli_num_rows mysqli_options mysql
                            " mysqli classes and interfaces
    3              0.000030 syn keyword phpClasses mysqli mysqli_driver mysqli_result mysqli_sql_exception mysqli_stmt mysqli_warning contained
    3              0.000013 endif
    3              0.000064 if index(g:php_syntax_extensions_enabled, "openssl") >= 0 && index(g:php_syntax_extensions_disabled, "openssl") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "openssl") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "openssl") < 0)
                            " openssl functions
    3              0.000189 syn keyword phpFunctions openssl_cipher_iv_length openssl_csr_export openssl_csr_export_to_file openssl_csr_get_public_key openssl_csr_get_subject openssl_csr_new openssl_csr_sign openssl_decrypt openssl_dh_compute_key openssl_digest openssl_encrypt openssl_error_string openssl_free_key openssl_get_cert_locations openssl_get_cipher_methods openssl_get_curve_names openssl_get_md_methods openssl_get_privatekey openssl_get_publickey openssl_open openssl_pbkdf2 openssl_pkcs7_decrypt openssl_pkcs7_encrypt openssl_pkcs7_read openssl_pkcs7_sign openssl_pkcs7_verify openssl_pkcs12_export openssl_pkcs12_export_to_file openssl_pkcs12_read openssl_pkey_derive openssl_pkey_export openssl_pkey_export_to_file openssl_pkey_free openssl_pkey_get_details openssl_pkey_get_private openssl_pkey_get_public openssl_pkey_new openssl_private_decrypt openssl_private_encrypt openssl_public_decrypt openssl_public_encrypt openssl_random_pseudo_bytes openssl_seal openssl_sign openssl_spki_export openssl_spki_export_challenge openssl_spk
    3              0.000012 endif
    3              0.000059 if index(g:php_syntax_extensions_enabled, "pcre") >= 0 && index(g:php_syntax_extensions_disabled, "pcre") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "pcre") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "pcre") < 0)
                            " pcre functions
    3              0.000038 syn keyword phpFunctions preg_filter preg_grep preg_last_error preg_match preg_match_all preg_quote preg_replace preg_replace_callback preg_replace_callback_array preg_split contained
    3              0.000012 endif
    3              0.000059 if index(g:php_syntax_extensions_enabled, "pdo") >= 0 && index(g:php_syntax_extensions_disabled, "pdo") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "pdo") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "pdo") < 0)
                            " PDO functions
    3              0.000014 syn keyword phpFunctions pdo_drivers contained
                            " PDO classes and interfaces
    3              0.000020 syn keyword phpClasses PDO PDOException PDORow PDOStatement contained
    3              0.000012 endif
    3              0.000061 if index(g:php_syntax_extensions_enabled, "pgsql") >= 0 && index(g:php_syntax_extensions_disabled, "pgsql") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "pgsql") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "pgsql") < 0)
                            " pgsql functions
    3              0.000262 syn keyword phpFunctions pg_affected_rows pg_cancel_query pg_client_encoding pg_clientencoding pg_close pg_cmdtuples pg_connect pg_connect_poll pg_connection_busy pg_connection_reset pg_connection_status pg_consume_input pg_convert pg_copy_from pg_copy_to pg_dbname pg_delete pg_end_copy pg_errormessage pg_escape_bytea pg_escape_identifier pg_escape_literal pg_escape_string pg_exec pg_execute pg_fetch_all pg_fetch_all_columns pg_fetch_array pg_fetch_assoc pg_fetch_object pg_fetch_result pg_fetch_row pg_field_is_null pg_field_name pg_field_num pg_field_prtlen pg_field_size pg_field_table pg_field_type pg_field_type_oid pg_fieldisnull pg_fieldname pg_fieldnum pg_fieldprtlen pg_fieldsize pg_fieldtype pg_flush pg_free_result pg_freeresult pg_get_notify pg_get_pid pg_get_result pg_getlastoid pg_host pg_insert pg_last_error pg_last_notice pg_last_oid pg_lo_close pg_lo_create pg_lo_export pg_lo_import pg_lo_open pg_lo_read pg_lo_read_all pg_lo_seek pg_lo_tell pg_lo_truncate pg_lo_unlink pg_lo_write pg_loclose pg_loc
    3              0.000013 endif
    3              0.000063 if index(g:php_syntax_extensions_enabled, "phar") >= 0 && index(g:php_syntax_extensions_disabled, "phar") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "phar") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "phar") < 0)
                            " Phar classes and interfaces
    3              0.000020 syn keyword phpClasses Phar PharData PharException PharFileInfo contained
    3              0.000013 endif
    3              0.000059 if index(g:php_syntax_extensions_enabled, "reflection") >= 0 && index(g:php_syntax_extensions_disabled, "reflection") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "reflection") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "reflection") < 0)
                            " Reflection classes and interfaces
    3              0.000056 syn keyword phpClasses Reflection ReflectionClass ReflectionClassConstant ReflectionException ReflectionExtension ReflectionFunction ReflectionFunctionAbstract ReflectionGenerator ReflectionMethod ReflectionNamedType ReflectionObject ReflectionParameter ReflectionProperty ReflectionType ReflectionZendExtension Reflector contained
    3              0.000012 endif
    3              0.000060 if index(g:php_syntax_extensions_enabled, "session") >= 0 && index(g:php_syntax_extensions_disabled, "session") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "session") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "session") < 0)
                            " session functions
    3              0.000083 syn keyword phpFunctions session_abort session_cache_expire session_cache_limiter session_commit session_create_id session_decode session_destroy session_encode session_gc session_get_cookie_params session_id session_module_name session_name session_regenerate_id session_register_shutdown session_reset session_save_path session_set_cookie_params session_set_save_handler session_start session_status session_unset session_write_close contained
                            " session classes and interfaces
    3              0.000027 syn keyword phpClasses SessionHandler SessionHandlerInterface SessionIdInterface SessionUpdateTimestampHandlerInterface contained
    3              0.000013 endif
    3              0.000061 if index(g:php_syntax_extensions_enabled, "simplexml") >= 0 && index(g:php_syntax_extensions_disabled, "simplexml") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "simplexml") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "simplexml") < 0)
                            " SimpleXML functions
    3              0.000052 syn keyword phpFunctions simplexml_import_dom simplexml_load_file simplexml_load_string contained
                            " SimpleXML classes and interfaces
    3              0.000018 syn keyword phpClasses SimpleXMLElement SimpleXMLIterator contained
    3              0.000012 endif
    3              0.000061 if index(g:php_syntax_extensions_enabled, "soap") >= 0 && index(g:php_syntax_extensions_disabled, "soap") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "soap") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "soap") < 0)
                            " soap functions
    3              0.000019 syn keyword phpFunctions is_soap_fault use_soap_error_handler contained
                            " soap classes and interfaces
    3              0.000038 syn keyword phpClasses SoapClient SoapFault SoapHeader SoapParam SoapServer SoapVar contained
    3              0.000022 endif
    3              0.000080 if index(g:php_syntax_extensions_enabled, "sockets") >= 0 && index(g:php_syntax_extensions_disabled, "sockets") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "sockets") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "sockets") < 0)
                            " sockets functions
    3              0.000208 syn keyword phpFunctions socket_accept socket_addrinfo_bind socket_addrinfo_connect socket_addrinfo_explain socket_addrinfo_lookup socket_bind socket_clear_error socket_close socket_cmsg_space socket_connect socket_create socket_create_listen socket_create_pair socket_export_stream socket_get_option socket_getopt socket_getpeername socket_getsockname socket_import_stream socket_last_error socket_listen socket_read socket_recv socket_recvfrom socket_recvmsg socket_select socket_send socket_sendmsg socket_sendto socket_set_block socket_set_nonblock socket_set_option socket_setopt socket_shutdown socket_strerror socket_write contained
    3              0.000016 endif
    3              0.000064 if index(g:php_syntax_extensions_enabled, "spl") >= 0 && index(g:php_syntax_extensions_disabled, "spl") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "spl") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "spl") < 0)
                            " SPL functions
    3              0.000057 syn keyword phpFunctions class_implements class_parents class_uses iterator_apply iterator_count iterator_to_array spl_autoload spl_autoload_call spl_autoload_extensions spl_autoload_functions spl_autoload_register spl_autoload_unregister spl_classes spl_object_hash spl_object_id contained
                            " SPL classes and interfaces
    3              0.000177 syn keyword phpClasses AppendIterator ArrayIterator ArrayObject BadFunctionCallException BadMethodCallException CachingIterator CallbackFilterIterator Countable DirectoryIterator DomainException EmptyIterator FilesystemIterator FilterIterator GlobIterator InfiniteIterator InvalidArgumentException IteratorIterator LengthException LimitIterator LogicException MultipleIterator NoRewindIterator OutOfBoundsException OutOfRangeException OuterIterator OverflowException ParentIterator RangeException RecursiveArrayIterator RecursiveCachingIterator RecursiveCallbackFilterIterator RecursiveDirectoryIterator RecursiveFilterIterator RecursiveIterator RecursiveIteratorIterator RecursiveRegexIterator RecursiveTreeIterator RegexIterator RuntimeException SeekableIterator SplDoublyLinkedList SplFileInfo SplFileObject SplFixedArray SplHeap SplMaxHeap SplMinHeap SplObjectStorage SplObserver SplPriorityQueue SplQueue SplStack SplSubject SplTempFileObject UnderflowException UnexpectedValueException contained
    3              0.000013 endif
    3              0.000060 if index(g:php_syntax_extensions_enabled, "sqlite3") >= 0 && index(g:php_syntax_extensions_disabled, "sqlite3") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "sqlite3") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "sqlite3") < 0)
                            " sqlite3 classes and interfaces
    3              0.000019 syn keyword phpClasses SQLite3 SQLite3Result SQLite3Stmt contained
    3              0.000049 endif
    3              0.000063 if index(g:php_syntax_extensions_enabled, "standard") >= 0 && index(g:php_syntax_extensions_disabled, "standard") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "standard") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "standard") < 0)
                            " standard functions
    3              0.001239 syn keyword phpFunctions abs acos acosh addcslashes addslashes array_change_key_case array_chunk array_column array_combine array_count_values array_diff array_diff_assoc array_diff_key array_diff_uassoc array_diff_ukey array_fill array_fill_keys array_filter array_flip array_intersect array_intersect_assoc array_intersect_key array_intersect_uassoc array_intersect_ukey array_key_exists array_key_first array_key_last array_keys array_map array_merge array_merge_recursive array_multisort array_pad array_pop array_product array_push array_rand array_reduce array_replace array_replace_recursive array_reverse array_search array_shift array_slice array_splice array_sum array_udiff array_udiff_assoc array_udiff_uassoc array_uintersect array_uintersect_assoc array_uintersect_uassoc array_unique array_unshift array_values array_walk array_walk_recursive arsort asin asinh asort assert assert_options atan atan2 atanh base64_decode base64_encode base_convert basename bin2hex bindec boolval call_user_func call_user_func
                            " standard classes and interfaces
    3              0.000024 syn keyword phpClasses AssertionError Directory __PHP_Incomplete_Class php_user_filter contained
    3              0.000013 endif
    3              0.000068 if index(g:php_syntax_extensions_enabled, "tokenizer") >= 0 && index(g:php_syntax_extensions_disabled, "tokenizer") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "tokenizer") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "tokenizer") < 0)
                            " tokenizer functions
    3              0.000017 syn keyword phpFunctions token_get_all token_name contained
    3              0.000012 endif
    3              0.000063 if index(g:php_syntax_extensions_enabled, "wddx") >= 0 && index(g:php_syntax_extensions_disabled, "wddx") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "wddx") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "wddx") < 0)
                            " wddx functions
    3              0.000027 syn keyword phpFunctions wddx_add_vars wddx_deserialize wddx_packet_end wddx_packet_start wddx_serialize_value wddx_serialize_vars contained
    3              0.000012 endif
    3              0.000060 if index(g:php_syntax_extensions_enabled, "xml") >= 0 && index(g:php_syntax_extensions_disabled, "xml") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "xml") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "xml") < 0)
                            " xml functions
    3              0.000090 syn keyword phpFunctions utf8_decode utf8_encode xml_error_string xml_get_current_byte_index xml_get_current_column_number xml_get_current_line_number xml_get_error_code xml_parse xml_parse_into_struct xml_parser_create xml_parser_create_ns xml_parser_free xml_parser_get_option xml_parser_set_option xml_set_character_data_handler xml_set_default_handler xml_set_element_handler xml_set_end_namespace_decl_handler xml_set_external_entity_ref_handler xml_set_notation_decl_handler xml_set_object xml_set_processing_instruction_handler xml_set_start_namespace_decl_handler xml_set_unparsed_entity_decl_handler contained
    3              0.000013 endif
    3              0.000066 if index(g:php_syntax_extensions_enabled, "xmlreader") >= 0 && index(g:php_syntax_extensions_disabled, "xmlreader") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "xmlreader") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "xmlreader") < 0)
                            " xmlreader classes and interfaces
    3              0.000014 syn keyword phpClasses XMLReader contained
    3              0.000013 endif
    3              0.000065 if index(g:php_syntax_extensions_enabled, "xmlwriter") >= 0 && index(g:php_syntax_extensions_disabled, "xmlwriter") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "xmlwriter") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "xmlwriter") < 0)
                            " xmlwriter functions
    3              0.000139 syn keyword phpFunctions xmlwriter_end_attribute xmlwriter_end_cdata xmlwriter_end_comment xmlwriter_end_document xmlwriter_end_dtd xmlwriter_end_dtd_attlist xmlwriter_end_dtd_element xmlwriter_end_dtd_entity xmlwriter_end_element xmlwriter_end_pi xmlwriter_flush xmlwriter_full_end_element xmlwriter_open_memory xmlwriter_open_uri xmlwriter_output_memory xmlwriter_set_indent xmlwriter_set_indent_string xmlwriter_start_attribute xmlwriter_start_attribute_ns xmlwriter_start_cdata xmlwriter_start_comment xmlwriter_start_document xmlwriter_start_dtd xmlwriter_start_dtd_attlist xmlwriter_start_dtd_element xmlwriter_start_dtd_entity xmlwriter_start_element xmlwriter_start_element_ns xmlwriter_start_pi xmlwriter_text xmlwriter_write_attribute xmlwriter_write_attribute_ns xmlwriter_write_cdata xmlwriter_write_comment xmlwriter_write_dtd xmlwriter_write_dtd_attlist xmlwriter_write_dtd_element xmlwriter_write_dtd_entity xmlwriter_write_element xmlwriter_write_element_ns xmlwriter_write_pi xmlwriter_write_raw contained
                            " xmlwriter classes and interfaces
    3              0.000013 syn keyword phpClasses XMLWriter contained
    3              0.000012 endif
    3              0.000060 if index(g:php_syntax_extensions_enabled, "zip") >= 0 && index(g:php_syntax_extensions_disabled, "zip") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "zip") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "zip") < 0)
                            " zip functions
    3              0.000041 syn keyword phpFunctions zip_close zip_entry_close zip_entry_compressedsize zip_entry_compressionmethod zip_entry_filesize zip_entry_name zip_entry_open zip_entry_read zip_open zip_read contained
                            " zip classes and interfaces
    3              0.000013 syn keyword phpClasses ZipArchive contained
    3              0.000012 endif
    3              0.000060 if index(g:php_syntax_extensions_enabled, "zlib") >= 0 && index(g:php_syntax_extensions_disabled, "zlib") < 0 && ( ! exists("b:php_syntax_extensions_enabled") || index(b:php_syntax_extensions_enabled, "zlib") >= 0) && ( ! exists("b:php_syntax_extensions_disabled") || index(b:php_syntax_extensions_disabled, "zlib") < 0)
                            " zlib functions
    3              0.000079 syn keyword phpFunctions deflate_add deflate_init gzclose gzcompress gzdecode gzdeflate gzencode gzeof gzfile gzgetc gzgets gzgetss gzinflate gzopen gzpassthru gzputs gzread gzrewind gzseek gztell gzuncompress gzwrite inflate_add inflate_get_read_len inflate_get_status inflate_init ob_gzhandler readgzfile zlib_decode zlib_encode zlib_get_coding_type contained
    3              0.000003 endif
                            
                            " @endblock
                            
                            " The following is needed afterall it seems.
    3              0.000078 syntax keyword phpClasses containedin=ALLBUT,phpComment,phpDocComment,phpStringDouble,phpStringSingle,phpIdentifier,phpMethodsVar
                            
                            " Control Structures
    3              0.000080 syn keyword phpKeyword echo continue case default break return goto as endif endwhile endfor endforeach endswitch declare endeclare print new clone yield contained
                            " Only create keyword groupings for these if not doing folding, otherwise they take precedence over the regions
                            " used for folding.
    3              0.000012 if php_folding != 1
    3              0.000031   syn keyword phpKeyword if else elseif while do for foreach function switch contained
                            
                              " Exception Keywords
    3              0.000019   syn keyword phpKeyword try catch finally throw contained
    3              0.000004 endif
                            
                            " Class Keywords
    3              0.000038 syn keyword phpType class abstract extends interface implements static final var public private protected const trait contained
                            
                            " Magic Methods
    3              0.000041 syn keyword phpStatement __construct __destruct __call __callStatic __get __set __isset __unset __sleep __wakeup __toString __invoke __set_state __clone contained
                            
                            " Language Constructs
    3              0.000027 syn keyword phpKeyword die exit eval empty isset unset list instanceof insteadof contained
                            
                            " Include & friends
    3              0.000021 syn keyword phpInclude include include_once require require_once namespace contained
                            
                            " Types
    3              0.000052 syn keyword phpType bool[ean] int[eger] real double float string array object self parent global this stdClass callable iterable void contained
                            " Special values
    3              0.000013 syn keyword phpNullValue null contained
                            
                            " Operator
    3              0.000043 syn match phpOperator       "[-=+%^&|*!.~?:]" contained display
    3              0.000027 syn match phpOperator       "[-+*/%^&|.]="  contained display
    3              0.000028 syn match phpOperator       "/[^*/]"me=e-1  contained display
    3              0.000022 syn match phpOperator       "\$"  contained display
    3              0.000027 syn match phpOperator       "&&\|\<and\>" contained display
    3              0.000025 syn match phpOperator       "||\|\<x\=or\>" contained display
    3              0.000022 syn match phpOperator       "[!=<>]=" contained display
    3              0.000019 syn match phpOperator       "[<>]"  contained display
    3              0.000019 syn match phpMemberSelector "->\|::"  contained display
    3              0.000018 syn match phpVarSelector    "\$"  contained display
                            " highlight static and object variables inside strings
    3              0.000069 syn match phpMethodsVar     "\%(->\|::$\?\)\h\w*" contained contains=phpMethods,phpMemberSelector,phpIdentifier display containedin=phpStringDouble
    3              0.000066 syn match phpMethodsVar     "\%(->\|::\%($\)\@!\)\s*\h\w*\s*("me=e-1 skipwhite skipempty contained contains=phpMemberSelector,phpMethod display containedin=phpStringDouble
    3              0.000019 syn match phpMethod /\h\w*/ contained
    3              0.000019 syn match phpSplatOperator  "\.\.\." contained display
                            
                            " Identifier
    3              0.000039 syn match  phpIdentifier         "$\h\w*"  contained contains=phpSuperglobals,phpVarSelector display
    3              0.000078 syn match  phpIdentifierSimply   "${\h\w*}"  contains=phpOperator,phpParent  contained display
    3              0.000117 syn region phpIdentifierComplex  matchgroup=phpParent start="{\$"rs=e-1 end="}"  contains=phpIdentifier,phpIdentifierSimply,phpSpecialChar,phpMethodsVar,phpStringSingle,phpStringDouble,phpBacktick,phpStrEsc contained extend
                            
                            " Boolean
    3              0.000015 syn keyword phpBoolean true false  contained
                            
                            " Number
    3              0.000022 syn match phpNumber "\<\d\+\>" contained display
    3              0.000019 syn match phpNumber "-\d\+\>" contained display
    3              0.000031 syn match phpNumber "\<0x\x\{1,8}\>"  contained display
    3              0.000027 syn match phpNumber "-0x\x\{1,8}\>"  contained display
    3              0.000026 syn match phpNumber "\<0b[01]\+\>"    contained display
    3              0.000022 syn match phpNumber "-0b[01]\+\>"    contained display
    3              0.000034 syn match phpNumber "\<\d\+\%([eE][+-]\=\d\+\)\=\>" contained display
    3              0.000026 syn match phpNumber "-\d\+\%([eE][+-]\=\d\+\)\=\>" contained display
                            
                            " Float
    3              0.000041 syn match phpNumber "\<\%(\d\+\.\d\+\|\d\+\.\|\.\d\+\)\%([eE][+-]\=\d\+\)\=\>" contained display
    3              0.000036 syn match phpNumber "-\%(\d\+\.\d\+\|\d\+\.\|\.\d\+\)\%([eE][+-]\=\d\+\)\=\>" contained display
                            
                            " SpecialChar
    3              0.000023 syn match phpSpecialChar "\\[fnrtv\\]" contained display
    3              0.000030 syn match phpSpecialChar "\\\d\{3}"  contained contains=phpOctalError display
    3              0.000022 syn match phpSpecialChar "\\x\x\{2}" contained display
                            " corrected highlighting for an escaped '\$' inside a double-quoted string
    3              0.000020 syn match phpSpecialChar "\\\$"  contained display
    3              0.000020 syn match phpSpecialChar +\\"+   contained display
    3              0.000019 syn match phpStrEsc      "\\\\"  contained display
    3              0.000021 syn match phpStrEsc      "\\'"   contained display
                            
                            " Format specifiers (printf)
                            " See https://github.com/aantonello/php.vim/commit/9d24eab4ea4b3752a54aebf14d3491b6d8edb6d8
    3              0.000109 syn match phpSpecialChar display contained /%\(\d\+\$\)\=[-+' #0*]*\(\d*\|\*\|\*\d\+\$\)\(\.\(\d*\|\*\|\*\d\+\$\)\)\=\([aAbBdiouxXDOUfFeEgGcCsSpnmMyYhH]\|\[\^\=.[^]]*\]\)/ containedin=phpStringSingle,phpStringDouble,phpHereDoc
    3              0.000044 syn match phpSpecialChar display contained /%%/ containedin=phpStringSingle,phpStringDouble,phpHereDoc
                            
                            " Error
    3              0.000018 syn match phpOctalError "[89]"  contained display
    3              0.000024 if (exists("php_parent_error_close") && php_parent_error_close)
                              syn match phpParentError "[)\]}]"  contained display
    3              0.000005 endif
                            
                            " Todo
    3              0.000010 syn case match
    3              0.000019 syn keyword phpTodo TODO FIXME XXX NOTE contained
    3              0.000009 syn case ignore
                            
                            " Comment
    3              0.000020 if (exists("php_parent_error_open") && php_parent_error_open)
                              syn region phpComment start="/\*" end="\*/" contained contains=phpTodo,@Spell
    3              0.000007 else
    3              0.000050   syn region phpComment start="/\*" end="\*/" contained contains=phpTodo,@Spell extend
    3              0.000004 endif
                            
    3              0.000026 syn match phpCommentStar contained "^\s*\*[^/]"me=e-1
    3              0.000018 syn match phpCommentStar contained "^\s*\*$"
                            
    3              0.000017 if !exists("php_ignore_phpdoc") || !php_ignore_phpdoc
    3              0.000009   syn case ignore
                            
    3              0.000105   SynFoldDoc syn region phpDocComment   start="/\*\*" end="\*/" keepend contains=phpCommentTitle,phpDocTags,phpTodo,@Spell extend
    3              0.000126   syn region phpCommentTitle contained matchgroup=phpDocComment start="/\*\*" matchgroup=phpCommentTitle keepend end="\.$" end="\.[ \t\r<&]"me=e-1 end="[^{]@"me=s-2,he=s-1 end="\*/"me=s-1,he=s-1 contains=phpCommentStar,phpTodo,phpDocTags,@Spell containedin=phpDocComment
                            
    3              0.000082   syn region phpDocTags  start="{@\(example\|id\|internal\|inheritdoc\|link\|source\|toc\|tutorial\)" end="}" containedin=phpDocComment
    3              0.000210   syn match phpDocTags "@\%(abstract\|access\|api\|author\|brief\|bug\|category\|class\|copyright\|created\|date\|deprecated\|details\|example\|exception\|file\|filesource\|final\|global\|id\|ignore\|inheritdoc\|internal\|license\|link\|magic\|method\|name\|package\|param\|property\|return\|see\|since\|source\|static\|staticvar\|struct\|subpackage\|throws\|toc\|todo\|tutorial\|type\|uses\|var\|version\|warning\)" containedin=phpDocComment nextgroup=phpDocParam,phpDocIdentifier skipwhite contained
    3              0.000049   syn match phpDocParam "\s\+\zs\(|\|\\\|\h\w*\)*\h\w*" nextgroup=phpDocIdentifier skipwhite contained contains=phpDocNamespaceSeparator
    3              0.000021   syn match phpDocIdentifier "\s\+\zs$\h\w*" contained
    3              0.000016   syn match phpDocNamespaceSeparator "\\" contained display
                            
    3              0.000008   syn case match
    3              0.000004 endif
                            
    3              0.000012 if version >= 600
    3              0.000050   syn match phpComment  "#.\{-}\(?>\|$\)\@="  contained contains=phpTodo,@Spell
    3              0.000034   syn match phpComment  "//.\{-}\(?>\|$\)\@=" contained contains=phpTodo,@Spell
                            else
                              syn match phpComment  "#.\{-}$" contained contains=phpTodo,@Spell
                              syn match phpComment  "#.\{-}?>"me=e-2  contained contains=phpTodo,@Spell
                              syn match phpComment  "//.\{-}$"  contained contains=phpTodo,@Spell
                              syn match phpComment  "//.\{-}?>"me=e-2 contained contains=phpTodo,@Spell
    3              0.000004 endif
                            
                            " String
    3              0.000025 if (exists("php_parent_error_open") && php_parent_error_open)
                              syn region phpStringDouble matchgroup=phpStringDelimiter start=+"+ skip=+\\\\\|\\"+ end=+"+  contains=@Spell,@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained keepend
                              syn region phpBacktick matchgroup=phpStringDelimiter start=+`+ skip=+\\\\\|\\"+ end=+`+  contains=@Spell,@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained keepend
                              syn region phpStringSingle matchgroup=phpStringDelimiter start=+'+ skip=+\\\\\|\\'+ end=+'+  contains=@Spell,@phpAddStrings,phpStrEsc contained keepend
    3              0.000010 else
    3              0.000095   syn region phpStringDouble matchgroup=phpStringDelimiter start=+"+ skip=+\\\\\|\\"+ end=+"+  contains=@Spell,@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained extend keepend
    3              0.000085   syn region phpBacktick matchgroup=phpStringDelimiter start=+`+ skip=+\\\\\|\\"+ end=+`+  contains=@Spell,@phpAddStrings,phpIdentifier,phpSpecialChar,phpIdentifierSimply,phpIdentifierComplex,phpStrEsc contained extend keepend
    3              0.000051   syn region phpStringSingle matchgroup=phpStringDelimiter start=+'+ skip=+\\\\\|\\'+ end=+'+  contains=@Spell,@phpAddStrings,phpStrEsc contained keepend extend
    3              0.000004 endif
                            
    3              0.000008 syn case match
                            
                            " HereDoc
    3              0.000012 if version >= 704
    3              0.000009   if b:php_version_id >= 70300
                                " @begin phpHereDoc
    3              0.000196     SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@3<=\s*\z(\I\i*\)$" end="^\s*\z1\>" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
    3              0.000160     SynFold syn region phpHereDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*"\z(\I\i*\)"$+ end="^\s*\z1\>" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                " including HTML,JavaScript,SQL if enabled via options
    3              0.000031     if (exists("php_html_in_heredoc") && php_html_in_heredoc)
    3              0.000175       SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@3<=\s*\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)$" end="^\s*\z1\>"  contained contains=@htmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
    3              0.000158       SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@3<=\s*\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)$" end="^\s*\z1\>"  contained contains=@htmlJavascript,phpIdentifierSimply,phpIdentifier,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
    3              0.000007     endif
    3              0.000026     if (exists("php_sql_heredoc") && php_sql_heredoc)
    3              0.000154       SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@3<=\s*\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)$" end="^\s*\z1\>" contained contains=@sqlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
    3              0.000006     endif
    3              0.000025     if (exists("php_xml_heredoc") && php_xml_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@3<=\s*\z(\(\I\i*\)\=\(xml\)\c\(\i*\)\)$" end="^\s*\z1\>" contained contains=@xmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
    3              0.000004     endif
                                " @end phpHereDoc
                              else
                                " @begin phpHereDoc
                                SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@3<=\s*\z(\I\i*\)$" end="^\z1\(;\=$\)\@=" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                SynFold syn region phpHereDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*"\z(\I\i*\)"$+ end="^\z1\(;\=$\)\@=" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                " including HTML,JavaScript,SQL if enabled via options
                                if (exists("php_html_in_heredoc") && php_html_in_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@3<=\s*\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@="  contained contains=@htmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@3<=\s*\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@="  contained contains=@htmlJavascript,phpIdentifierSimply,phpIdentifier,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_sql_heredoc") && php_sql_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@3<=\s*\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@=" contained contains=@sqlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_xml_heredoc") && php_xml_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@3<=\s*\z(\(\I\i*\)\=\(xml\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@=" contained contains=@xmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                              " @end phpHereDoc
    3              0.000004   endif
                            else
                              if b:php_version_id >= 70300
                                " @copy phpHereDoc strip_maximum_size
                                SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\I\i*\)$" end="^\s*\z1\>" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                SynFold syn region phpHereDoc matchgroup=Delimiter start=+\(<<<\)\@<=\s*"\z(\I\i*\)"$+ end="^\s*\z1\>" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                " including HTML,JavaScript,SQL if enabled via options
                                if (exists("php_html_in_heredoc") && php_html_in_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)$" end="^\s*\z1\>"  contained contains=@htmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)$" end="^\s*\z1\>"  contained contains=@htmlJavascript,phpIdentifierSimply,phpIdentifier,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_sql_heredoc") && php_sql_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)$" end="^\s*\z1\>" contained contains=@sqlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_xml_heredoc") && php_xml_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(xml\)\c\(\i*\)\)$" end="^\s*\z1\>" contained contains=@xmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                " @end phpHereDoc
                              else
                                " @copy phpHereDoc strip_maximum_size
                                SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\I\i*\)$" end="^\z1\(;\=$\)\@=" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                SynFold syn region phpHereDoc matchgroup=Delimiter start=+\(<<<\)\@<=\s*"\z(\I\i*\)"$+ end="^\z1\(;\=$\)\@=" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                " including HTML,JavaScript,SQL if enabled via options
                                if (exists("php_html_in_heredoc") && php_html_in_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@="  contained contains=@htmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@="  contained contains=@htmlJavascript,phpIdentifierSimply,phpIdentifier,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_sql_heredoc") && php_sql_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@=" contained contains=@sqlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_xml_heredoc") && php_xml_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(xml\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@=" contained contains=@xmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                " @end phpHereDoc
                              endif
    3              0.000003 endif
                            
                            " NowDoc
    3              0.000008 if version >= 704
    3              0.000008   if b:php_version_id >= 70300
                              " @begin phpNowDoc
    3              0.000107     SynFold syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*'\z(\I\i*\)'$+ end="^\s*\z1\>" contained keepend extend
                                " including HTML,JavaScript,SQL if enabled via options
    3              0.000058     if (exists("php_html_in_nowdoc") && php_html_in_nowdoc)
    3              0.000174       SynFold syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*'\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)'$+ end="^\s*\z1\>" contained contains=@htmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
    3              0.000152       SynFold syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*'\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)'$+ end="^\s*\z1\>" contained contains=@htmlJavascript,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
    3              0.000006     endif
    3              0.000025     if (exists("php_sql_nowdoc") && php_sql_nowdoc)
    3              0.000163       SynFold syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*'\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)'$+ end="^\s*\z1\>" contained contains=@sqlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
    3              0.000006     endif
    3              0.000024     if (exists("php_xml_nowdoc") && php_xml_nowdoc)
                                  SynFold syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*'\z(\(\I\i*\)\=\(xml\)\c\(\i*\)\)'$+ end="^\s*\z1\>" contained contains=@xmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
    3              0.000004     endif
                              " @end phpNowDoc
                              else
                                " @begin phpNowDoc
                                SynFold syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*'\z(\I\i*\)'$+ end="^\z1\(;\=$\)\@=" contained keepend extend
                                " including HTML,JavaScript,SQL if enabled via options
                                if (exists("php_html_in_nowdoc") && php_html_in_nowdoc)
                                  SynFold syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*'\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)'$+ end="^\z1\(;\=$\)\@=" contained contains=@htmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                  SynFold syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*'\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)'$+ end="^\z1\(;\=$\)\@=" contained contains=@htmlJavascript,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_sql_nowdoc") && php_sql_nowdoc)
                                  SynFold syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*'\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)'$+ end="^\z1\(;\=$\)\@=" contained contains=@sqlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_xml_nowdoc") && php_xml_nowdoc)
                                  SynFold syn region phpNowDoc matchgroup=Delimiter start=+\(<<<\)\@3<=\s*'\z(\(\I\i*\)\=\(xml\)\c\(\i*\)\)'$+ end="^\z1\(;\=$\)\@=" contained contains=@xmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                " @end phpNowDoc
    3              0.000003   endif
                            else
                              if b:php_version_id >= 70300
                                " @copy phpHereDoc strip_maximum_size
                                SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\I\i*\)$" end="^\s*\z1\>" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                SynFold syn region phpHereDoc matchgroup=Delimiter start=+\(<<<\)\@<=\s*"\z(\I\i*\)"$+ end="^\s*\z1\>" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                " including HTML,JavaScript,SQL if enabled via options
                                if (exists("php_html_in_heredoc") && php_html_in_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)$" end="^\s*\z1\>"  contained contains=@htmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)$" end="^\s*\z1\>"  contained contains=@htmlJavascript,phpIdentifierSimply,phpIdentifier,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_sql_heredoc") && php_sql_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)$" end="^\s*\z1\>" contained contains=@sqlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_xml_heredoc") && php_xml_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(xml\)\c\(\i*\)\)$" end="^\s*\z1\>" contained contains=@xmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                " @end phpNowDoc
                              else
                                " @copy phpHereDoc strip_maximum_size
                                SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\I\i*\)$" end="^\z1\(;\=$\)\@=" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                SynFold syn region phpHereDoc matchgroup=Delimiter start=+\(<<<\)\@<=\s*"\z(\I\i*\)"$+ end="^\z1\(;\=$\)\@=" contained contains=@Spell,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                " including HTML,JavaScript,SQL if enabled via options
                                if (exists("php_html_in_heredoc") && php_html_in_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@="  contained contains=@htmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@="  contained contains=@htmlJavascript,phpIdentifierSimply,phpIdentifier,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_sql_heredoc") && php_sql_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@=" contained contains=@sqlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                if (exists("php_xml_heredoc") && php_xml_heredoc)
                                  SynFold syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\s*\z(\(\I\i*\)\=\(xml\)\c\(\i*\)\)$" end="^\z1\(;\=$\)\@=" contained contains=@xmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpSpecialChar,phpMethodsVar,phpStrEsc keepend extend
                                endif
                                " @end phpNowDoc
                              endif
    3              0.000003 endif
                            
    3              0.000010 syn case ignore
                            
                            " Parent
    3              0.000028 if (exists("php_parent_error_close") && php_parent_error_close) || (exists("php_parent_error_open") && php_parent_error_open)
                              syn match  phpParent "[{}]"  contained
                              syn region phpParent matchgroup=Delimiter start="(" end=")"  contained contains=@phpClFunction,@phpClControl transparent
                              syn region phpParent matchgroup=Delimiter start="\[" end="\]"  contained contains=@phpClFunction,@phpClControl transparent
                              if ! (exists("php_parent_error_close") && php_parent_error_close)
                                syn match phpParent "[\])]" contained
                              endif
    3              0.000005 else
    3              0.000023   syn match phpParent "[({[\]})]" contained
    3              0.000004 endif
                            
                            " Static classes
    3              0.000026 syn match phpStaticClasses "\v\h\w+(::)@=" contained display
                            
                            " Class name
    3              0.000032 syn keyword phpKeyword class contained
                                  \ nextgroup=phpClass skipwhite skipempty
    3              0.000017 syn match phpClass /\h\w*/ contained
                            
    3              0.000015 syn match phpClassNamespaceSeparator "\\" contained display
                            
                            " Class extends
    3              0.000029 syn keyword phpKeyword extends contained
                                  \ nextgroup=phpClassExtends skipwhite skipempty
    3              0.000038 syn match phpClassExtends /\(\\\|\h\w*\)*\h\w*/ contained contains=phpClassNamespaceSeparator
                            
                            " Class implements
    3              0.000038 syntax keyword phpKeyword implements contained
                                  \ nextgroup=phpClassImplements skipwhite skipempty
    3              0.000058 syntax match phpClassImplements contained contains=phpClassNamespaceSeparator
                                  \ nextgroup=phpClassDelimiter skipwhite skipempty /\(\\\|\h\w*\)*\h\w*/
    3              0.000029 syntax match phpClassDelimiter contained
                                  \ nextgroup=phpClassImplements skipwhite skipempty /,/
                            
                            " use statement
    3              0.000020 syn match phpUseNamespaceSeparator "\\" contained display
    3              0.000035 syn keyword phpInclude use contained
                                  \ nextgroup=phpUseFunction,phpUseClass skipwhite skipempty
    3              0.000051 syn match phpUseFunction /function\_s\+\(\\\|\h\w*\)*\h\w*/ contained contains=phpUseKeyword
                                  \ nextgroup=phpUseAlias skipwhite skipempty
    3              0.000053 syn match phpUseClass /\(function\_s\+\)\@!\(\\\|\h\w*\)*\h\w*/ contained contains=phpUseNamespaceSeparator
                                  \ nextgroup=phpUseAlias skipwhite skipempty
    3              0.000029 syn match phpUseAlias /as\_s\+\h\w*/ contained contains=phpUseKeyword
    3              0.000037 syn match phpUseKeyword /\(function\|as\)\_s\+/ contained contains=phpKeyword
                            
                            " Function name
    3              0.000025 syn keyword phpKeyword function contained
                                  \ nextgroup=phpFunction skipwhite skipempty
    3              0.000016 syn match phpFunction /\h\w*/ contained
                            
                            " PHP 7 Generator & delegation via yield from
                            "
                            " See https://www.php.net/manual/en/language.generators.syntax.php#control-structures.yield
                            " See https://www.php.net/manual/en/language.generators.syntax.php#control-structures.yield.from
                            "
    3              0.000025 syn keyword phpKeyword yield contained
                                  \ nextgroup=phpYieldFromKeyword skipwhite skipempty
    3              0.000021 syn match phpYieldFromKeyword /\<from\>/ contained
                            
                            " Clusters
    3              0.000207 syn cluster phpClConst contains=phpFunctions,phpClasses,phpStaticClasses,phpIdentifier,phpStatement,phpKeyword,phpOperator,phpSplatOperator,phpStringSingle,phpStringDouble,phpBacktick,phpNumber,phpType,phpNullValue,phpBoolean,phpStructure,phpMethodsVar,phpConstants,phpException,phpSuperglobals,phpMagicConstants,phpServerVars
    3              0.000075 syn cluster phpClInside contains=@phpClConst,phpComment,phpDocComment,phpParent,phpParentError,phpInclude,phpHereDoc,phpNowDoc
    3              0.000050 syn cluster phpClFunction contains=@phpClInside,phpDefine,phpParentError,phpStorageClass,phpKeyword
    3              0.000066 syn cluster phpClControl contains=phpFoldIfContainer,phpFoldWhile,phpFoldDoWhile,phpFoldFor,phpFoldForeach,phpFoldTryContainer,phpFoldSwitch
    3              0.000050 syn cluster phpClTop contains=@phpClFunction,@phpClControl,phpFoldFunction,phpFoldClass,phpFoldInterface,phpFoldHtmlInside
                            
                            " Php Region
    3              0.000024 if (exists("php_parent_error_open") && php_parent_error_open)
                              syn region phpRegion matchgroup=Delimiter start="<?\(php\)\=" end="?>" contains=@phpClTop
    3              0.000008 else
    3              0.000092   syn region phpRegion matchgroup=Delimiter start="<?\(php\)\=" end="?>" contains=@phpClTop keepend
    3              0.000005 endif
                            
                            " Fold
    3              0.000012 if php_folding==1
                              " match one line constructs here and skip them at folding
                              syn keyword phpSCKeyword  abstract final private protected public static  contained
                              syn keyword phpFCKeyword  function  contained
                              syn match phpDefine "\(\s\|^\)\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\(\s\+.*[;}]\)\@="  contained contains=phpSCKeyword
                              syn match phpStructure "\(\s\|^\)\(abstract\s\+\|final\s\+\)*class\(\s\+.*}\)\@="  contained
                              syn match phpStructure "\(\s\|^\)interface\(\s\+.*}\)\@="  contained
                              syn match phpException "\(\s\|^\)try\(\s\+.*}\)\@="  contained
                              syn match phpException "\(\s\|^\)catch\(\s\+.*}\)\@="  contained
                              syn match phpKeyword "^\s*\(if\|else\%[if]\)\s*\(.*{.*}$\|[^{}]*$\)\@=" contained
                              syn match phpKeyword "^\s*while\s*\([^{}]*$\|.*{.*}$\)\@=" contained
                              syn match phpKeyword "^\s*do\s*\([^{}]*$\|{.*}\s*while\s*.*;$\)\@=" contained
                              syn match phpKeyword "while\s*\((.*);$\)\@=" contained
                              syn match phpKeyword "^\s*for\s*\((.*)\s*{.*}$\|[^{}]*$\)\@=" contained
                              syn match phpKeyword "^\s*foreach\s*\((.*)\s*{.*}$\|[^{}]*$\)\@=" contained
                            
                              set foldmethod=syntax
                              syn region phpFoldHtmlInside matchgroup=Delimiter start="?>" end="<?\(php\)\=" contained transparent contains=@htmlTop
                              syn region phpFoldFunction matchgroup=Storageclass start="^\z(\s*\)\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\s\([^};]*$\)\@="rs=e-9 matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,@phpClControl,phpFoldHtmlInside,phpFCKeyword contained transparent fold extend
                              syn region phpFoldFunction matchgroup=Define start="^function\s\([^};]*$\)\@=" matchgroup=Delimiter end="^}" contains=@phpClFunction,@phpClControl,phpFoldHtmlInside contained transparent fold extend
                              syn region phpFoldClass matchgroup=Structure start="^\z(\s*\)\(abstract\s\+\|final\s\+\)*class\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction,phpSCKeyword contained transparent fold extend
                              syn region phpFoldInterface matchgroup=Structure start="^\z(\s*\)interface\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction contained transparent fold extend
                            
                              syn region phpFoldTryContainer start="^\z(\s*\)try\s\+\(.*{$\)\@=" skip="^\z1}\_s*\(catch\|finally\)" end="^\z1}$" keepend extend contained contains=@phpClFunction,@phpClControl,phpFoldFunction,phpFoldHtmlInside transparent
                              syn region phpFoldTry matchgroup=phpException start="^\z(\s*\)try\s\+\(.*{$\)\@=" matchgroup=Delimiter end="^\z1}$" end="^\z1}\(\s\+\(catch\|finally\)\)\@="me=s-1 containedin=phpFoldTryContainer contained transparent keepend fold extend nextgroup=phpFoldCatch
                              syn region phpFoldCatch matchgroup=phpException start="^\z(\s*\)\(}\s\+\)\=catch\s\+\(.*{$\)\@=" matchgroup=Delimiter end="^\z1}$" end="^\z1}\(\s\+\(catch\|finally\)\)\@="me=s-1 containedin=phpFoldTryContainer keepend contained transparent fold extend nextgroup=phpFoldCatch,phpFoldFinally
                              syn region phpFoldFinally matchgroup=phpException start="^\z(\s*\)\(}\s\+\)\=finally\s\+\(.*{$\)\@=" matchgroup=Delimiter end="^\z1}$" contained containedin=phpFoldTryContainer transparent fold keepend
                            
                              syn region phpFoldIfContainer start="^\z(\s*\)if\s\+\(.*{$\)\@=" skip="^\z1}\_s*else\%[if]" end="^\z1}$" keepend extend contained contains=@phpClFunction,@phpClControl,phpFCKeyword,phpFoldHtmlInside
                              syn region phpFoldIf matchgroup=phpKeyword start="^\z(\s*\)if\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="\(^\z1\)\@=}\(\_s\+\%[elseif]\s\+[^}]*$\)\@="me=s-1 contained containedin=phpFoldIfContainer keepend nextgroup=phpFoldElseIf,phpFoldElse fold transparent
                              syn region phpFoldElseIf matchgroup=phpKeyword start="^\z(\s*\)\(}\s\+\)\=elseif\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="\(^\z1\)\@=}\(\s*\%[elseif]\s*[^}]*$\)\@="me=s-1 contained containedin=phpFoldIfContainer keepend nextgroup=phpFoldElseIf,phpFoldElse fold transparent
                              syn region phpFoldElse matchgroup=phpKeyword start="^\z(\s*\)\(}\s\+\)\=else\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="\(^\z1\)\@=}\(\s\+\%[elseif]\s\+[^}]*$\)\@="me=s-1 contained containedin=phpFoldIfContainer keepend fold transparent
                            
                              syn region phpFoldSwitch matchgroup=phpKeyword start="^\z(\s*\)switch\s*\(.*{$\)\@=" matchgroup=Delimiter end="^\z1}$" keepend extend contained contains=@phpClFunction,@phpClControl,phpFCKeyword,phpFoldHtmlInside fold transparent
                              syn region phpFoldCase matchgroup=phpKeyword start="^\z(\s*\)case\s*\(.*:$\)\@=" end="^\z1\(case\|default\)"me=s-1 contained containedin=phpFoldSwitch keepend contains=@phpClFunction,@phpClControl,phpFCKeyword,phpFoldHtmlInside nextgroup=phpFoldCase,phpFoldDefault fold transparent
                              syn region phpFoldDefault matchgroup=phpKeyword start="^\z(\s*\)default\(:$\)\@=" matchgroup=Delimiter end="\s*}$" contained contains=@phpClFunction,@phpClControl,phpFCKeyword,phpFoldHtmlInside containedin=phpFoldSwitch keepend fold transparent
                            
                              syn region phpFoldWhile matchgroup=phpKeyword start="^\z(\s*\)while\s\+\(.*{$\)\@=" matchgroup=Delimiter end="^\z1}$" contains=@phpClFunction,@phpClControl,phpFoldHtmlInside contained fold extend
                              syn region phpFoldDoWhile matchgroup=phpkeyword start="^\z(\s*\)do\s\+\({$\)\@=" matchgroup=Delimiter end="\z1}\s\+\(while\s\+.*;$\)\@=" contains=@phpClFunction,@phpClControl,phpFoldHtmlInside contained fold extend keepend
                            
                              syn region phpFoldFor matchgroup=phpKeyword start="^\z(\s*\)for\s\(.*{$\)\@=" matchgroup=Delimiter end="\z1}$" contains=@phpClFunction,@phpClControl,phpFCKeyword,phpFoldHtmlInside contained transparent fold extend
                              syn region phpFoldForeach matchgroup=phpKeyword start="^\z(\s*\)foreach\s\(.*{$\)\@=" matchgroup=Delimiter end="\z1}$" contains=@phpClFunction,@phpClControl,phpFCKeyword,phpFoldHtmlInside contained transparent fold extend
                            
    3              0.000017 elseif php_folding==2
                              set foldmethod=syntax
                              syn region phpFoldHtmlInside matchgroup=Delimiter start="?>" end="<?\(php\)\=" contained transparent contains=@htmlTop
                              syn region phpParent matchgroup=Delimiter start="{" end="}"  contained contains=@phpClFunction,phpFoldHtmlInside transparent fold
                              syn region phpParent matchgroup=Delimiter start="(" end=")"  contained contains=@phpClFunction,phpFoldHtmlInside transparent fold
                              syn region phpParent matchgroup=Delimiter start="\[" end="]"  contained contains=@phpClFunction,phpFoldHtmlInside transparent fold
    3              0.000005 endif
                            
                            " Sync
    3              0.000014 if php_sync_method==-1
    3              0.000040   syn sync match phpRegionSync grouphere phpRegion "^\s*<?\(php\)\=\s*$"
    3              0.000021   syn sync match phpRegionSync grouphere NONE "^\s*?>\s*$"
    3              0.000018   syn sync match phpRegionSync grouphere NONE "^\s*%>\s*$"
    3              0.000046   syn sync match phpRegionSync grouphere phpRegion "function\s.*(.*\$"
                            elseif php_sync_method>0
                              exec "syn sync minlines=" . php_sync_method
                            else
                              exec "syn sync fromstart"
    3              0.000004 endif
                            
                            " Define the default highlighting.
                            " For version 5.8 and later: only when an item doesn't have highlighting yet
    3              0.000018 if !exists("did_php_syn_inits")
                            
    3              0.000053   hi def link phpComment          Comment
    3              0.000040   hi def link phpMagicConstants   Constant
    3              0.000037   hi def link phpServerVars       Constant
    3              0.000037   hi def link phpConstants        Constant
    3              0.000032   hi def link phpBoolean          Boolean
    3              0.000036   hi def link phpNumber           Number
    3              0.000037   hi def link phpStringSingle     String
    3              0.000036   hi def link phpStringDouble     String
    3              0.000034   hi def link phpBacktick         String
    3              0.000034   hi def link phpStringDelimiter  String
    3              0.000034   hi def link phpHereDoc          String
    3              0.000034   hi def link phpNowDoc           String
    3              0.000032   hi def link phpFunctions        Function
    3              0.000037   hi def link phpMethods          Function
    3              0.000034   hi def link phpClasses          StorageClass
    3              0.000028   hi def link phpException        Exception
    3              0.000033   hi def link phpIdentifier       Identifier
    3              0.000033   hi def link phpIdentifierSimply Identifier
    3              0.000033   hi def link phpStatement        Statement
    3              0.000029   hi def link phpStructure        Statement
    3              0.000032   hi def link phpOperator         Operator
    3              0.000033   hi def link phpMemberSelector   Operator
    3              0.000032   hi def link phpInclude          PreProc
    3              0.000029   hi def link phpDefine           PreProc
    3              0.000029   hi def link phpKeyword          Keyword
    3              0.000034   hi def link phpSuperglobals     Type
    3              0.000034   hi def link phpType             Type
    3              0.000014   hi def link phpNullValue        phpType
    3              0.000030   hi def link phpParent           Special
    3              0.000034   hi def link phpSpecialChar      SpecialChar
    3              0.000035   hi def link phpStrEsc           SpecialChar
    3              0.000031   hi def link phpParentError      Error
    3              0.000032   hi def link phpOctalError       Error
    3              0.000029   hi def link phpTodo             Todo
                            
    3              0.000013   hi def link phpSplatOperator    phpOperator
                            
    3              0.000013   hi def link phpCommentStar      phpComment
    3              0.000013   hi def link phpDocComment       phpComment
    3              0.000012   hi def link phpCommentTitle     phpComment
    3              0.000014   hi def link phpDocTags          phpComment
    3              0.000012   hi def link phpDocParam         phpComment
    3              0.000011   hi def link phpDocIdentifier    phpComment
                            
    3              0.000012   hi def link phpFCKeyword        phpKeyword
    3              0.000010   hi def link phpSCKeyword        phpKeyword
    3              0.000010   hi def link phpYieldFromKeyword phpKeyword
                            
    3              0.000011   hi def link phpStaticClasses    phpClasses
                            
    3              0.000022   if (exists("php_var_selector_is_identifier") && php_var_selector_is_identifier)
                                hi def link phpVarSelector    phpIdentifier
    3              0.000005   else
    3              0.000012     hi def link phpVarSelector    phpOperator
    3              0.000004   endif
                            
    3              0.000012   hi def link phpFunction        phpRegion
    3              0.000012   hi def link phpClass           phpRegion
    3              0.000011   hi def link phpClassExtends    phpClass
    3              0.000010   hi def link phpClassImplements phpClass
    3              0.000010   hi def link phpClassDelimiter  phpRegion
                            
    3              0.000013   hi def link phpDocNamespaceSeparator   phpComment
    3              0.000011   hi def link phpClassNamespaceSeparator phpClass
    3              0.000011   hi def link phpUseNamespaceSeparator   phpRegion
                            
    3              0.000003 endif
                            
                            " Cleanup: {{{
                            
    3              0.000012 delcommand SynFold
    3              0.000008 delcommand SynFoldDoc
    3              0.000018 let b:current_syntax = "php"
                            
    3              0.000225 let &iskeyword = s:iskeyword_save
    3              0.000013 unlet s:iskeyword_save
                            
    3              0.000023 if (exists("main_syntax") && main_syntax == 'php')
    3              0.000017   unlet main_syntax
    3              0.000003 endif
                            
                            " }}}
                            
                            " vim: ts=8 sts=2 sw=2 fdm=marker expandtab

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\syntax\html.vim
Sourced 3 times
Total time:   0.171067
 Self time:   0.043979

count  total (s)   self (s)
    3   0.000409   0.000282 if polyglot#init#is_disabled(expand('<sfile>:p'), 'html', 'syntax/html.vim')
                              finish
    3              0.000004 endif
                            
                            " Vim syntax file
                            " Language:             HTML
                            " Previous Maintainer:  Jorge Maldonado Ventura <jorgesumle@freakspot.net>
                            " Previous Maintainer:  Claudio Fleiner <claudio@fleiner.com>
                            " Repository:           https://notabug.org/jorgesumle/vim-html-syntax
                            " Last Change:          2021 Mar 02
                            "			Included patch #7900 to fix comments
                            "			Included patch #7916 to fix a few more things
                            "
                            
                            " Please check :help html.vim for some comments and a description of the options
                            
                            " quit when a syntax file was already loaded
    3              0.000016 if !exists("main_syntax")
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'html'
    3              0.000003 endif
                            
    3              0.000033 let s:cpo_save = &cpo
    3              0.000039 set cpo&vim
                            
    3              0.000015 syntax spell toplevel
                            
    3              0.000009 syn case ignore
                            
                            " mark illegal characters
    3              0.000073 syn match htmlError "[<>&]"
                            
                            
                            " tags
    3              0.000184 syn region  htmlString   contained start=+"+ end=+"+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
    3              0.000128 syn region  htmlString   contained start=+'+ end=+'+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
    3              0.000078 syn match   htmlValue    contained "=[\t ]*[^'" \t>][^ \t>]*"hs=s+1   contains=javaScriptExpression,@htmlPreproc
    3              0.000123 syn region  htmlEndTag             start=+</+      end=+>+ contains=htmlTagN,htmlTagError
    3              0.000240 syn region  htmlTag                start=+<[^/]+   end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
    3              0.000158 syn match   htmlTagN     contained +<\s*[-a-zA-Z0-9]\++hs=s+1 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
    3              0.000137 syn match   htmlTagN     contained +</\s*[-a-zA-Z0-9]\++hs=s+2 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
    3              0.000036 syn match   htmlTagError contained "[^>]<"ms=s+1
                            
                            
                            " tag names
    3              0.000042 syn keyword htmlTagName contained address applet area a base basefont
    3              0.000041 syn keyword htmlTagName contained big blockquote br caption center
    3              0.000048 syn keyword htmlTagName contained cite code dd dfn dir div dl dt font
    3              0.000035 syn keyword htmlTagName contained form hr html img
    3              0.000040 syn keyword htmlTagName contained input isindex kbd li link map menu
    3              0.000040 syn keyword htmlTagName contained meta ol option param pre p samp span
    3              0.000041 syn keyword htmlTagName contained select small sub sup
    3              0.000081 syn keyword htmlTagName contained table td textarea th tr tt ul var xmp
    3              0.000076 syn match htmlTagName contained "\<\(b\|i\|u\|h[1-6]\|em\|strong\|head\|body\|title\)\>"
                            
                            " new html 4.0 tags
    3              0.000039 syn keyword htmlTagName contained abbr acronym bdo button col label
    3              0.000038 syn keyword htmlTagName contained colgroup fieldset iframe ins legend
    3              0.000038 syn keyword htmlTagName contained object optgroup q s tbody tfoot thead
                            
                            " new html 5 tags
    3              0.000038 syn keyword htmlTagName contained article aside audio bdi canvas data
    3              0.000039 syn keyword htmlTagName contained datalist details dialog embed figcaption
    3              0.000037 syn keyword htmlTagName contained figure footer header hgroup keygen main
    3              0.000038 syn keyword htmlTagName contained mark menuitem meter nav output picture
    3              0.000037 syn keyword htmlTagName contained progress rb rp rt rtc ruby section
    3              0.000039 syn keyword htmlTagName contained slot source summary template time track
    3              0.000029 syn keyword htmlTagName contained video wbr
                            
                            " legal arg names
    3              0.000028 syn keyword htmlArg contained action
    3              0.000036 syn keyword htmlArg contained align alink alt archive background bgcolor
    3              0.000034 syn keyword htmlArg contained border bordercolor cellpadding
    3              0.000042 syn keyword htmlArg contained cellspacing checked class clear code codebase color
    3              0.000043 syn keyword htmlArg contained cols colspan content coords enctype face
    3              0.000034 syn keyword htmlArg contained gutter height hspace id
    3              0.000032 syn keyword htmlArg contained link lowsrc marginheight
    3              0.000036 syn keyword htmlArg contained marginwidth maxlength method name prompt
    3              0.000040 syn keyword htmlArg contained rel rev rows rowspan scrolling selected shape
    3              0.000040 syn keyword htmlArg contained size src start target text type url
    3              0.000040 syn keyword htmlArg contained usemap ismap valign value vlink vspace width wrap
    3              0.000056 syn match   htmlArg contained "\<\(http-equiv\|href\|title\)="me=e-1
                            
                            " aria attributes
    3              0.000570 exe 'syn match htmlArg contained "\<aria-\%(' . join([
                                \ 'activedescendant', 'atomic', 'autocomplete', 'busy', 'checked', 'colcount',
                                \ 'colindex', 'colspan', 'controls', 'current', 'describedby', 'details',
                                \ 'disabled', 'dropeffect', 'errormessage', 'expanded', 'flowto', 'grabbed',
                                \ 'haspopup', 'hidden', 'invalid', 'keyshortcuts', 'label', 'labelledby', 'level',
                                \ 'live', 'modal', 'multiline', 'multiselectable', 'orientation', 'owns',
                                \ 'placeholder', 'posinset', 'pressed', 'readonly', 'relevant', 'required',
                                \ 'roledescription', 'rowcount', 'rowindex', 'rowspan', 'selected', 'setsize',
                                \ 'sort', 'valuemax', 'valuemin', 'valuenow', 'valuetext'
                                \ ], '\|') . '\)\>"'
    3              0.000033 syn keyword htmlArg contained role
                            
                            " Netscape extensions
    3              0.000037 syn keyword htmlTagName contained frame noframes frameset nobr blink
    3              0.000086 syn keyword htmlTagName contained layer ilayer nolayer spacer
    3              0.000136 syn keyword htmlArg     contained frameborder noresize pagex pagey above below
    3              0.000128 syn keyword htmlArg     contained left top visibility clip id noshade
    3              0.000048 syn match   htmlArg     contained "\<z-index\>"
                            
                            " Microsoft extensions
    3              0.000046 syn keyword htmlTagName contained marquee
                            
                            " html 4.0 arg names
    3              0.000052 syn match   htmlArg contained "\<\(accept-charset\|label\)\>"
    3              0.000147 syn keyword htmlArg contained abbr accept accesskey axis char charoff charset
    3              0.000116 syn keyword htmlArg contained cite classid codetype compact data datetime
    3              0.000113 syn keyword htmlArg contained declare defer dir disabled for frame
    3              0.000136 syn keyword htmlArg contained headers hreflang lang language longdesc
    3              0.000044 syn keyword htmlArg contained multiple nohref nowrap object profile readonly
    3              0.000039 syn keyword htmlArg contained rules scheme scope span standby style
    3              0.000034 syn keyword htmlArg contained summary tabindex valuetype version
                            
                            " html 5 arg names
    3              0.000040 syn keyword htmlArg contained allowfullscreen async autocomplete autofocus
    3              0.000038 syn keyword htmlArg contained autoplay challenge contenteditable contextmenu
    3              0.000038 syn keyword htmlArg contained controls crossorigin default dirname download
    3              0.000038 syn keyword htmlArg contained draggable dropzone form formaction formenctype
    3              0.000035 syn keyword htmlArg contained formmethod formnovalidate formtarget hidden
    3              0.000039 syn keyword htmlArg contained high icon inputmode keytype kind list loop low
    3              0.000039 syn keyword htmlArg contained max min minlength muted nonce novalidate open
    3              0.000036 syn keyword htmlArg contained optimum pattern placeholder poster preload
    3              0.000037 syn keyword htmlArg contained radiogroup required reversed sandbox spellcheck
    3              0.000040 syn keyword htmlArg contained sizes srcset srcdoc srclang step title translate
    3              0.000028 syn keyword htmlArg contained typemustmatch
                            
                            " special characters
    3              0.000079 syn match htmlSpecialChar "&#\=[0-9A-Za-z]\{1,8};"
                            
                            " Comments (the real ones or the old netscape ones)
    3              0.000022 if exists("html_wrong_comments")
                              syn region htmlComment        start=+<!--+    end=+--\s*>+    contains=@Spell
    3              0.000009 else
                              " The HTML 5.2 syntax 8.2.4.41: bogus comment is parser error; browser skips until next &gt
    3              0.000072   syn region htmlComment        start=+<!+      end=+>+         contains=htmlCommentError keepend
                              " Idem 8.2.4.42,51: Comment starts with <!-- and ends with -->
                              " Idem 8.2.4.43,44: Except <!--> and <!---> are parser errors
                              " Idem 8.2.4.52: dash-dash-bang (--!>) is error ignored by parser, also closes comment
    3              0.000093   syn region htmlComment matchgroup=htmlComment start=+<!--\%(-\?>\)\@!+        end=+--!\?>+    contains=htmlCommentNested,@htmlPreProc,@Spell keepend
                              " Idem 8.2.4.49: nested comment is parser error, except <!--> is all right
    3              0.000033   syn match htmlCommentNested contained "<!-->\@!"
    3              0.000024   syn match htmlCommentError  contained "[^><!]"
    3              0.000007 endif
    3              0.000038 syn region htmlComment  start=+<!DOCTYPE+       end=+>+ keepend
                            
                            " server-parsed commands
    3              0.000085 syn region htmlPreProc start=+<!--#+ end=+-->+ contains=htmlPreStmt,htmlPreError,htmlPreAttr
    3              0.000078 syn match htmlPreStmt contained "<!--#\(config\|echo\|exec\|fsize\|flastmod\|include\|printenv\|set\|if\|elif\|else\|endif\|geoguide\)\>"
    3              0.000031 syn match htmlPreError contained "<!--#\S*"ms=s+4
    3              0.000126 syn match htmlPreAttr contained "\w\+=[^"]\S\+" contains=htmlPreProcAttrError,htmlPreProcAttrName
    3              0.000070 syn region htmlPreAttr contained start=+\w\+="+ skip=+\\\\\|\\"+ end=+"+ contains=htmlPreProcAttrName keepend
    3              0.000028 syn match htmlPreProcAttrError contained "\w\+="he=e-1
    3              0.000055 syn match htmlPreProcAttrName contained "\(expr\|errmsg\|sizefmt\|timefmt\|var\|cgi\|cmd\|file\|virtual\|value\)="he=e-1
                            
    3              0.000020 if !exists("html_no_rendering")
                              " rendering
    3              0.000234   syn cluster htmlTop contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,javaScript,@htmlPreproc
                            
    3              0.000053   syn region htmlStrike start="<del\>" end="</del\_s*>"me=s-1 contains=@htmlTop
    3              0.000050   syn region htmlStrike start="<strike\>" end="</strike\_s*>"me=s-1 contains=@htmlTop
                            
    3              0.000131   syn region htmlBold start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
    3              0.000149   syn region htmlBold start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
    3              0.000101   syn region htmlBoldUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderlineItalic
    3              0.000076   syn region htmlBoldItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlBoldItalicUnderline
    3              0.000078   syn region htmlBoldItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop,htmlBoldItalicUnderline
    3              0.000060   syn region htmlBoldUnderlineItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop
    3              0.000061   syn region htmlBoldUnderlineItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
    3              0.000086   syn region htmlBoldItalicUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderlineItalic
                            
    3              0.000110   syn region htmlUnderline start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBold,htmlUnderlineItalic
    3              0.000069   syn region htmlUnderlineBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBoldItalic
    3              0.000065   syn region htmlUnderlineBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBoldItalic
    3              0.000084   syn region htmlUnderlineItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineItalicBold
    3              0.000078   syn region htmlUnderlineItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineItalicBold
    3              0.000052   syn region htmlUnderlineItalicBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop
    3              0.000048   syn region htmlUnderlineItalicBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop
    3              0.000043   syn region htmlUnderlineBoldItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop
    3              0.000041   syn region htmlUnderlineBoldItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
                            
    3              0.000084   syn region htmlItalic start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlItalicBold,htmlItalicUnderline
    3              0.000061   syn region htmlItalic start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
    3              0.000069   syn region htmlItalicBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlItalicBoldUnderline
    3              0.000066   syn region htmlItalicBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlItalicBoldUnderline
    3              0.000061   syn region htmlItalicBoldUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop
    3              0.000058   syn region htmlItalicUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlItalicUnderlineBold
    3              0.000041   syn region htmlItalicUnderlineBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop
    3              0.000044   syn region htmlItalicUnderlineBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop
                            
    3              0.000028   syn match htmlLeadingSpace "^\s\+" contained
    3              0.000269   syn region htmlLink start="<a\>\_[^>]*\<href\>" end="</a\_s*>"me=s-1 contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLeadingSpace,javaScript,@htmlPreproc
    3              0.000071   syn region htmlH1 start="<h1\>" end="</h1\_s*>"me=s-1 contains=@htmlTop
    3              0.000047   syn region htmlH2 start="<h2\>" end="</h2\_s*>"me=s-1 contains=@htmlTop
    3              0.000040   syn region htmlH3 start="<h3\>" end="</h3\_s*>"me=s-1 contains=@htmlTop
    3              0.000038   syn region htmlH4 start="<h4\>" end="</h4\_s*>"me=s-1 contains=@htmlTop
    3              0.000038   syn region htmlH5 start="<h5\>" end="</h5\_s*>"me=s-1 contains=@htmlTop
    3              0.000092   syn region htmlH6 start="<h6\>" end="</h6\_s*>"me=s-1 contains=@htmlTop
    3              0.000313   syn region htmlHead start="<head\>" end="</head\_s*>"me=s-1 end="<body\>"me=s-1 end="<h[1-6]\>"me=s-1 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,htmlTitle,javaScript,cssStyle,@htmlPreproc
    3              0.000208   syn region htmlTitle start="<title\>" end="</title\_s*>"me=s-1 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,javaScript,@htmlPreproc
    3              0.000005 endif
                            
    3              0.000031 syn keyword htmlTagName         contained noscript
    3              0.000033 syn keyword htmlSpecialTagName  contained script style
    3              0.000023 if main_syntax != 'java' || exists("java_javascript")
                              " JAVA SCRIPT
    3   0.042908   0.007306   syn include @htmlJavaScript syntax/javascript.vim
    3              0.000022   unlet b:current_syntax
    3              0.000157   syn region  javaScript start=+<script\_[^>]*>+ keepend end=+</script\_[^>]*>+me=s-1 contains=@htmlJavaScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
    3              0.000238   syn region  htmlScriptTag     contained start=+<script+ end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent
    3              0.000048   hi def link htmlScriptTag htmlTag
                            
                              " html events (i.e. arguments that include javascript commands)
    3              0.000027   if exists("html_extended_events")
                                syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ contains=htmlEventSQ
                                syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ contains=htmlEventDQ
    3              0.000009   else
    3              0.000053     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ keepend contains=htmlEventSQ
    3              0.000047     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ keepend contains=htmlEventDQ
    3              0.000007   endif
    3              0.000040   syn region htmlEventSQ        contained start=+'+ms=s+1 end=+'+me=s-1 contains=@htmlJavaScript
    3              0.000032   syn region htmlEventDQ        contained start=+"+ms=s+1 end=+"+me=s-1 contains=@htmlJavaScript
    3              0.000018   hi def link htmlEventSQ htmlEvent
    3              0.000015   hi def link htmlEventDQ htmlEvent
                            
                              " a javascript expression is used as an arg value
    3              0.000052   syn region  javaScriptExpression contained start=+&{+ keepend end=+};+ contains=@htmlJavaScript,@htmlPreproc
    3              0.000004 endif
                            
    3              0.000020 if main_syntax != 'java' || exists("java_vb")
                              " VB SCRIPT
    3   0.024107   0.005812   syn include @htmlVbScript syntax/vb.vim
    3              0.000026   unlet b:current_syntax
    3              0.000178   syn region  javaScript start=+<script \_[^>]*language *=\_[^>]*vbscript\_[^>]*>+ keepend end=+</script\_[^>]*>+me=s-1 contains=@htmlVbScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
    3              0.000007 endif
                            
    3              0.000025 syn cluster htmlJavaScript      add=@htmlPreproc
                            
    3              0.000027 if main_syntax != 'java' || exists("java_css")
                              " embedded style sheets
    3              0.000035   syn keyword htmlArg           contained media
    3   0.079270   0.006207   syn include @htmlCss syntax/css.vim
    3              0.000027   unlet b:current_syntax
    3              0.000198   syn region cssStyle start=+<style+ keepend end=+</style>+ contains=@htmlCss,htmlTag,htmlEndTag,htmlCssStyleComment,@htmlPreproc
    3              0.000040   syn match htmlCssStyleComment contained "\(<!--\|-->\)"
    3              0.010455   syn region htmlCssDefinition matchgroup=htmlArg start='style="' keepend matchgroup=htmlString end='"' contains=css.*Attr,css.*Prop,cssComment,cssLength,cssColor,cssURL,cssImportant,cssError,cssString,@htmlPreproc
    3              0.000026   hi def link htmlStyleArg htmlString
    3              0.000005 endif
                            
    3              0.000020 if main_syntax == "html"
                              " synchronizing (does not always work if a comment includes legal
                              " html tags, but doing it right would mean to always start
                              " at the first line, which is too slow)
                              syn sync match htmlHighlight groupthere NONE "<[/a-zA-Z]"
                              syn sync match htmlHighlight groupthere javaScript "<script"
                              syn sync match htmlHighlightSkip "^.*['\"].*$"
                              syn sync minlines=10
    3              0.000005 endif
                            
                            " The default highlighting.
    3              0.000050 hi def link htmlTag                     Function
    3              0.000049 hi def link htmlEndTag                  Identifier
    3              0.000049 hi def link htmlArg                     Type
    3              0.000032 hi def link htmlTagName                 htmlStatement
    3              0.000042 hi def link htmlSpecialTagName          Exception
    3              0.000036 hi def link htmlValue                   String
    3              0.000045 hi def link htmlSpecialChar             Special
                            
    3              0.000023 if !exists("html_no_rendering")
    3              0.000041   hi def link htmlH1                      Title
    3              0.000023   hi def link htmlH2                      htmlH1
    3              0.000018   hi def link htmlH3                      htmlH2
    3              0.000017   hi def link htmlH4                      htmlH3
    3              0.000017   hi def link htmlH5                      htmlH4
    3              0.000083   hi def link htmlH6                      htmlH5
    3              0.000037   hi def link htmlHead                    PreProc
    3              0.000039   hi def link htmlTitle                   Title
    3              0.000036   hi def link htmlBoldItalicUnderline     htmlBoldUnderlineItalic
    3              0.000033   hi def link htmlUnderlineBold           htmlBoldUnderline
    3              0.000032   hi def link htmlUnderlineItalicBold     htmlBoldUnderlineItalic
    3              0.000032   hi def link htmlUnderlineBoldItalic     htmlBoldUnderlineItalic
    3              0.000032   hi def link htmlItalicUnderline         htmlUnderlineItalic
    3              0.000032   hi def link htmlItalicBold              htmlBoldItalic
    3              0.000032   hi def link htmlItalicBoldUnderline     htmlBoldUnderlineItalic
    3              0.000031   hi def link htmlItalicUnderlineBold     htmlBoldUnderlineItalic
    3              0.000042   hi def link htmlLink                    Underlined
    3              0.000017   hi def link htmlLeadingSpace            None
    3              0.000018   if !exists("html_my_rendering")
    3              0.000027     hi def htmlBold                term=bold cterm=bold gui=bold
    3              0.000028     hi def htmlBoldUnderline       term=bold,underline cterm=bold,underline gui=bold,underline
    3              0.000028     hi def htmlBoldItalic          term=bold,italic cterm=bold,italic gui=bold,italic
    3              0.000027     hi def htmlBoldUnderlineItalic term=bold,italic,underline cterm=bold,italic,underline gui=bold,italic,underline
    3              0.000027     hi def htmlUnderline           term=underline cterm=underline gui=underline
    3              0.000026     hi def htmlUnderlineItalic     term=italic,underline cterm=italic,underline gui=italic,underline
    3              0.000025     hi def htmlItalic              term=italic cterm=italic gui=italic
    3              0.000101     if v:version > 800 || v:version == 800 && has("patch1038")
    3              0.000018         hi def htmlStrike              term=strikethrough cterm=strikethrough gui=strikethrough
                                else
                                    hi def htmlStrike              term=underline cterm=underline gui=underline
    3              0.000004     endif
    3              0.000004   endif
    3              0.000003 endif
                            
    3              0.000033 hi def link htmlPreStmt            PreProc
    3              0.000036 hi def link htmlPreError           Error
    3              0.000035 hi def link htmlPreProc            PreProc
    3              0.000037 hi def link htmlPreAttr            String
    3              0.000035 hi def link htmlPreProcAttrName    PreProc
    3              0.000034 hi def link htmlPreProcAttrError   Error
    3              0.000037 hi def link htmlString             String
    3              0.000031 hi def link htmlStatement          Statement
    3              0.000037 hi def link htmlComment            Comment
    3              0.000025 hi def link htmlCommentNested      htmlError
    3              0.000021 hi def link htmlCommentError       htmlError
    3              0.000020 hi def link htmlTagError           htmlError
    3              0.000021 hi def link htmlEvent              javaScript
    3              0.000031 hi def link htmlError              Error
                            
    3              0.000035 hi def link javaScript             Special
    3              0.000025 hi def link javaScriptExpression   javaScript
    3              0.000030 hi def link htmlCssStyleComment    Comment
    3              0.000034 hi def link htmlCssDefinition      Special
                            
    3              0.000017 let b:current_syntax = "html"
                            
    3              0.000012 if main_syntax == 'html'
                              unlet main_syntax
    3              0.000004 endif
                            
    3              0.000047 let &cpo = s:cpo_save
    3              0.000011 unlet s:cpo_save
                            " vim: ts=8

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\syntax\javascript.vim
Sourced 6 times
Total time:   0.038654
 Self time:   0.038387

count  total (s)   self (s)
    6   0.000865   0.000598 if polyglot#init#is_disabled(expand('<sfile>:p'), 'javascript', 'syntax/javascript.vim')
                              finish
    6              0.000008 endif
                            
                            " Vim syntax file
                            " Language:     JavaScript
                            " Maintainer:   vim-javascript community
                            " URL:          https://github.com/pangloss/vim-javascript
                            
    6              0.000031 if !exists("main_syntax")
                              if version < 600
                                syntax clear
                              elseif exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'javascript'
    6              0.000007 endif
                            
                            " Dollar sign is permitted anywhere in an identifier
    6              0.000049 if (v:version > 704 || v:version == 704 && has('patch1142')) && main_syntax == 'javascript'
                              syntax iskeyword @,48-57,_,192-255,$
    6              0.000009 else
    6              0.000432   setlocal iskeyword+=$
    6              0.000009 endif
                            
    6              0.000027 syntax sync fromstart
                            " TODO: Figure out what type of casing I need
                            " syntax case ignore
    6              0.000017 syntax case match
                            
    6              0.000106 syntax match   jsNoise          /[:,;]/
    6              0.000243 syntax match   jsDot            /\./ skipwhite skipempty nextgroup=jsObjectProp,jsFuncCall,jsPrototype,jsTaggedTemplate
    6              0.000066 syntax match   jsObjectProp     contained /\<\K\k*/
    6              0.000072 syntax match   jsFuncCall       /\<\K\k*\ze\s*(/
    6              0.000058 syntax match   jsParensError    /[)}\]]/
                            
                            " Program Keywords
    6              0.000183 syntax keyword jsStorageClass   const var let skipwhite skipempty nextgroup=jsDestructuringBlock,jsDestructuringArray,jsVariableDef
    6              0.000110 syntax match   jsVariableDef    contained /\<\K\k*/ skipwhite skipempty nextgroup=jsFlowDefinition
    6              0.000091 syntax keyword jsOperatorKeyword delete instanceof typeof void new in of skipwhite skipempty nextgroup=@jsExpression
    6              0.000083 syntax match   jsOperator       "[-!|&+<>=%/*~^]" skipwhite skipempty nextgroup=@jsExpression
    6              0.000067 syntax match   jsOperator       /::/ skipwhite skipempty nextgroup=@jsExpression
    6              0.000039 syntax keyword jsBooleanTrue    true
    6              0.000037 syntax keyword jsBooleanFalse   false
                            
                            " Modules
    6              0.000192 syntax keyword jsImport                       import skipwhite skipempty nextgroup=jsModuleAsterisk,jsModuleKeyword,jsModuleGroup,jsFlowImportType
    6              0.000287 syntax keyword jsExport                       export skipwhite skipempty nextgroup=@jsAll,jsModuleGroup,jsExportDefault,jsModuleAsterisk,jsModuleKeyword,jsFlowTypeStatement
    6              0.000159 syntax match   jsModuleKeyword      contained /\<\K\k*/ skipwhite skipempty nextgroup=jsModuleAs,jsFrom,jsModuleComma
    6              0.000076 syntax keyword jsExportDefault      contained default skipwhite skipempty nextgroup=@jsExpression
    6              0.000146 syntax keyword jsExportDefaultGroup contained default skipwhite skipempty nextgroup=jsModuleAs,jsFrom,jsModuleComma
    6              0.000161 syntax match   jsModuleAsterisk     contained /\*/ skipwhite skipempty nextgroup=jsModuleKeyword,jsModuleAs,jsFrom
    6              0.000106 syntax keyword jsModuleAs           contained as skipwhite skipempty nextgroup=jsModuleKeyword,jsExportDefaultGroup
    6              0.000077 syntax keyword jsFrom               contained from skipwhite skipempty nextgroup=jsString
    6              0.000183 syntax match   jsModuleComma        contained /,/ skipwhite skipempty nextgroup=jsModuleKeyword,jsModuleAsterisk,jsModuleGroup,jsFlowTypeKeyword
                            
                            " Strings, Templates, Numbers
    6              0.000200 syntax region  jsString           start=+\z(["']\)+  skip=+\\\%(\z1\|$\)+  end=+\z1+ end=+$+  contains=jsSpecial extend
    6              0.000173 syntax region  jsTemplateString   start=+`+  skip=+\\`+  end=+`+     contains=jsTemplateExpression,jsSpecial extend
    6              0.000112 syntax match   jsTaggedTemplate   /\<\K\k*\ze`/ nextgroup=jsTemplateString
    6              0.000143 syntax match   jsNumber           /\c\<\%(\d\+\%(e[+-]\=\d\+\)\=\|0b[01]\+\|0o\o\+\|0x\%(\x\|_\)\+\)\>/
    6              0.000043 syntax keyword jsNumber           Infinity
    6              0.000100 syntax match   jsFloat            /\c\<\%(\d\+\.\d\+\|\d\+\.\|\.\d\+\)\%(e[+-]\=\d\+\)\=\>/
                            
                            " Regular Expressions
    6              0.000103 syntax match   jsSpecial            contained "\v\\%(x\x\x|u%(\x{4}|\{\x{4,5}})|c\u|.)"
    6              0.000144 syntax region  jsTemplateExpression contained matchgroup=jsTemplateBraces start=+${+ end=+}+ contains=@jsExpression keepend
    6              0.000131 syntax region  jsRegexpCharClass    contained start=+\[+ skip=+\\.+ end=+\]+ contains=jsSpecial extend
    6              0.000064 syntax match   jsRegexpBoundary     contained "\v\c[$^]|\\b"
    6              0.000243 syntax match   jsRegexpBackRef      contained "\v\\[1-9]\d*"
    6              0.000113 syntax match   jsRegexpQuantifier   contained "\v[^\\]%([?*+]|\{\d+%(,\d*)?})\??"lc=1
    6              0.000154 syntax match   jsRegexpOr           contained "|"
    6              0.000065 syntax match   jsRegexpMod          contained "\v\(\?[:=!>]"lc=1
    6              0.000202 syntax region  jsRegexpGroup        contained start="[^\\]("lc=1 skip="\\.\|\[\(\\.\|[^]]\+\)\]" end=")" contains=jsRegexpCharClass,@jsRegexpSpecial keepend
    6              0.000435 syntax region  jsRegexpString   start=+\%(\%(\<return\|\<typeof\|\_[^)\]'"[:blank:][:alnum:]_$]\)\s*\)\@<=/\ze[^*/]+ skip=+\\.\|\[[^]]\{1,}\]+ end=+/[gimyus]\{,6}+ contains=jsRegexpCharClass,jsRegexpGroup,@jsRegexpSpecial oneline keepend extend
    6              0.000235 syntax cluster jsRegexpSpecial    contains=jsSpecial,jsRegexpBoundary,jsRegexpBackRef,jsRegexpQuantifier,jsRegexpOr,jsRegexpMod
                            
                            " Objects
    6              0.000109 syntax match   jsObjectShorthandProp contained /\<\k*\ze\s*/ skipwhite skipempty nextgroup=jsObjectSeparator
    6              0.000148 syntax match   jsObjectKey         contained /\<\k*\ze\s*:/ contains=jsFunctionKey skipwhite skipempty nextgroup=jsObjectValue
    6              0.000213 syntax region  jsObjectKeyString   contained start=+\z(["']\)+  skip=+\\\%(\z1\|$\)+  end=+\z1\|$+  contains=jsSpecial skipwhite skipempty nextgroup=jsObjectValue
    6              0.000193 syntax region  jsObjectKeyComputed contained matchgroup=jsBrackets start=/\[/ end=/]/ contains=@jsExpression skipwhite skipempty nextgroup=jsObjectValue,jsFuncArgs extend
    6              0.000054 syntax match   jsObjectSeparator   contained /,/
    6              0.000119 syntax region  jsObjectValue       contained matchgroup=jsObjectColon start=/:/ end=/[,}]\@=/ contains=@jsExpression extend
    6              0.000106 syntax match   jsObjectFuncName    contained /\<\K\k*\ze\_s*(/ skipwhite skipempty nextgroup=jsFuncArgs
    6              0.000085 syntax match   jsFunctionKey       contained /\<\K\k*\ze\s*:\s*function\>/
    6              0.000112 syntax match   jsObjectMethodType  contained /\<[gs]et\ze\s\+\K\k*/ skipwhite skipempty nextgroup=jsObjectFuncName
    6              0.000224 syntax region  jsObjectStringKey   contained start=+\z(["']\)+  skip=+\\\%(\z1\|$\)+  end=+\z1\|$+  contains=jsSpecial extend skipwhite skipempty nextgroup=jsFuncArgs,jsObjectValue
                            
    6              0.000188 exe 'syntax keyword jsNull      null             '.(exists('g:javascript_conceal_null')      ? 'conceal cchar='.g:javascript_conceal_null       : '')
    6              0.000157 exe 'syntax keyword jsReturn    return contained '.(exists('g:javascript_conceal_return')    ? 'conceal cchar='.g:javascript_conceal_return     : '').' skipwhite nextgroup=@jsExpression'
    6              0.000132 exe 'syntax keyword jsUndefined undefined        '.(exists('g:javascript_conceal_undefined') ? 'conceal cchar='.g:javascript_conceal_undefined  : '')
    6              0.000099 exe 'syntax keyword jsNan       NaN              '.(exists('g:javascript_conceal_NaN')       ? 'conceal cchar='.g:javascript_conceal_NaN        : '')
    6              0.000099 exe 'syntax keyword jsPrototype prototype        '.(exists('g:javascript_conceal_prototype') ? 'conceal cchar='.g:javascript_conceal_prototype  : '')
    6              0.000091 exe 'syntax keyword jsThis      this             '.(exists('g:javascript_conceal_this')      ? 'conceal cchar='.g:javascript_conceal_this       : '')
    6              0.000076 exe 'syntax keyword jsSuper     super  contained '.(exists('g:javascript_conceal_super')     ? 'conceal cchar='.g:javascript_conceal_super      : '')
                            
                            " Statement Keywords
    6              0.000145 syntax match   jsBlockLabel              /\<\K\k*\s*::\@!/    contains=jsNoise skipwhite skipempty nextgroup=jsBlock
    6              0.000063 syntax match   jsBlockLabelKey contained /\<\K\k*\ze\s*\_[;]/
    6              0.000042 syntax keyword jsStatement     contained with yield debugger
    6              0.000074 syntax keyword jsStatement     contained break continue skipwhite skipempty nextgroup=jsBlockLabelKey
    6              0.000085 syntax keyword jsConditional            if              skipwhite skipempty nextgroup=jsParenIfElse
    6              0.000113 syntax keyword jsConditional            else            skipwhite skipempty nextgroup=jsCommentIfElse,jsIfElseBlock
    6              0.000081 syntax keyword jsConditional            switch          skipwhite skipempty nextgroup=jsParenSwitch
    6              0.000113 syntax keyword jsRepeat                 while for       skipwhite skipempty nextgroup=jsParenRepeat,jsForAwait
    6              0.000083 syntax keyword jsDo                     do              skipwhite skipempty nextgroup=jsRepeatBlock
    6              0.000194 syntax region  jsSwitchCase   contained matchgroup=jsLabel start=/\<\%(case\|default\)\>/ end=/:\@=/ contains=@jsExpression,jsLabel skipwhite skipempty nextgroup=jsSwitchColon keepend
    6              0.000177 syntax keyword jsTry                    try             skipwhite skipempty nextgroup=jsTryCatchBlock
    6              0.000080 syntax keyword jsFinally      contained finally         skipwhite skipempty nextgroup=jsFinallyBlock
    6              0.000101 syntax keyword jsCatch        contained catch           skipwhite skipempty nextgroup=jsParenCatch,jsTryCatchBlock
    6              0.000043 syntax keyword jsException              throw
    6              0.000046 syntax keyword jsAsyncKeyword           async await
    6              0.000083 syntax match   jsSwitchColon   contained /::\@!/        skipwhite skipempty nextgroup=jsSwitchBlock
                            
                            " Keywords
    6              0.000246 syntax keyword jsGlobalObjects     ArrayBuffer Array BigInt64Array BigUint64Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray Boolean Buffer Collator DataView Date DateTimeFormat Function Intl Iterator JSON Map Set WeakMap WeakSet Math Number NumberFormat Object ParallelArray Promise Proxy Reflect RegExp String Symbol Uint8ClampedArray WebAssembly console document fetch window
    6              0.000085 syntax keyword jsGlobalNodeObjects  module exports global process __dirname __filename
    6              0.000148 syntax match   jsGlobalNodeObjects  /\<require\>/ containedin=jsFuncCall
    6              0.000083 syntax keyword jsExceptions         Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError
    6              0.000074 syntax keyword jsBuiltins           decodeURI decodeURIComponent encodeURI encodeURIComponent eval isFinite isNaN parseFloat parseInt uneval
                            " DISCUSS: How imporant is this, really? Perhaps it should be linked to an error because I assume the keywords are reserved?
    6              0.000100 syntax keyword jsFutureKeys         abstract enum int short boolean interface byte long char final native synchronized float package throws goto private transient implements protected volatile double public
                            
                            " DISCUSS: Should we really be matching stuff like this?
                            " DOM2 Objects
    6              0.000139 syntax keyword jsGlobalObjects  DOMImplementation DocumentFragment Document Node NodeList NamedNodeMap CharacterData Attr Element Text Comment CDATASection DocumentType Notation Entity EntityReference ProcessingInstruction
    6              0.000048 syntax keyword jsExceptions     DOMException
                            
                            " DISCUSS: Should we really be matching stuff like this?
                            " DOM2 CONSTANT
    6              0.000102 syntax keyword jsDomErrNo       INDEX_SIZE_ERR DOMSTRING_SIZE_ERR HIERARCHY_REQUEST_ERR WRONG_DOCUMENT_ERR INVALID_CHARACTER_ERR NO_DATA_ALLOWED_ERR NO_MODIFICATION_ALLOWED_ERR NOT_FOUND_ERR NOT_SUPPORTED_ERR INUSE_ATTRIBUTE_ERR INVALID_STATE_ERR SYNTAX_ERR INVALID_MODIFICATION_ERR NAMESPACE_ERR INVALID_ACCESS_ERR
    6              0.000228 syntax keyword jsDomNodeConsts  ELEMENT_NODE ATTRIBUTE_NODE TEXT_NODE CDATA_SECTION_NODE ENTITY_REFERENCE_NODE ENTITY_NODE PROCESSING_INSTRUCTION_NODE COMMENT_NODE DOCUMENT_NODE DOCUMENT_TYPE_NODE DOCUMENT_FRAGMENT_NODE NOTATION_NODE
                            
                            " DISCUSS: Should we really be special matching on these props?
                            " HTML events and internal variables
    6              0.000327 syntax keyword jsHtmlEvents     onblur onclick oncontextmenu ondblclick onfocus onkeydown onkeypress onkeyup onmousedown onmousemove onmouseout onmouseover onmouseup onresize
                            
                            " Code blocks
    6              0.000164 syntax region  jsBracket                      matchgroup=jsBrackets            start=/\[/ end=/\]/ contains=@jsExpression,jsSpreadExpression extend fold
    6              0.000195 syntax region  jsParen                        matchgroup=jsParens              start=/(/  end=/)/  contains=@jsExpression extend fold nextgroup=jsFlowDefinition
    6              0.000101 syntax region  jsParenDecorator     contained matchgroup=jsParensDecorator     start=/(/  end=/)/  contains=@jsAll extend fold
    6              0.000199 syntax region  jsParenIfElse        contained matchgroup=jsParensIfElse        start=/(/  end=/)/  contains=@jsAll skipwhite skipempty nextgroup=jsCommentIfElse,jsIfElseBlock,jsReturn extend fold
    6              0.000193 syntax region  jsParenRepeat        contained matchgroup=jsParensRepeat        start=/(/  end=/)/  contains=@jsAll skipwhite skipempty nextgroup=jsCommentRepeat,jsRepeatBlock,jsReturn extend fold
    6              0.000126 syntax region  jsParenSwitch        contained matchgroup=jsParensSwitch        start=/(/  end=/)/  contains=@jsAll skipwhite skipempty nextgroup=jsSwitchBlock extend fold
    6              0.000201 syntax region  jsParenCatch         contained matchgroup=jsParensCatch         start=/(/  end=/)/  skipwhite skipempty nextgroup=jsTryCatchBlock extend fold
    6              0.000463 syntax region  jsFuncArgs           contained matchgroup=jsFuncParens          start=/(/  end=/)/  contains=jsFuncArgCommas,jsComment,jsFuncArgExpression,jsDestructuringBlock,jsDestructuringArray,jsRestExpression,jsFlowArgumentDef skipwhite skipempty nextgroup=jsCommentFunction,jsFuncBlock,jsFlowReturn extend fold
    6              0.000430 syntax region  jsClassBlock         contained matchgroup=jsClassBraces         start=/{/  end=/}/  contains=jsClassFuncName,jsClassMethodType,jsArrowFunction,jsArrowFuncArgs,jsComment,jsGenerator,jsDecorator,jsClassProperty,jsClassPropertyComputed,jsClassStringKey,jsAsyncKeyword,jsNoise extend fold
    6              0.000121 syntax region  jsFuncBlock          contained matchgroup=jsFuncBraces          start=/{/  end=/}/  contains=@jsAll,jsBlock extend fold
    6              0.000125 syntax region  jsIfElseBlock        contained matchgroup=jsIfElseBraces        start=/{/  end=/}/  contains=@jsAll,jsBlock extend fold
    6              0.000188 syntax region  jsTryCatchBlock      contained matchgroup=jsTryCatchBraces      start=/{/  end=/}/  contains=@jsAll,jsBlock skipwhite skipempty nextgroup=jsCatch,jsFinally extend fold
    6              0.000128 syntax region  jsFinallyBlock       contained matchgroup=jsFinallyBraces       start=/{/  end=/}/  contains=@jsAll,jsBlock extend fold
    6              0.000149 syntax region  jsSwitchBlock        contained matchgroup=jsSwitchBraces        start=/{/  end=/}/  contains=@jsAll,jsBlock,jsSwitchCase extend fold
    6              0.000131 syntax region  jsRepeatBlock        contained matchgroup=jsRepeatBraces        start=/{/  end=/}/  contains=@jsAll,jsBlock extend fold
    6              0.000332 syntax region  jsDestructuringBlock contained matchgroup=jsDestructuringBraces start=/{/  end=/}/  contains=jsDestructuringProperty,jsDestructuringAssignment,jsDestructuringNoise,jsDestructuringPropertyComputed,jsSpreadExpression,jsComment nextgroup=jsFlowDefinition extend fold
    6              0.000375 syntax region  jsDestructuringArray contained matchgroup=jsDestructuringBraces start=/\[/ end=/\]/ contains=jsDestructuringPropertyValue,jsDestructuringNoise,jsDestructuringProperty,jsSpreadExpression,jsDestructuringBlock,jsDestructuringArray,jsComment nextgroup=jsFlowDefinition extend fold
    6              0.000518 syntax region  jsObject             contained matchgroup=jsObjectBraces        start=/{/  end=/}/  contains=jsObjectKey,jsObjectKeyString,jsObjectKeyComputed,jsObjectShorthandProp,jsObjectSeparator,jsObjectFuncName,jsObjectMethodType,jsGenerator,jsComment,jsObjectStringKey,jsSpreadExpression,jsDecorator,jsAsyncKeyword,jsTemplateString extend fold
    6              0.000142 syntax region  jsBlock                        matchgroup=jsBraces              start=/{/  end=/}/  contains=@jsAll,jsSpreadExpression extend fold
    6              0.000340 syntax region  jsModuleGroup        contained matchgroup=jsModuleBraces        start=/{/ end=/}/   contains=jsModuleKeyword,jsModuleComma,jsModuleAs,jsComment,jsFlowTypeKeyword skipwhite skipempty nextgroup=jsFrom fold
    6              0.000115 syntax region  jsSpreadExpression   contained matchgroup=jsSpreadOperator      start=/\.\.\./ end=/[,}\]]\@=/ contains=@jsExpression
    6              0.000101 syntax region  jsRestExpression     contained matchgroup=jsRestOperator        start=/\.\.\./ end=/[,)]\@=/
    6              0.000129 syntax region  jsTernaryIf                    matchgroup=jsTernaryIfOperator   start=/?:\@!/  end=/\%(:\|}\@=\)/  contains=@jsExpression extend skipwhite skipempty nextgroup=@jsExpression
                            " These must occur here or they will be override by jsTernaryIf
    6              0.000079 syntax match   jsOperator           /?\.\ze\_D/
    6              0.000076 syntax match   jsOperator           /??/ skipwhite skipempty nextgroup=@jsExpression
                            
    6              0.000135 syntax match   jsGenerator            contained /\*/ skipwhite skipempty nextgroup=jsFuncName,jsFuncArgs,jsFlowFunctionGroup
    6              0.000115 syntax match   jsFuncName             contained /\<\K\k*/ skipwhite skipempty nextgroup=jsFuncArgs,jsFlowFunctionGroup
    6              0.000107 syntax region  jsFuncArgExpression    contained matchgroup=jsFuncArgOperator start=/=/ end=/[,)]\@=/ contains=@jsExpression extend
    6              0.000045 syntax match   jsFuncArgCommas        contained ','
    6              0.000053 syntax keyword jsArguments            contained arguments
    6              0.000069 syntax keyword jsForAwait             contained await skipwhite skipempty nextgroup=jsParenRepeat
                            
                            " Matches a single keyword argument with no parens
    6              0.000157 syntax match   jsArrowFuncArgs  /\<\K\k*\ze\s*=>/ skipwhite contains=jsFuncArgs skipwhite skipempty nextgroup=jsArrowFunction extend
                            " Matches a series of arguments surrounded in parens
    6              0.000172 syntax match   jsArrowFuncArgs  /([^()]*)\ze\s*=>/ contains=jsFuncArgs skipempty skipwhite nextgroup=jsArrowFunction extend
                            
    6              0.000320 exe 'syntax match jsFunction /\<function\>/      skipwhite skipempty nextgroup=jsGenerator,jsFuncName,jsFuncArgs,jsFlowFunctionGroup skipwhite '.(exists('g:javascript_conceal_function') ? 'conceal cchar='.g:javascript_conceal_function : '')
    6              0.000213 exe 'syntax match jsArrowFunction /=>/           skipwhite skipempty nextgroup=jsFuncBlock,jsCommentFunction '.(exists('g:javascript_conceal_arrow_function') ? 'conceal cchar='.g:javascript_conceal_arrow_function : '')
    6              0.000178 exe 'syntax match jsArrowFunction /()\ze\s*=>/   skipwhite skipempty nextgroup=jsArrowFunction '.(exists('g:javascript_conceal_noarg_arrow_function') ? 'conceal cchar='.g:javascript_conceal_noarg_arrow_function : '')
    6              0.000169 exe 'syntax match jsArrowFunction /_\ze\s*=>/    skipwhite skipempty nextgroup=jsArrowFunction '.(exists('g:javascript_conceal_underscore_arrow_function') ? 'conceal cchar='.g:javascript_conceal_underscore_arrow_function : '')
                            
                            " Classes
    6              0.000087 syntax keyword jsClassKeyword           contained class
    6              0.000095 syntax keyword jsExtendsKeyword         contained extends skipwhite skipempty nextgroup=@jsExpression
    6              0.000054 syntax match   jsClassNoise             contained /\./
    6              0.000136 syntax match   jsClassFuncName          contained /\<\K\k*\ze\s*[(<]/ skipwhite skipempty nextgroup=jsFuncArgs,jsFlowClassFunctionGroup
    6              0.000188 syntax match   jsClassMethodType        contained /\<\%([gs]et\|static\)\ze\s\+\K\k*/ skipwhite skipempty nextgroup=jsAsyncKeyword,jsClassFuncName,jsClassProperty
    6              0.000438 syntax region  jsClassDefinition                  start=/\<class\>/ end=/\(\<extends\>\s\+\)\@<!{\@=/ contains=jsClassKeyword,jsExtendsKeyword,jsClassNoise,@jsExpression,jsFlowClassGroup skipwhite skipempty nextgroup=jsCommentClass,jsClassBlock,jsFlowClassGroup
    6              0.000119 syntax match   jsClassProperty          contained /\<\K\k*\ze\s*[=;]/ skipwhite skipempty nextgroup=jsClassValue,jsFlowClassDef
    6              0.000093 syntax region  jsClassValue             contained start=/=/ end=/\_[;}]\@=/ contains=@jsExpression
    6              0.000168 syntax region  jsClassPropertyComputed  contained matchgroup=jsBrackets start=/\[/ end=/]/ contains=@jsExpression skipwhite skipempty nextgroup=jsFuncArgs,jsClassValue extend
    6              0.000190 syntax region  jsClassStringKey         contained start=+\z(["']\)+  skip=+\\\%(\z1\|$\)+  end=+\z1\|$+  contains=jsSpecial extend skipwhite skipempty nextgroup=jsFuncArgs
                            
                            " Destructuring
    6              0.000051 syntax match   jsDestructuringPropertyValue     contained /\k\+/
    6              0.000084 syntax match   jsDestructuringProperty          contained /\k\+\ze\s*=/ skipwhite skipempty nextgroup=jsDestructuringValue
    6              0.000083 syntax match   jsDestructuringAssignment        contained /\k\+\ze\s*:/ skipwhite skipempty nextgroup=jsDestructuringValueAssignment
    6              0.000102 syntax region  jsDestructuringValue             contained start=/=/ end=/[,}\]]\@=/ contains=@jsExpression extend
    6              0.000232 syntax region  jsDestructuringValueAssignment   contained start=/:/ end=/[,}=]\@=/ contains=jsDestructuringPropertyValue,jsDestructuringBlock,jsNoise,jsDestructuringNoise skipwhite skipempty nextgroup=jsDestructuringValue extend
    6              0.000058 syntax match   jsDestructuringNoise             contained /[,[\]]/
    6              0.000172 syntax region  jsDestructuringPropertyComputed  contained matchgroup=jsDestructuringBraces start=/\[/ end=/]/ contains=@jsExpression skipwhite skipempty nextgroup=jsDestructuringValue,jsDestructuringValueAssignment,jsDestructuringNoise extend fold
                            
                            " Comments
    6              0.000138 syntax keyword jsCommentTodo    contained TODO FIXME XXX TBD NOTE
    6              0.000133 syntax region  jsComment        start=+//+ end=/$/ contains=jsCommentTodo,@Spell extend keepend
    6              0.000130 syntax region  jsComment        start=+/\*+  end=+\*/+ contains=jsCommentTodo,@Spell fold extend keepend
    6              0.000082 syntax region  jsEnvComment     start=/\%^#!/ end=/$/ display
                            
                            " Specialized Comments - These are special comment regexes that are used in
                            " odd places that maintain the proper nextgroup functionality. It sucks we
                            " can't make jsComment a skippable type of group for nextgroup
    6              0.000188 syntax region  jsCommentFunction    contained start=+//+ end=/$/    contains=jsCommentTodo,@Spell skipwhite skipempty nextgroup=jsFuncBlock,jsFlowReturn extend keepend
    6              0.000183 syntax region  jsCommentFunction    contained start=+/\*+ end=+\*/+ contains=jsCommentTodo,@Spell skipwhite skipempty nextgroup=jsFuncBlock,jsFlowReturn fold extend keepend
    6              0.000167 syntax region  jsCommentClass       contained start=+//+ end=/$/    contains=jsCommentTodo,@Spell skipwhite skipempty nextgroup=jsClassBlock,jsFlowClassGroup extend keepend
    6              0.000174 syntax region  jsCommentClass       contained start=+/\*+ end=+\*/+ contains=jsCommentTodo,@Spell skipwhite skipempty nextgroup=jsClassBlock,jsFlowClassGroup fold extend keepend
    6              0.000153 syntax region  jsCommentIfElse      contained start=+//+ end=/$/    contains=jsCommentTodo,@Spell skipwhite skipempty nextgroup=jsIfElseBlock extend keepend
    6              0.000148 syntax region  jsCommentIfElse      contained start=+/\*+ end=+\*/+ contains=jsCommentTodo,@Spell skipwhite skipempty nextgroup=jsIfElseBlock fold extend keepend
    6              0.000141 syntax region  jsCommentRepeat      contained start=+//+ end=/$/    contains=jsCommentTodo,@Spell skipwhite skipempty nextgroup=jsRepeatBlock extend keepend
    6              0.000133 syntax region  jsCommentRepeat      contained start=+/\*+ end=+\*/+ contains=jsCommentTodo,@Spell skipwhite skipempty nextgroup=jsRepeatBlock fold extend keepend
                            
                            " Decorators
    6              0.000098 syntax match   jsDecorator                    /^\s*@/ nextgroup=jsDecoratorFunction
    6              0.000106 syntax match   jsDecoratorFunction  contained /\h[a-zA-Z0-9_.]*/ nextgroup=jsParenDecorator
                            
    6              0.000041 if exists("javascript_plugin_jsdoc")
                              runtime extras/jsdoc.vim
                              " NGDoc requires JSDoc
                              if exists("javascript_plugin_ngdoc")
                                runtime extras/ngdoc.vim
                              endif
    6              0.000008 endif
                            
    6              0.000028 if exists("javascript_plugin_flow")
                              runtime extras/flow.vim
    6              0.000007 endif
                            
    6              0.001655 syntax cluster jsExpression  contains=jsBracket,jsParen,jsObject,jsTernaryIf,jsTaggedTemplate,jsTemplateString,jsString,jsRegexpString,jsNumber,jsFloat,jsOperator,jsOperatorKeyword,jsBooleanTrue,jsBooleanFalse,jsNull,jsFunction,jsArrowFunction,jsGlobalObjects,jsExceptions,jsFutureKeys,jsDomErrNo,jsDomNodeConsts,jsHtmlEvents,jsFuncCall,jsUndefined,jsNan,jsPrototype,jsBuiltins,jsNoise,jsClassDefinition,jsArrowFunction,jsArrowFuncArgs,jsParensError,jsComment,jsArguments,jsThis,jsSuper,jsDo,jsForAwait,jsAsyncKeyword,jsStatement,jsDot
    6              0.000304 syntax cluster jsAll         contains=@jsExpression,jsStorageClass,jsConditional,jsRepeat,jsReturn,jsException,jsTry,jsNoise,jsBlockLabel
                            
                            " Define the default highlighting.
                            " For version 5.7 and earlier: only when not done already
                            " For version 5.8 and later: only when an item doesn't have highlighting yet
    6              0.000033 if version >= 508 || !exists("did_javascript_syn_inits")
    6              0.000017   if version < 508
                                let did_javascript_syn_inits = 1
                                command -nargs=+ HiLink hi link <args>
    6              0.000010   else
    6              0.000130     command -nargs=+ HiLink hi def link <args>
    6              0.000010   endif
    6              0.000140   HiLink jsComment              Comment
    6              0.000111   HiLink jsEnvComment           PreProc
    6              0.000102   HiLink jsParensIfElse         jsParens
    6              0.000091   HiLink jsParensRepeat         jsParens
    6              0.000088   HiLink jsParensSwitch         jsParens
    6              0.000087   HiLink jsParensCatch          jsParens
    6              0.000091   HiLink jsCommentTodo          Todo
    6              0.000110   HiLink jsString               String
    6              0.000106   HiLink jsObjectKeyString      String
    6              0.000106   HiLink jsTemplateString       String
    6              0.000104   HiLink jsObjectStringKey      String
    6              0.000103   HiLink jsClassStringKey       String
    6              0.000103   HiLink jsTaggedTemplate       StorageClass
    6              0.000102   HiLink jsTernaryIfOperator    Operator
    6              0.000106   HiLink jsRegexpString         String
    6              0.000109   HiLink jsRegexpBoundary       SpecialChar
    6              0.000106   HiLink jsRegexpQuantifier     SpecialChar
    6              0.000105   HiLink jsRegexpOr             Conditional
    6              0.000104   HiLink jsRegexpMod            SpecialChar
    6              0.000106   HiLink jsRegexpBackRef        SpecialChar
    6              0.000077   HiLink jsRegexpGroup          jsRegexpString
    6              0.000096   HiLink jsRegexpCharClass      Character
    6              0.000097   HiLink jsCharacter            Character
    6              0.000101   HiLink jsPrototype            Special
    6              0.000105   HiLink jsConditional          Conditional
    6              0.000097   HiLink jsBranch               Conditional
    6              0.000094   HiLink jsLabel                Label
    6              0.000099   HiLink jsReturn               Statement
    6              0.000178   HiLink jsRepeat               Repeat
    6              0.000098   HiLink jsDo                   Repeat
    6              0.000099   HiLink jsStatement            Statement
    6              0.000094   HiLink jsException            Exception
    6              0.000119   HiLink jsTry                  Exception
    6              0.000108   HiLink jsFinally              Exception
    6              0.000105   HiLink jsCatch                Exception
    6              0.000104   HiLink jsAsyncKeyword         Keyword
    6              0.000099   HiLink jsForAwait             Keyword
    6              0.000101   HiLink jsArrowFunction        Type
    6              0.000124   HiLink jsFunction             Type
    6              0.000100   HiLink jsGenerator            jsFunction
    6              0.000072   HiLink jsArrowFuncArgs        jsFuncArgs
    6              0.000083   HiLink jsFuncName             Function
    6              0.000101   HiLink jsFuncCall             Function
    6              0.000078   HiLink jsClassFuncName        jsFuncName
    6              0.000090   HiLink jsObjectFuncName       Function
    6              0.000093   HiLink jsArguments            Special
    6              0.000096   HiLink jsError                Error
    6              0.000102   HiLink jsParensError          Error
    6              0.000079   HiLink jsOperatorKeyword      jsOperator
    6              0.000097   HiLink jsOperator             Operator
    6              0.000098   HiLink jsOf                   Operator
    6              0.000103   HiLink jsStorageClass         StorageClass
    6              0.000114   HiLink jsClassKeyword         Keyword
    6              0.000110   HiLink jsExtendsKeyword       Keyword
    6              0.000096   HiLink jsThis                 Special
    6              0.000101   HiLink jsSuper                Constant
    6              0.000100   HiLink jsNan                  Number
    6              0.000118   HiLink jsNull                 Type
    6              0.000117   HiLink jsUndefined            Type
    6              0.000102   HiLink jsNumber               Number
    6              0.000098   HiLink jsFloat                Float
    6              0.000097   HiLink jsBooleanTrue          Boolean
    6              0.000096   HiLink jsBooleanFalse         Boolean
    6              0.000077   HiLink jsObjectColon          jsNoise
    6              0.000061   HiLink jsNoise                Noise
    6              0.000063   HiLink jsDot                  Noise
    6              0.000061   HiLink jsBrackets             Noise
    6              0.000082   HiLink jsParens               Noise
    6              0.000057   HiLink jsBraces               Noise
    6              0.000057   HiLink jsFuncBraces           Noise
    6              0.000082   HiLink jsFuncParens           Noise
    6              0.000060   HiLink jsClassBraces          Noise
    6              0.000055   HiLink jsClassNoise           Noise
    6              0.000057   HiLink jsIfElseBraces         Noise
    6              0.000056   HiLink jsTryCatchBraces       Noise
    6              0.000056   HiLink jsModuleBraces         Noise
    6              0.000056   HiLink jsObjectBraces         Noise
    6              0.000061   HiLink jsObjectSeparator      Noise
    6              0.000056   HiLink jsFinallyBraces        Noise
    6              0.000055   HiLink jsRepeatBraces         Noise
    6              0.000055   HiLink jsSwitchBraces         Noise
    6              0.000092   HiLink jsSpecial              Special
    6              0.000089   HiLink jsTemplateBraces       Noise
    6              0.000109   HiLink jsGlobalObjects        Constant
    6              0.000118   HiLink jsGlobalNodeObjects    Constant
    6              0.000100   HiLink jsExceptions           Constant
    6              0.000108   HiLink jsBuiltins             Constant
    6              0.000096   HiLink jsImport               Include
    6              0.000096   HiLink jsExport               Include
    6              0.000115   HiLink jsExportDefault        StorageClass
    6              0.000095   HiLink jsExportDefaultGroup   jsExportDefault
    6              0.000090   HiLink jsModuleAs             Include
    6              0.000075   HiLink jsModuleComma          jsNoise
    6              0.000062   HiLink jsModuleAsterisk       Noise
    6              0.000090   HiLink jsFrom                 Include
    6              0.000100   HiLink jsDecorator            Special
    6              0.000094   HiLink jsDecoratorFunction    Function
    6              0.000094   HiLink jsParensDecorator      jsParens
    6              0.000072   HiLink jsFuncArgOperator      jsFuncArgs
    6              0.000068   HiLink jsClassProperty        jsObjectKey
    6              0.000069   HiLink jsObjectShorthandProp  jsObjectKey
    6              0.000089   HiLink jsSpreadOperator       Operator
    6              0.000099   HiLink jsRestOperator         Operator
    6              0.000076   HiLink jsRestExpression       jsFuncArgs
    6              0.000060   HiLink jsSwitchColon          Noise
    6              0.000097   HiLink jsClassMethodType      Type
    6              0.000104   HiLink jsObjectMethodType     Type
    6              0.000096   HiLink jsClassDefinition      jsFuncName
    6              0.000092   HiLink jsBlockLabel           Identifier
    6              0.000073   HiLink jsBlockLabelKey        jsBlockLabel
                            
    6              0.000066   HiLink jsDestructuringBraces     Noise
    6              0.000071   HiLink jsDestructuringProperty   jsFuncArgs
    6              0.000068   HiLink jsDestructuringAssignment jsObjectKey
    6              0.000057   HiLink jsDestructuringNoise      Noise
                            
    6              0.000066   HiLink jsCommentFunction      jsComment
    6              0.000065   HiLink jsCommentClass         jsComment
    6              0.000069   HiLink jsCommentIfElse        jsComment
    6              0.000066   HiLink jsCommentRepeat        jsComment
                            
    6              0.000098   HiLink jsDomErrNo             Constant
    6              0.000102   HiLink jsDomNodeConsts        Constant
    6              0.000091   HiLink jsDomElemAttrs         Label
    6              0.000091   HiLink jsDomElemFuncs         PreProc
                            
    6              0.000095   HiLink jsHtmlEvents           Special
    6              0.000091   HiLink jsHtmlElemAttrs        Label
    6              0.000090   HiLink jsHtmlElemFuncs        PreProc
                            
    6              0.000087   HiLink jsCssStyles            Label
                            
    6              0.000019   delcommand HiLink
    6              0.000008 endif
                            
                            " Define the htmlJavaScript for HTML syntax html.vim
    6              0.000134 syntax cluster  htmlJavaScript       contains=@jsAll,jsImport,jsExport
    6              0.000047 syntax cluster  javaScriptExpression contains=@jsAll
                            
                            " Vim's default html.vim highlights all javascript as 'Special'
    6              0.000031 hi! def link javaScript              NONE
                            
    6              0.000037 let b:current_syntax = "javascript"
    6              0.000027 if main_syntax == 'javascript'
                              unlet main_syntax
    6              0.000098 endif

SCRIPT  C:\Neovim\share\nvim\runtime\syntax\javascript.vim
Sourced 6 times
Total time:   0.000487
 Self time:   0.000487

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	JavaScript
                            " Maintainer:	Claudio Fleiner <claudio@fleiner.com>
                            " Updaters:	Scott Shattuck (ss) <ss@technicalpursuit.com>
                            " URL:		http://www.fleiner.com/vim/syntax/javascript.vim
                            " Changes:	(ss) added keywords, reserved words, and other identifiers
                            "		(ss) repaired several quoting and grouping glitches
                            "		(ss) fixed regex parsing issue with multiple qualifiers [gi]
                            "		(ss) additional factoring of keywords, globals, and members
                            " Last Change:	2021 Mar 30
                            " 		2013 Jun 12: adjusted javaScriptRegexpString (Kevin Locke)
                            " 		2018 Apr 14: adjusted javaScriptRegexpString (LongJohnCoder)
                            
                            " tuning parameters:
                            " unlet javaScript_fold
                            
    6              0.000068 if !exists("main_syntax")
                              " quit when a syntax file was already loaded
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'javascript'
    6              0.000047 elseif exists("b:current_syntax") && b:current_syntax == "javascript"
    6              0.000012   finish
                            endif
                            
                            let s:cpo_save = &cpo
                            set cpo&vim
                            
                            
                            syn keyword javaScriptCommentTodo      TODO FIXME XXX TBD contained
                            syn match   javaScriptLineComment      "\/\/.*" contains=@Spell,javaScriptCommentTodo
                            syn match   javaScriptCommentSkip      "^[ \t]*\*\($\|[ \t]\+\)"
                            syn region  javaScriptComment	       start="/\*"  end="\*/" contains=@Spell,javaScriptCommentTodo
                            syn match   javaScriptSpecial	       "\\\d\d\d\|\\."
                            syn region  javaScriptStringD	       start=+"+  skip=+\\\\\|\\"+  end=+"\|$+	contains=javaScriptSpecial,@htmlPreproc
                            syn region  javaScriptStringS	       start=+'+  skip=+\\\\\|\\'+  end=+'\|$+	contains=javaScriptSpecial,@htmlPreproc
                            syn region  javaScriptStringT	       start=+`+  skip=+\\\\\|\\`+  end=+`+	contains=javaScriptSpecial,javaScriptEmbed,@htmlPreproc
                            
                            syn region  javaScriptEmbed	       start=+${+  end=+}+	contains=@javaScriptEmbededExpr
                            
                            syn match   javaScriptSpecialCharacter "'\\.'"
                            syn match   javaScriptNumber	       "-\=\<\d\+L\=\>\|0[xX][0-9a-fA-F]\+\>"
                            syn match   javaScriptNumber	       "-\=\<\d\+\%(_\d\+\)*\>"
                            syn region  javaScriptRegexpString     start=+[,(=+]\s*/[^/*]+ms=e-1,me=e-1 skip=+\\\\\|\\/+ end=+/[gimuys]\{0,2\}\s*$+ end=+/[gimuys]\{0,2\}\s*[+;.,)\]}]+me=e-1 end=+/[gimuys]\{0,2\}\s\+\/+me=e-1 contains=@htmlPreproc,javaScriptComment oneline
                            
                            syn keyword javaScriptConditional	if else switch
                            syn keyword javaScriptRepeat		while for do in
                            syn keyword javaScriptBranch		break continue
                            syn keyword javaScriptOperator		new delete instanceof typeof
                            syn keyword javaScriptType		Array Boolean Date Function Number Object String RegExp
                            syn keyword javaScriptStatement		return with await
                            syn keyword javaScriptBoolean		true false
                            syn keyword javaScriptNull		null undefined
                            syn keyword javaScriptIdentifier	arguments this var let
                            syn keyword javaScriptLabel		case default
                            syn keyword javaScriptException		try catch finally throw
                            syn keyword javaScriptMessage		alert confirm prompt status
                            syn keyword javaScriptGlobal		self window top parent
                            syn keyword javaScriptMember		document event location 
                            syn keyword javaScriptDeprecated	escape unescape
                            syn keyword javaScriptReserved		abstract boolean byte char class const debugger double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile async
                            
                            syn cluster  javaScriptEmbededExpr	contains=javaScriptBoolean,javaScriptNull,javaScriptIdentifier,javaScriptStringD,javaScriptStringS,javaScriptStringT
                            
                            if exists("javaScript_fold")
                                syn match	javaScriptFunction	"\<function\>"
                                syn region	javaScriptFunctionFold	start="\<function\>.*[^};]$" end="^\z1}.*$" transparent fold keepend
                            
                                syn sync match javaScriptSync	grouphere javaScriptFunctionFold "\<function\>"
                                syn sync match javaScriptSync	grouphere NONE "^}"
                            
                                setlocal foldmethod=syntax
                                setlocal foldtext=getline(v:foldstart)
                            else
                                syn keyword javaScriptFunction	function
                                syn match	javaScriptBraces	   "[{}\[\]]"
                                syn match	javaScriptParens	   "[()]"
                            endif
                            
                            if main_syntax == "javascript"
                              syn sync fromstart
                              syn sync maxlines=100
                            
                              syn sync ccomment javaScriptComment
                            endif
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            hi def link javaScriptComment		Comment
                            hi def link javaScriptLineComment		Comment
                            hi def link javaScriptCommentTodo		Todo
                            hi def link javaScriptSpecial		Special
                            hi def link javaScriptStringS		String
                            hi def link javaScriptStringD		String
                            hi def link javaScriptStringT		String
                            hi def link javaScriptCharacter		Character
                            hi def link javaScriptSpecialCharacter	javaScriptSpecial
                            hi def link javaScriptNumber		javaScriptValue
                            hi def link javaScriptConditional		Conditional
                            hi def link javaScriptRepeat		Repeat
                            hi def link javaScriptBranch		Conditional
                            hi def link javaScriptOperator		Operator
                            hi def link javaScriptType			Type
                            hi def link javaScriptStatement		Statement
                            hi def link javaScriptFunction		Function
                            hi def link javaScriptBraces		Function
                            hi def link javaScriptError		Error
                            hi def link javaScrParenError		javaScriptError
                            hi def link javaScriptNull			Keyword
                            hi def link javaScriptBoolean		Boolean
                            hi def link javaScriptRegexpString		String
                            
                            hi def link javaScriptIdentifier		Identifier
                            hi def link javaScriptLabel		Label
                            hi def link javaScriptException		Exception
                            hi def link javaScriptMessage		Keyword
                            hi def link javaScriptGlobal		Keyword
                            hi def link javaScriptMember		Keyword
                            hi def link javaScriptDeprecated		Exception 
                            hi def link javaScriptReserved		Keyword
                            hi def link javaScriptDebug		Debug
                            hi def link javaScriptConstant		Label
                            hi def link javaScriptEmbed		Special
                            
                            
                            
                            let b:current_syntax = "javascript"
                            if main_syntax == 'javascript'
                              unlet main_syntax
                            endif
                            let &cpo = s:cpo_save
                            unlet s:cpo_save
                            
                            " vim: ts=8

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\after\syntax\javascript.vim
Sourced 6 times
Total time:   0.029735
 Self time:   0.003383

count  total (s)   self (s)
    6   0.000867   0.000587 if polyglot#init#is_disabled(expand('<sfile>:p'), 'jsx', 'after/syntax/javascript.vim')
                              finish
    6              0.000009 endif
                            
    6              0.000044 if get(g:, 'vim_jsx_pretty_disable_js', 0)
                              finish
    6              0.000007 endif
                            
    6   0.028569   0.002498 source <sfile>:h/jsx.vim

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\after\syntax/jsx.vim
Sourced 6 times
Total time:   0.025652
 Self time:   0.017934

count  total (s)   self (s)
    6   0.000794   0.000558 if polyglot#init#is_disabled(expand('<sfile>:p'), 'jsx', 'after/syntax/jsx.vim')
                              finish
    6              0.000008 endif
                            
                            """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                            " Vim syntax file
                            "
                            " Language: javascript.jsx
                            " Maintainer: MaxMellon <maxmellon1994@gmail.com>
                            "
                            """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                            
    6              0.000069 let s:jsx_cpo = &cpo
    6              0.000081 set cpo&vim
                            
    6              0.000022 syntax case match
                            
    6              0.000034 if exists('b:current_syntax')
    6              0.000028   let s:current_syntax = b:current_syntax
    6              0.000022   unlet b:current_syntax
    6              0.000007 endif
                            
    6              0.000026 if exists('s:current_syntax')
    6              0.000022   let b:current_syntax = s:current_syntax
    6              0.000006 endif
                            
    6              0.000163 if hlexists("jsDebugger") || hlexists("jsNoise")    " yuezk/vim-js or pangloss/vim-javascript
    6              0.000116   syntax cluster jsExpression add=jsxRegion
                            elseif hlexists("javascriptOpSymbols")    " othree/yajs.vim
                              " refine the javascript line comment
                              syntax region javascriptLineComment start=+//+ end=/$/ contains=@Spell,javascriptCommentTodo extend keepend
                              syntax cluster javascriptValue add=jsxRegion
                              syntax cluster javascriptNoReserved add=jsxElement,jsxTag
                            else    " build-in javascript syntax
                              " refine the javascript line comment
                              syntax region javaScriptLineComment start=+//+ end=/$/ contains=@Spell,javascriptCommentTodo extend keepend
                            
                              " refine the template string syntax
                              syntax region javaScriptEmbed matchgroup=javaScriptEmbedBraces start=+\${+ end=+}+ contained contains=@javaScriptEmbededExpr
                            
                              " add a javaScriptBlock group for build-in syntax
                              syntax region javaScriptBlock
                                    \ matchgroup=javaScriptBraces
                                    \ start="{"
                                    \ end="}"
                                    \ contained
                                    \ extend
                                    \ contains=javaScriptBlock,@javaScriptEmbededExpr,javaScript.*
                                    \ fold
                            
                              syntax cluster javaScriptEmbededExpr add=jsxRegion,javaScript.*
    6              0.000009 endif
                            
    6   0.015881   0.008400 runtime syntax/jsx_pretty.vim
                            
    6              0.000029 let b:current_syntax = 'javascript.jsx'
                            
    6              0.000089 let &cpo = s:jsx_cpo
    6              0.000094 unlet s:jsx_cpo

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\after\syntax\jsx_pretty.vim
Sourced 6 times
Total time:   0.007045
 Self time:   0.006790

count  total (s)   self (s)
    6   0.000837   0.000582 if polyglot#init#is_disabled(expand('<sfile>:p'), 'jsx', 'after/syntax/jsx_pretty.vim')
                              finish
    6              0.000007 endif
                            
    6              0.000052 let s:highlight_close_tag = get(g:, 'vim_jsx_pretty_highlight_close_tag', 0)
                            
                            " detect jsx region
    6              0.000401 syntax region jsxRegion
                                  \ start=+\%(\%(\_[([,?:=+\-*/>{}]\|<\s\+\|&&\|||\|=>\|\<return\|\<default\|\<await\|\<yield\)\_s*\)\@<=<\_s*\%(>\|\z(\%(script\|\s*\<T\>\)\@!\<[_$A-Za-z][-:._$A-Za-z0-9]*\>\)\%(\_s*\%([-+*)\]}&|?,]\|/\%([/*]\|\_s*>\)\@!\)\)\@!\)+
                                  \ end=++
                                  \ contains=jsxElement
                            
                            " <tag id="sample">
                            " ~~~~~~~~~~~~~~~~~
                            " and self close tag
                            " <tag id="sample"   />
                            " ~~~~~~~~~~~~~~~~~~~
    6              0.000453 syntax region jsxTag
                                  \ start=+<+
                                  \ matchgroup=jsxOpenPunct
                                  \ end=+>+
                                  \ matchgroup=NONE
                                  \ end=+\%(/\_s*>\)\@=+
                                  \ contained
                                  \ contains=jsxOpenTag,jsxAttrib,jsxExpressionBlock,jsxSpreadOperator,jsComment,@javascriptComments,javaScriptLineComment,javaScriptComment,typescriptLineComment,typescriptComment
                                  \ keepend
                                  \ extend
                                  \ skipwhite
                                  \ skipempty
                                  \ nextgroup=jsxCloseString
                            
                            " <tag></tag>
                            " ~~~~~~~~~~~
                            " and fragment
                            " <></>
                            " ~~~~~
                            " and self close tag
                            " <tag />
                            " ~~~~~~~
    6              0.000329 syntax region jsxElement
                                  \ start=+<\_s*\%(>\|\${\|\z(\<[-:._$A-Za-z0-9]\+\>\)\)+
                                  \ end=+/\_s*>+
                                  \ end=+<\_s*/\_s*\z1\_s*>+
                                  \ contains=jsxElement,jsxTag,jsxExpressionBlock,jsxComment,jsxCloseTag,@Spell
                                  \ keepend
                                  \ extend
                                  \ contained
                                  \ fold
                            
                            " <tag key={this.props.key}>
                            " ~~~~
                            " and fragment start tag
                            " <>
                            " ~~
    6              0.000255 exe 'syntax region jsxOpenTag
                                  \ matchgroup=jsxOpenPunct
                                  \ start=+<+
                                  \ end=+>+
                                  \ matchgroup=NONE
                                  \ end=+\>+
                                  \ contained
                                  \ contains=jsxTagName
                                  \ nextgroup=jsxAttrib
                                  \ skipwhite
                                  \ skipempty
                                  \ ' .(s:highlight_close_tag ? 'transparent' : '')
                            
                            
                            " <tag key={this.props.key}>
                            "          ~~~~~~~~~~~~~~~~
    6              0.000371 syntax region jsxExpressionBlock
                                  \ matchgroup=jsxBraces
                                  \ start=+{+
                                  \ end=+}+
                                  \ contained
                                  \ extend
                                  \ contains=@jsExpression,jsSpreadExpression,@javascriptExpression,javascriptSpreadOp,@javaScriptEmbededExpr,@typescriptExpression,typescriptObjectSpread,jsComment,@javascriptComments,javaScriptLineComment,javaScriptComment,typescriptLineComment,typescriptComment
                            
                            " <foo.bar>
                            "     ~
    6              0.000048 syntax match jsxDot +\.+ contained
                            
                            " <foo:bar>
                            "     ~
    6              0.000037 syntax match jsxNamespace +:+ contained
                            
                            " <tag id="sample">
                            "        ~
    6              0.000125 syntax match jsxEqual +=+ contained skipwhite skipempty nextgroup=jsxString,jsxExpressionBlock,jsxRegion
                            
                            " <tag />
                            "      ~~
    6              0.000051 syntax match jsxCloseString +/\_s*>+ contained
                            
                            " </tag>
                            " ~~~~~~
                            " and fragment close tag
                            " </>
                            " ~~~
    6              0.000117 syntax region jsxCloseTag
                                  \ matchgroup=jsxClosePunct
                                  \ start=+<\_s*/+
                                  \ end=+>+
                                  \ contained
                                  \ contains=jsxTagName
                            
                            " <tag key={this.props.key}>
                            "      ~~~
    6              0.000152 syntax match jsxAttrib
                                  \ +\<[_$A-Za-z][-:_$A-Za-z0-9]*\>+
                                  \ contained
                                  \ nextgroup=jsxEqual
                                  \ skipwhite
                                  \ skipempty
                                  \ contains=jsxAttribKeyword,jsxNamespace
                            
                            " <MyComponent ...>
                            "  ~~~~~~~~~~~
                            " NOT
                            " <someCamel ...>
                            "      ~~~~~
    6              0.000123 exe 'syntax match jsxComponentName
                                  \ +\<[_$]\?[A-Z][-_$A-Za-z0-9]*\>+
                                  \ contained
                                  \ ' .(s:highlight_close_tag ? 'transparent' : '')
                            
                            " <tag key={this.props.key}>
                            "  ~~~
    6              0.000242 exe 'syntax match jsxTagName
                                  \ +\<[-:._$A-Za-z0-9]\+\>+
                                  \ contained
                                  \ contains=jsxComponentName,jsxDot,jsxNamespace
                                  \ nextgroup=jsxAttrib
                                  \ skipempty
                                  \ skipwhite
                                  \ ' .(s:highlight_close_tag ? 'transparent' : '')
                            
                            " <tag id="sample">
                            "         ~~~~~~~~
                            " and
                            " <tag id='sample'>
                            "         ~~~~~~~~
    6              0.000135 syntax region jsxString start=+\z(["']\)+  skip=+\\\\\|\\\z1\|\\\n+  end=+\z1+ extend contained contains=@Spell
                            
    6              0.000073 let s:tags = get(g:, 'vim_jsx_pretty_template_tags', ['html', 'jsx'])
    6              0.000036 let s:enable_tagged_jsx = !empty(s:tags)
                            
                            " add support to JSX inside the tagged template string
                            " https://github.com/developit/htm
    6              0.000029 if s:enable_tagged_jsx
    6              0.000290   exe 'syntax match jsxRegion +\%(' . join(s:tags, '\|') . '\)\%(\_s*`\)\@=+ contains=jsTemplateStringTag,jsTaggedTemplate,javascriptTagRef skipwhite skipempty nextgroup=jsxTaggedRegion'
                            
    6              0.000149   syntax region jsxTaggedRegion
                                    \ matchgroup=jsxBackticks
                                    \ start=+`+
                                    \ end=+`+
                                    \ extend
                                    \ contained
                                    \ contains=jsxElement,jsxExpressionBlock
                                    \ transparent
                            
    6              0.000221   syntax region jsxExpressionBlock
                                    \ matchgroup=jsxBraces
                                    \ start=+\${+
                                    \ end=+}+
                                    \ extend
                                    \ contained
                                    \ contains=@jsExpression,jsSpreadExpression,@javascriptExpression,javascriptSpreadOp,@javaScriptEmbededExpr,@typescriptExpression,typescriptObjectSpread
                            
    6              0.000210   syntax region jsxOpenTag
                                    \ matchgroup=jsxOpenPunct
                                    \ start=+<\%(\${\)\@=+
                                    \ matchgroup=NONE
                                    \ end=+}\@1<=+
                                    \ contained
                                    \ contains=jsxExpressionBlock
                                    \ skipwhite
                                    \ skipempty
                                    \ nextgroup=jsxAttrib,jsxSpreadOperator
                            
    6              0.000033   syntax keyword jsxAttribKeyword class contained
                            
    6              0.000066   syntax match jsxSpreadOperator +\.\.\.+ contained nextgroup=jsxExpressionBlock skipwhite
                            
    6              0.000042   syntax match jsxCloseTag +<//>+ contained
                            
    6              0.000063   syntax match jsxComment +<!--\_.\{-}-->+
    6              0.000009 endif
                            
                            " Highlight the tag name
    6              0.000082 highlight def link jsxTag Function
    6              0.000073 highlight def link jsxTagName Identifier
    6              0.000062 highlight def link jsxComponentName Function
                            
    6              0.000071 highlight def link jsxAttrib Type
    6              0.000034 highlight def link jsxAttribKeyword jsxAttrib
    6              0.000065 highlight def link jsxString String
    6              0.000071 highlight def link jsxComment Comment
                            
    6              0.000068 highlight def link jsxDot Operator
    6              0.000070 highlight def link jsxNamespace Operator
    6              0.000067 highlight def link jsxEqual Operator
    6              0.000069 highlight def link jsxSpreadOperator Operator
    6              0.000064 highlight def link jsxBraces Special
                            
    6              0.000022 if s:highlight_close_tag
                              highlight def link jsxCloseString Identifier
                              highlight def link jsxOpenPunct jsxTag
    6              0.000014 else
                              " Highlight the jsxCloseString (i.e. />), jsxPunct (i.e. <,>) and jsxCloseTag (i.e. <//>)
    6              0.000073   highlight def link jsxCloseString Comment
    6              0.000032   highlight def link jsxOpenPunct jsxPunct
    6              0.000008 endif
                            
    6              0.000028 highlight def link jsxPunct jsxCloseString
    6              0.000027 highlight def link jsxClosePunct jsxPunct
    6              0.000028 highlight def link jsxCloseTag jsxCloseString
                            
    6              0.000053 let s:vim_jsx_pretty_colorful_config = get(g:, 'vim_jsx_pretty_colorful_config', 0)
                            
    6              0.000022 if s:vim_jsx_pretty_colorful_config == 1
                              highlight def link jsObjectKey Label
                              highlight def link jsArrowFuncArgs Type
                              highlight def link jsFuncArgs Type
    6              0.000104 endif

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\syntax\vb.vim
Sourced 6 times
Total time:   0.026798
 Self time:   0.026531

count  total (s)   self (s)
    6   0.000845   0.000578 if polyglot#init#is_disabled(expand('<sfile>:p'), 'visual-basic', 'syntax/vb.vim')
                              finish
    6              0.000008 endif
                            
                            " Vim syntax file
                            " Language:	Visual Basic
                            " Maintainer:	Tim Chase <vb.vim@tim.thechases.com>
                            " Former Maintainer:	Robert M. Cortopassi <cortopar@mindspring.com>
                            "	(tried multiple times to contact, but email bounced)
                            " Last Change:
                            "   2005 May 25  Synched with work by Thomas Barthel
                            "   2004 May 30  Added a few keywords
                            
                            " This was thrown together after seeing numerous requests on the
                            " VIM and VIM-DEV mailing lists.  It is by no means complete.
                            " Send comments, suggestions and requests to the maintainer.
                            
                            " quit when a syntax file was already loaded
    6              0.000030 if exists("b:current_syntax")
                            	finish
    6              0.000007 endif
                            
                            " VB is case insensitive
    6              0.000026 syn case ignore
                            
    6              0.000086 syn keyword vbConditional If Then ElseIf Else Select Case
                            
    6              0.000061 syn keyword vbOperator AddressOf And ByRef ByVal Eqv Imp In
    6              0.000050 syn keyword vbOperator Is Like Mod Not Or To Xor
                            
    6              0.000084 syn match vbOperator "[()+.,\-/*=&]"
    6              0.000060 syn match vbOperator "[<>]=\="
    6              0.000046 syn match vbOperator "<>"
    6              0.000048 syn match vbOperator "\s\+_$"
                            
    6              0.000037 syn keyword vbBoolean  True False
    6              0.000036 syn keyword vbConst Null Nothing
                            
    6              0.000053 syn keyword vbRepeat Do For ForEach Loop Next
    6              0.000043 syn keyword vbRepeat Step To Until Wend While
                            
    6              0.000046 syn keyword vbEvents AccessKeyPress Activate ActiveRowChanged
    6              0.000046 syn keyword vbEvents AfterAddFile AfterChangeFileName AfterCloseFile
    6              0.000041 syn keyword vbEvents AfterColEdit AfterColUpdate AfterDelete
    6              0.000042 syn keyword vbEvents AfterInsert AfterLabelEdit AfterRemoveFile
    6              0.000040 syn keyword vbEvents AfterUpdate AfterWriteFile AmbientChanged
    6              0.000041 syn keyword vbEvents ApplyChanges Associate AsyncProgress
    6              0.000041 syn keyword vbEvents AsyncReadComplete AsyncReadProgress AxisActivated
    6              0.000039 syn keyword vbEvents AxisLabelActivated AxisLabelSelected
    6              0.000042 syn keyword vbEvents AxisLabelUpdated AxisSelected AxisTitleActivated
    6              0.000041 syn keyword vbEvents AxisTitleSelected AxisTitleUpdated AxisUpdated
    6              0.000041 syn keyword vbEvents BeforeClick BeforeColEdit BeforeColUpdate
    6              0.000040 syn keyword vbEvents BeforeConnect BeforeDelete BeforeInsert
    6              0.000040 syn keyword vbEvents BeforeLabelEdit BeforeLoadFile BeforeUpdate
    6              0.000039 syn keyword vbEvents BeginRequest BeginTrans ButtonClick
    6              0.000046 syn keyword vbEvents ButtonCompleted ButtonDropDown ButtonGotFocus
    6              0.000047 syn keyword vbEvents ButtonLostFocus CallbackKeyDown Change Changed
    6              0.000053 syn keyword vbEvents ChartActivated ChartSelected ChartUpdated Click
    6              0.000052 syn keyword vbEvents Close CloseQuery CloseUp ColEdit ColResize
    6              0.000045 syn keyword vbEvents Collapse ColumnClick CommitTrans Compare
    6              0.000039 syn keyword vbEvents ConfigChageCancelled ConfigChanged
    6              0.000044 syn keyword vbEvents ConfigChangedCancelled Connect ConnectionRequest
    6              0.000038 syn keyword vbEvents CurrentRecordChanged DECommandAdded
    6              0.000039 syn keyword vbEvents DECommandPropertyChanged DECommandRemoved
    6              0.000041 syn keyword vbEvents DEConnectionAdded DEConnectionPropertyChanged
    6              0.000042 syn keyword vbEvents DEConnectionRemoved DataArrival DataChanged
    6              0.000045 syn keyword vbEvents DataUpdated DateClicked DblClick Deactivate
    6              0.000042 syn keyword vbEvents DevModeChange DeviceArrival DeviceOtherEvent
    6              0.000038 syn keyword vbEvents DeviceQueryRemove DeviceQueryRemoveFailed
    6              0.000039 syn keyword vbEvents DeviceRemoveComplete DeviceRemovePending
    6              0.000042 syn keyword vbEvents Disconnect DisplayChanged Dissociate
    6              0.000044 syn keyword vbEvents DoGetNewFileName Done DonePainting DownClick
    6              0.000049 syn keyword vbEvents DragDrop DragOver DropDown EditProperty EditQuery
    6              0.000050 syn keyword vbEvents EndRequest EnterCell EnterFocus ExitFocus Expand
    6              0.000043 syn keyword vbEvents FontChanged FootnoteActivated FootnoteSelected
    6              0.000045 syn keyword vbEvents FootnoteUpdated Format FormatSize GotFocus
    6              0.000044 syn keyword vbEvents HeadClick HeightChanged Hide InfoMessage
    6              0.000043 syn keyword vbEvents IniProperties InitProperties Initialize
    6              0.000042 syn keyword vbEvents ItemActivated ItemAdded ItemCheck ItemClick
    6              0.000041 syn keyword vbEvents ItemReloaded ItemRemoved ItemRenamed
    6              0.000048 syn keyword vbEvents ItemSeletected KeyDown KeyPress KeyUp LeaveCell
    6              0.000040 syn keyword vbEvents LegendActivated LegendSelected LegendUpdated
    6              0.000042 syn keyword vbEvents LinkClose LinkError LinkExecute LinkNotify
    6              0.000138 syn keyword vbEvents LinkOpen Load LostFocus MouseDown MouseMove
    6              0.000047 syn keyword vbEvents MouseUp NodeCheck NodeClick OLECompleteDrag
    6              0.000052 syn keyword vbEvents OLEDragDrop OLEDragOver OLEGiveFeedback OLESetData
    6              0.000047 syn keyword vbEvents OLEStartDrag ObjectEvent ObjectMove OnAddNew
    6              0.000048 syn keyword vbEvents OnComm Paint PanelClick PanelDblClick PathChange
    6              0.000041 syn keyword vbEvents PatternChange PlotActivated PlotSelected
    6              0.000046 syn keyword vbEvents PlotUpdated PointActivated PointLabelActivated
    6              0.000054 syn keyword vbEvents PointLabelSelected PointLabelUpdated PointSelected
    6              0.000040 syn keyword vbEvents PointUpdated PowerQuerySuspend PowerResume
    6              0.000040 syn keyword vbEvents PowerStatusChanged PowerSuspend ProcessTag
    6              0.000041 syn keyword vbEvents ProcessingTimeout QueryChangeConfig QueryClose
    6              0.000039 syn keyword vbEvents QueryComplete QueryCompleted QueryTimeout
    6              0.000041 syn keyword vbEvents QueryUnload ReadProperties RepeatedControlLoaded
    6              0.000036 syn keyword vbEvents RepeatedControlUnloaded Reposition
    6              0.000041 syn keyword vbEvents RequestChangeFileName RequestWriteFile Resize
    6              0.000039 syn keyword vbEvents ResultsChanged RetainedProject RollbackTrans
    6              0.000039 syn keyword vbEvents RowColChange RowCurrencyChange RowResize
    6              0.000047 syn keyword vbEvents RowStatusChanged Scroll SelChange SelectionChanged
    6              0.000041 syn keyword vbEvents SendComplete SendProgress SeriesActivated
    6              0.000045 syn keyword vbEvents SeriesSelected SeriesUpdated SettingChanged Show
    6              0.000045 syn keyword vbEvents SplitChange Start StateChanged StatusUpdate
    6              0.000045 syn keyword vbEvents SysColorsChanged Terminate TimeChanged Timer
    6              0.000040 syn keyword vbEvents TitleActivated TitleSelected TitleUpdated
    6              0.000037 syn keyword vbEvents UnboundAddData UnboundDeleteRow
    6              0.000043 syn keyword vbEvents UnboundGetRelativeBookmark UnboundReadData
    6              0.000045 syn keyword vbEvents UnboundWriteData Unformat Unload UpClick Updated
    6              0.000042 syn keyword vbEvents UserEvent Validate ValidationError
    6              0.000041 syn keyword vbEvents VisibleRecordChanged WillAssociate WillChangeData
    6              0.000037 syn keyword vbEvents WillDissociate WillExecute WillUpdateRows
    6              0.000027 syn keyword vbEvents WriteProperties
                            
                            
    6              0.000060 syn keyword vbFunction Abs Array Asc AscB AscW Atn Avg BOF CBool CByte
    6              0.000064 syn keyword vbFunction CCur CDate CDbl CInt CLng CSng CStr CVDate CVErr
    6              0.000060 syn keyword vbFunction CVar CallByName Cdec Choose Chr ChrB ChrW Command
    6              0.000059 syn keyword vbFunction Cos Count CreateObject CurDir DDB Date DateAdd
    6              0.000058 syn keyword vbFunction DateDiff DatePart DateSerial DateValue Day Dir
    6              0.000057 syn keyword vbFunction DoEvents EOF Environ Error Exp FV FileAttr
    6              0.000050 syn keyword vbFunction FileDateTime FileLen FilterFix Fix Format
    6              0.000045 syn keyword vbFunction FormatCurrency FormatDateTime FormatNumber
    6              0.000048 syn keyword vbFunction FormatPercent FreeFile GetAllStrings GetAttr
    6              0.000047 syn keyword vbFunction GetAutoServerSettings GetObject GetSetting Hex
    6              0.000052 syn keyword vbFunction Hour IIf IMEStatus IPmt InStr Input InputB
    6              0.000052 syn keyword vbFunction InputBox InstrB Int IsArray IsDate IsEmpty IsError
    6              0.000048 syn keyword vbFunction IsMissing IsNull IsNumeric IsObject Join LBound
    6              0.000053 syn keyword vbFunction LCase LOF LTrim Left LeftB Len LenB LoadPicture
    6              0.000048 syn keyword vbFunction LoadResData LoadResPicture LoadResString Loc Log
    6              0.000055 syn keyword vbFunction MIRR Max Mid MidB Min Minute Month MonthName
    6              0.000058 syn keyword vbFunction MsgBox NPV NPer Now Oct PPmt PV Partition Pmt
    6              0.000054 syn keyword vbFunction QBColor RGB RTrim Rate Replace Right RightB Rnd
    6              0.000064 syn keyword vbFunction Round SLN SYD Second Seek Sgn Shell Sin Space Spc
    6              0.000056 syn keyword vbFunction Split Sqr StDev StDevP Str StrComp StrConv
    6              0.000055 syn keyword vbFunction StrReverse String Sum Switch Tab Tan Time
    6              0.000054 syn keyword vbFunction TimeSerial TimeValue Timer Trim TypeName UBound
    6              0.000329 syn keyword vbFunction UCase Val Var VarP VarType Weekday WeekdayName
    6              0.000106 syn keyword vbFunction Year
                            
    6              0.000292 syn keyword vbMethods AboutBox Accept Activate Add AddCustom AddFile
    6              0.000218 syn keyword vbMethods AddFromFile AddFromGuid AddFromString
    6              0.000272 syn keyword vbMethods AddFromTemplate AddItem AddNew AddToAddInToolbar
    6              0.000209 syn keyword vbMethods AddToolboxProgID Append AppendAppendChunk
    6              0.000324 syn keyword vbMethods AppendChunk Arrange Assert AsyncRead BatchUpdate
    6              0.000211 syn keyword vbMethods BeginQueryEdit BeginTrans Bind BuildPath
    6              0.000231 syn keyword vbMethods CanPropertyChange Cancel CancelAsyncRead
    6              0.000359 syn keyword vbMethods CancelBatch CancelUpdate CaptureImage CellText
    6              0.000292 syn keyword vbMethods CellValue Circle Clear ClearFields ClearSel
    6              0.000289 syn keyword vbMethods ClearSelCols ClearStructure Clone Close Cls
    6              0.000232 syn keyword vbMethods ColContaining CollapseAll ColumnSize CommitTrans
    6              0.000293 syn keyword vbMethods CompactDatabase Compose Connect Copy CopyFile
    6              0.000237 syn keyword vbMethods CopyFolder CopyQueryDef Count CreateDatabase
    6              0.000239 syn keyword vbMethods CreateDragImage CreateEmbed CreateField
    6              0.000359 syn keyword vbMethods CreateFolder CreateGroup CreateIndex CreateLink
    6              0.000292 syn keyword vbMethods CreatePreparedStatement CreatePropery CreateQuery
    6              0.000292 syn keyword vbMethods CreateQueryDef CreateRelation CreateTableDef
    6              0.000280 syn keyword vbMethods CreateTextFile CreateToolWindow CreateUser
    6              0.000324 syn keyword vbMethods CreateWorkspace Customize Cut Delete
    6              0.000251 syn keyword vbMethods DeleteColumnLabels DeleteColumns DeleteFile
    6              0.000246 syn keyword vbMethods DeleteFolder DeleteLines DeleteRowLabels
    6              0.000383 syn keyword vbMethods DeleteRows DeselectAll DesignerWindow DoVerb Drag
    6              0.000460 syn keyword vbMethods Draw DriveExists Edit EditCopy EditPaste EndDoc
    6              0.000318 syn keyword vbMethods EnsureVisible EstablishConnection Execute Exists
    6              0.000336 syn keyword vbMethods Expand Export ExportReport ExtractIcon Fetch
    6              0.000392 syn keyword vbMethods FetchVerbs FileExists Files FillCache Find
    6              0.000389 syn keyword vbMethods FindFirst FindItem FindLast FindNext FindPrevious
    6              0.000251 syn keyword vbMethods FolderExists Forward GetAbsolutePathName
    6              0.000326 syn keyword vbMethods GetBaseName GetBookmark GetChunk GetClipString
    6              0.000391 syn keyword vbMethods GetData GetDrive GetDriveName GetFile GetFileName
    6              0.000327 syn keyword vbMethods GetFirstVisible GetFolder GetFormat GetHeader
    6              0.000255 syn keyword vbMethods GetLineFromChar GetNumTicks GetParentFolderName
    6              0.000252 syn keyword vbMethods GetRows GetSelectedPart GetSelection
    6              0.000252 syn keyword vbMethods GetSpecialFolder GetTempName GetText
    6              0.000329 syn keyword vbMethods GetVisibleCount GoBack GoForward Hide HitTest
    6              0.000258 syn keyword vbMethods HoldFields Idle Import InitializeLabels Insert
    6              0.000043 syn keyword vbMethods InsertColumnLabels InsertColumns InsertFile
    6              0.000041 syn keyword vbMethods InsertLines InsertObjDlg InsertRowLabels
    6              0.000051 syn keyword vbMethods InsertRows Item Keys KillDoc Layout Line Lines
    6              0.000048 syn keyword vbMethods LinkExecute LinkPoke LinkRequest LinkSend Listen
    6              0.000046 syn keyword vbMethods LoadFile LoadResData LoadResPicture LoadResString
    6              0.000040 syn keyword vbMethods LogEvent MakeCompileFile MakeCompiledFile
    6              0.000043 syn keyword vbMethods MakeReplica MoreResults Move MoveData MoveFile
    6              0.000040 syn keyword vbMethods MoveFirst MoveFolder MoveLast MoveNext
    6              0.000045 syn keyword vbMethods MovePrevious NavigateTo NewPage NewPassword
    6              0.000047 syn keyword vbMethods NextRecordset OLEDrag OnAddinsUpdate OnConnection
    6              0.000041 syn keyword vbMethods OnDisconnection OnStartupComplete Open
    6              0.000042 syn keyword vbMethods OpenAsTextStream OpenConnection OpenDatabase
    6              0.000045 syn keyword vbMethods OpenQueryDef OpenRecordset OpenResultset OpenURL
    6              0.000045 syn keyword vbMethods Overlay PSet PaintPicture PastSpecialDlg Paste
    6              0.000044 syn keyword vbMethods PeekData Play Point PopulatePartial PopupMenu
    6              0.000045 syn keyword vbMethods Print PrintForm PrintReport PropertyChanged Quit
    6              0.000039 syn keyword vbMethods Raise RandomDataFill RandomFillColumns
    6              0.000046 syn keyword vbMethods RandomFillRows ReFill Read ReadAll ReadFromFile
    6              0.000044 syn keyword vbMethods ReadLine ReadProperty Rebind Refresh RefreshLink
    6              0.000043 syn keyword vbMethods RegisterDatabase ReleaseInstance Reload Remove
    6              0.000045 syn keyword vbMethods RemoveAddInFromToolbar RemoveAll RemoveItem Render
    6              0.000045 syn keyword vbMethods RepairDatabase ReplaceLine Reply ReplyAll Requery
    6              0.000039 syn keyword vbMethods ResetCustom ResetCustomLabel ResolveName
    6              0.000041 syn keyword vbMethods RestoreToolbar Resync Rollback RollbackTrans
    6              0.000046 syn keyword vbMethods RowBookmark RowContaining RowTop Save SaveAs
    6              0.000045 syn keyword vbMethods SaveFile SaveToFile SaveToOle1File SaveToolbar
    6              0.000052 syn keyword vbMethods Scale ScaleX ScaleY Scroll SelPrint SelectAll
    6              0.000050 syn keyword vbMethods SelectPart Send SendData Set SetAutoServerSettings
    6              0.000050 syn keyword vbMethods SetData SetFocus SetOption SetSelection SetSize
    6              0.000047 syn keyword vbMethods SetText SetViewport Show ShowColor ShowFont
    6              0.000042 syn keyword vbMethods ShowHelp ShowOpen ShowPrinter ShowSave
    6              0.000123 syn keyword vbMethods ShowWhatsThis SignOff SignOn Size Skip SkipLine
    6              0.000046 syn keyword vbMethods Span Split SplitContaining StartLabelEdit
    6              0.000048 syn keyword vbMethods StartLogging Stop Synchronize Tag TextHeight
    6              0.000045 syn keyword vbMethods TextWidth ToDefaults Trace TwipsToChartPart
    6              0.000045 syn keyword vbMethods TypeByChartType URLFor Update UpdateControls
    6              0.000051 syn keyword vbMethods UpdateRecord UpdateRow Upto ValidateControls Value
    6              0.000078 syn keyword vbMethods WhatsThisMode Write WriteBlankLines WriteLine
    6              0.000040 syn keyword vbMethods WriteProperty WriteTemplate ZOrder
    6              0.000036 syn keyword vbMethods rdoCreateEnvironment rdoRegisterDataSource
                            
    6              0.000055 syn keyword vbStatement Alias AppActivate As Base Beep Begin Call ChDir
    6              0.000063 syn keyword vbStatement ChDrive Close Const Date Declare DefBool DefByte
    6              0.000056 syn keyword vbStatement DefCur DefDate DefDbl DefDec DefInt DefLng DefObj
    6              0.000057 syn keyword vbStatement DefSng DefStr DefVar Deftype DeleteSetting Dim Do
    6              0.000060 syn keyword vbStatement Each ElseIf End Enum Erase Error Event Exit
    6              0.000057 syn keyword vbStatement Explicit FileCopy For ForEach Function Get GoSub
    6              0.000056 syn keyword vbStatement GoTo Gosub Implements Kill LSet Let Lib LineInput
    6              0.000062 syn keyword vbStatement Load Lock Loop Mid MkDir Name Next On OnError Open
    6              0.000053 syn keyword vbStatement Option Preserve Private Property Public Put RSet
    6              0.000050 syn keyword vbStatement RaiseEvent Randomize ReDim Redim Reset Resume
    6              0.000055 syn keyword vbStatement Return RmDir SavePicture SaveSetting Seek SendKeys
    6              0.000109 syn keyword vbStatement Sendkeys Set SetAttr Static Step Stop Sub Time
    6              0.000052 syn keyword vbStatement Type Unload Unlock Until Wend While Width With
    6              0.000027 syn keyword vbStatement Write
                            
    6              0.000056 syn keyword vbKeyword As Binary ByRef ByVal Date Empty Error Friend Get
    6              0.000058 syn keyword vbKeyword Input Is Len Lock Me Mid New Nothing Null On
    6              0.000051 syn keyword vbKeyword Option Optional ParamArray Print Private Property
    6              0.000045 syn keyword vbKeyword Public PublicNotCreateable OnNewProcessSingleUse
    6              0.000046 syn keyword vbKeyword InSameProcessMultiUse GlobalMultiUse Resume Seek
    6              0.000046 syn keyword vbKeyword Set Static Step String Time WithEvents
                            
    6              0.000026 syn keyword vbTodo contained	TODO
                            
                            "Datatypes
    6              0.000055 syn keyword vbTypes Boolean Byte Currency Date Decimal Double Empty
    6              0.000049 syn keyword vbTypes Integer Long Object Single String Variant
                            
                            "VB defined values
    6              0.000051 syn keyword vbDefine dbBigInt dbBinary dbBoolean dbByte dbChar
    6              0.000052 syn keyword vbDefine dbCurrency dbDate dbDecimal dbDouble dbFloat
    6              0.000050 syn keyword vbDefine dbGUID dbInteger dbLong dbLongBinary dbMemo
    6              0.000049 syn keyword vbDefine dbNumeric dbSingle dbText dbTime dbTimeStamp
    6              0.000029 syn keyword vbDefine dbVarBinary
                            
                            "VB defined values
    6              0.000044 syn keyword vbDefine vb3DDKShadow vb3DFace vb3DHighlight vb3DLight
    6              0.000041 syn keyword vbDefine vb3DShadow vbAbort vbAbortRetryIgnore
    6              0.000042 syn keyword vbDefine vbActiveBorder vbActiveTitleBar vbAlias
    6              0.000039 syn keyword vbDefine vbApplicationModal vbApplicationWorkspace
    6              0.000044 syn keyword vbDefine vbAppTaskManager vbAppWindows vbArchive vbArray
    6              0.000048 syn keyword vbDefine vbBack vbBinaryCompare vbBlack vbBlue vbBoolean
    6              0.000044 syn keyword vbDefine vbButtonFace vbButtonShadow vbButtonText vbByte
    6              0.000046 syn keyword vbDefine vbCalGreg vbCalHijri vbCancel vbCr vbCritical
    6              0.000043 syn keyword vbDefine vbCrLf vbCurrency vbCyan vbDatabaseCompare
    6              0.000047 syn keyword vbDefine vbDataObject vbDate vbDecimal vbDefaultButton1
    6              0.000042 syn keyword vbDefine vbDefaultButton2 vbDefaultButton3 vbDefaultButton4
    6              0.000048 syn keyword vbDefine vbDesktop vbDirectory vbDouble vbEmpty vbError
    6              0.000045 syn keyword vbDefine vbExclamation vbFirstFourDays vbFirstFullWeek
    6              0.000042 syn keyword vbDefine vbFirstJan1 vbFormCode vbFormControlMenu
    6              0.000044 syn keyword vbDefine vbFormFeed vbFormMDIForm vbFriday vbFromUnicode
    6              0.000047 syn keyword vbDefine vbGrayText vbGreen vbHidden vbHide vbHighlight
    6              0.000045 syn keyword vbDefine vbHighlightText vbHiragana vbIgnore vbIMEAlphaDbl
    6              0.000041 syn keyword vbDefine vbIMEAlphaSng vbIMEDisable vbIMEHiragana
    6              0.000042 syn keyword vbDefine vbIMEKatakanaDbl vbIMEKatakanaSng vbIMEModeAlpha
    6              0.000038 syn keyword vbDefine vbIMEModeAlphaFull vbIMEModeDisable
    6              0.000037 syn keyword vbDefine vbIMEModeHangul vbIMEModeHangulFull
    6              0.000037 syn keyword vbDefine vbIMEModeHiragana vbIMEModeKatakana
    6              0.000040 syn keyword vbDefine vbIMEModeKatakanaHalf vbIMEModeNoControl
    6              0.000045 syn keyword vbDefine vbIMEModeOff vbIMEModeOn vbIMENoOp vbIMEOff
    6              0.000110 syn keyword vbDefine vbIMEOn vbInactiveBorder vbInactiveCaptionText
    6              0.000043 syn keyword vbDefine vbInactiveTitleBar vbInfoBackground vbInformation
    6              0.000046 syn keyword vbDefine vbInfoText vbInteger vbKatakana vbKey0 vbKey1
    6              0.000048 syn keyword vbDefine vbKey2 vbKey3 vbKey4 vbKey5 vbKey6 vbKey7 vbKey8
    6              0.000047 syn keyword vbDefine vbKey9 vbKeyA vbKeyAdd vbKeyB vbKeyBack vbKeyC
    6              0.000046 syn keyword vbDefine vbKeyCancel vbKeyCapital vbKeyClear vbKeyControl
    6              0.000057 syn keyword vbDefine vbKeyD vbKeyDecimal vbKeyDelete vbKeyDivide
    6              0.000050 syn keyword vbDefine vbKeyDown vbKeyE vbKeyEnd vbKeyEscape vbKeyExecute
    6              0.000051 syn keyword vbDefine vbKeyF vbKeyF1 vbKeyF10 vbKeyF11 vbKeyF12 vbKeyF13
    6              0.000048 syn keyword vbDefine vbKeyF14 vbKeyF15 vbKeyF16 vbKeyF2 vbKeyF3 vbKeyF4
    6              0.000045 syn keyword vbDefine vbKeyF5 vbKeyF6 vbKeyF7 vbKeyF8 vbKeyF9 vbKeyG
    6              0.000047 syn keyword vbDefine vbKeyH vbKeyHelp vbKeyHome vbKeyI vbKeyInsert
    6              0.000048 syn keyword vbDefine vbKeyJ vbKeyK vbKeyL vbKeyLButton vbKeyLeft vbKeyM
    6              0.000043 syn keyword vbDefine vbKeyMButton vbKeyMenu vbKeyMultiply vbKeyN
    6              0.000038 syn keyword vbDefine vbKeyNumlock vbKeyNumpad0 vbKeyNumpad1
    6              0.000038 syn keyword vbDefine vbKeyNumpad2 vbKeyNumpad3 vbKeyNumpad4
    6              0.000039 syn keyword vbDefine vbKeyNumpad5 vbKeyNumpad6 vbKeyNumpad7
    6              0.000041 syn keyword vbDefine vbKeyNumpad8 vbKeyNumpad9 vbKeyO vbKeyP
    6              0.000044 syn keyword vbDefine vbKeyPageDown vbKeyPageUp vbKeyPause vbKeyPrint
    6              0.000046 syn keyword vbDefine vbKeyQ vbKeyR vbKeyRButton vbKeyReturn vbKeyRight
    6              0.000044 syn keyword vbDefine vbKeyS vbKeySelect vbKeySeparator vbKeyShift
    6              0.000043 syn keyword vbDefine vbKeySnapshot vbKeySpace vbKeySubtract vbKeyT
    6              0.000047 syn keyword vbDefine vbKeyTab vbKeyU vbKeyUp vbKeyV vbKeyW vbKeyX
    6              0.000049 syn keyword vbDefine vbKeyY vbKeyZ vbLf vbLong vbLowerCase vbMagenta
    6              0.000040 syn keyword vbDefine vbMaximizedFocus vbMenuBar vbMenuText
    6              0.000041 syn keyword vbDefine vbMinimizedFocus vbMinimizedNoFocus vbMonday
    6              0.000040 syn keyword vbDefine vbMsgBox vbMsgBoxHelpButton vbMsgBoxRight
    6              0.000038 syn keyword vbDefine vbMsgBoxRtlReading vbMsgBoxSetForeground
    6              0.000044 syn keyword vbDefine vbMsgBoxText vbNarrow vbNewLine vbNo vbNormal
    6              0.000043 syn keyword vbDefine vbNormalFocus vbNormalNoFocus vbNull vbNullChar
    6              0.000042 syn keyword vbDefine vbNullString vbObject vbObjectError vbOK
    6              0.000044 syn keyword vbDefine vbOKCancel vbOKOnly vbProperCase vbQuestion
    6              0.000060 syn keyword vbDefine vbReadOnly vbRed vbRetry vbRetryCancel vbSaturday
    6              0.000059 syn keyword vbDefine vbScrollBars vbSingle vbString vbSunday vbSystem
    6              0.000051 syn keyword vbDefine vbSystemModal vbTab vbTextCompare vbThursday
    6              0.000053 syn keyword vbDefine vbTitleBarText vbTuesday vbUnicode vbUpperCase
    6              0.000050 syn keyword vbDefine vbUseSystem vbUseSystemDayOfWeek vbVariant
    6              0.000056 syn keyword vbDefine vbVerticalTab vbVolume vbWednesday vbWhite vbWide
    6              0.000057 syn keyword vbDefine vbWindowBackground vbWindowFrame vbWindowText
    6              0.000048 syn keyword vbDefine vbYellow vbYes vbYesNo vbYesNoCancel
                            
                            "Numbers
                            "integer number, or floating point number without a dot.
    6              0.000078 syn match vbNumber "\<\d\+\>"
                            "floating point number, with dot
    6              0.000063 syn match vbNumber "\<\d\+\.\d*\>"
                            "floating point number, starting with a dot
    6              0.000051 syn match vbNumber "\.\d\+\>"
                            "syn match  vbNumber		"{[[:xdigit:]-]\+}\|&[hH][[:xdigit:]]\+&"
                            "syn match  vbNumber		":[[:xdigit:]]\+"
                            "syn match  vbNumber		"[-+]\=\<\d\+\>"
    6              0.000090 syn match  vbFloat		"[-+]\=\<\d\+[eE][\-+]\=\d\+"
    6              0.000079 syn match  vbFloat		"[-+]\=\<\d\+\.\d*\([eE][\-+]\=\d\+\)\="
    6              0.000072 syn match  vbFloat		"[-+]\=\<\.\d\+\([eE][\-+]\=\d\+\)\="
                            
                            " String and Character contstants
    6              0.000092 syn region  vbString		start=+"+  end=+"\|$+
    6              0.000124 syn region  vbComment		start="\(^\|\s\)REM\s" end="$" contains=vbTodo
    6              0.000096 syn region  vbComment		start="\(^\|\s\)\'"   end="$" contains=vbTodo
    6              0.000076 syn match   vbLineNumber	"^\d\+\(\s\|$\)"
    6              0.000083 syn match   vbTypeSpecifier  "[a-zA-Z0-9][\$%&!#]"ms=s+1
    6              0.000071 syn match   vbTypeSpecifier  "#[a-zA-Z0-9]"me=e-1
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
    6              0.000111 hi def link vbBoolean		Boolean
    6              0.000086 hi def link vbLineNumber		Comment
    6              0.000101 hi def link vbComment		Comment
    6              0.000096 hi def link vbConditional	Conditional
    6              0.000080 hi def link vbConst			Constant
    6              0.000081 hi def link vbDefine			Constant
    6              0.000082 hi def link vbError			Error
    6              0.000081 hi def link vbFunction		Identifier
    6              0.000068 hi def link vbIdentifier		Identifier
    6              0.000070 hi def link vbNumber			Number
    6              0.000066 hi def link vbFloat			Float
    6              0.000065 hi def link vbMethods		PreProc
    6              0.000160 hi def link vbOperator		Operator
    6              0.000065 hi def link vbRepeat			Repeat
    6              0.000066 hi def link vbString			String
    6              0.000067 hi def link vbStatement		Statement
    6              0.000063 hi def link vbKeyword		Statement
    6              0.000062 hi def link vbEvents			Special
    6              0.000061 hi def link vbTodo			Todo
    6              0.000066 hi def link vbTypes			Type
    6              0.000067 hi def link vbTypeSpecifier	Type
                            
                            
    6              0.000044 let b:current_syntax = "vb"
                            
                            " vim: ts=8

SCRIPT  C:\Neovim\share\nvim\runtime\syntax\vb.vim
Sourced 6 times
Total time:   0.000346
 Self time:   0.000346

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	Visual Basic
                            " Maintainer:	Tim Chase <vb.vim@tim.thechases.com>
                            " Former Maintainer:	Robert M. Cortopassi <cortopar@mindspring.com>
                            "	(tried multiple times to contact, but email bounced)
                            " Last Change:
                            "   2005 May 25  Synched with work by Thomas Barthel
                            "   2004 May 30  Added a few keywords
                            
                            " This was thrown together after seeing numerous requests on the
                            " VIM and VIM-DEV mailing lists.  It is by no means complete.
                            " Send comments, suggestions and requests to the maintainer.
                            
                            " quit when a syntax file was already loaded
    6              0.000070 if exists("b:current_syntax")
    6              0.000017 	finish
                            endif
                            
                            " VB is case insensitive
                            syn case ignore
                            
                            syn keyword vbConditional If Then ElseIf Else Select Case
                            
                            syn keyword vbOperator AddressOf And ByRef ByVal Eqv Imp In
                            syn keyword vbOperator Is Like Mod Not Or To Xor
                            
                            syn match vbOperator "[()+.,\-/*=&]"
                            syn match vbOperator "[<>]=\="
                            syn match vbOperator "<>"
                            syn match vbOperator "\s\+_$"
                            
                            syn keyword vbBoolean  True False
                            syn keyword vbConst Null Nothing
                            
                            syn keyword vbRepeat Do For ForEach Loop Next
                            syn keyword vbRepeat Step To Until Wend While
                            
                            syn keyword vbEvents AccessKeyPress Activate ActiveRowChanged
                            syn keyword vbEvents AfterAddFile AfterChangeFileName AfterCloseFile
                            syn keyword vbEvents AfterColEdit AfterColUpdate AfterDelete
                            syn keyword vbEvents AfterInsert AfterLabelEdit AfterRemoveFile
                            syn keyword vbEvents AfterUpdate AfterWriteFile AmbientChanged
                            syn keyword vbEvents ApplyChanges Associate AsyncProgress
                            syn keyword vbEvents AsyncReadComplete AsyncReadProgress AxisActivated
                            syn keyword vbEvents AxisLabelActivated AxisLabelSelected
                            syn keyword vbEvents AxisLabelUpdated AxisSelected AxisTitleActivated
                            syn keyword vbEvents AxisTitleSelected AxisTitleUpdated AxisUpdated
                            syn keyword vbEvents BeforeClick BeforeColEdit BeforeColUpdate
                            syn keyword vbEvents BeforeConnect BeforeDelete BeforeInsert
                            syn keyword vbEvents BeforeLabelEdit BeforeLoadFile BeforeUpdate
                            syn keyword vbEvents BeginRequest BeginTrans ButtonClick
                            syn keyword vbEvents ButtonCompleted ButtonDropDown ButtonGotFocus
                            syn keyword vbEvents ButtonLostFocus CallbackKeyDown Change Changed
                            syn keyword vbEvents ChartActivated ChartSelected ChartUpdated Click
                            syn keyword vbEvents Close CloseQuery CloseUp ColEdit ColResize
                            syn keyword vbEvents Collapse ColumnClick CommitTrans Compare
                            syn keyword vbEvents ConfigChageCancelled ConfigChanged
                            syn keyword vbEvents ConfigChangedCancelled Connect ConnectionRequest
                            syn keyword vbEvents CurrentRecordChanged DECommandAdded
                            syn keyword vbEvents DECommandPropertyChanged DECommandRemoved
                            syn keyword vbEvents DEConnectionAdded DEConnectionPropertyChanged
                            syn keyword vbEvents DEConnectionRemoved DataArrival DataChanged
                            syn keyword vbEvents DataUpdated DateClicked DblClick Deactivate
                            syn keyword vbEvents DevModeChange DeviceArrival DeviceOtherEvent
                            syn keyword vbEvents DeviceQueryRemove DeviceQueryRemoveFailed
                            syn keyword vbEvents DeviceRemoveComplete DeviceRemovePending
                            syn keyword vbEvents Disconnect DisplayChanged Dissociate
                            syn keyword vbEvents DoGetNewFileName Done DonePainting DownClick
                            syn keyword vbEvents DragDrop DragOver DropDown EditProperty EditQuery
                            syn keyword vbEvents EndRequest EnterCell EnterFocus ExitFocus Expand
                            syn keyword vbEvents FontChanged FootnoteActivated FootnoteSelected
                            syn keyword vbEvents FootnoteUpdated Format FormatSize GotFocus
                            syn keyword vbEvents HeadClick HeightChanged Hide InfoMessage
                            syn keyword vbEvents IniProperties InitProperties Initialize
                            syn keyword vbEvents ItemActivated ItemAdded ItemCheck ItemClick
                            syn keyword vbEvents ItemReloaded ItemRemoved ItemRenamed
                            syn keyword vbEvents ItemSeletected KeyDown KeyPress KeyUp LeaveCell
                            syn keyword vbEvents LegendActivated LegendSelected LegendUpdated
                            syn keyword vbEvents LinkClose LinkError LinkExecute LinkNotify
                            syn keyword vbEvents LinkOpen Load LostFocus MouseDown MouseMove
                            syn keyword vbEvents MouseUp NodeCheck NodeClick OLECompleteDrag
                            syn keyword vbEvents OLEDragDrop OLEDragOver OLEGiveFeedback OLESetData
                            syn keyword vbEvents OLEStartDrag ObjectEvent ObjectMove OnAddNew
                            syn keyword vbEvents OnComm Paint PanelClick PanelDblClick PathChange
                            syn keyword vbEvents PatternChange PlotActivated PlotSelected
                            syn keyword vbEvents PlotUpdated PointActivated PointLabelActivated
                            syn keyword vbEvents PointLabelSelected PointLabelUpdated PointSelected
                            syn keyword vbEvents PointUpdated PowerQuerySuspend PowerResume
                            syn keyword vbEvents PowerStatusChanged PowerSuspend ProcessTag
                            syn keyword vbEvents ProcessingTimeout QueryChangeConfig QueryClose
                            syn keyword vbEvents QueryComplete QueryCompleted QueryTimeout
                            syn keyword vbEvents QueryUnload ReadProperties RepeatedControlLoaded
                            syn keyword vbEvents RepeatedControlUnloaded Reposition
                            syn keyword vbEvents RequestChangeFileName RequestWriteFile Resize
                            syn keyword vbEvents ResultsChanged RetainedProject RollbackTrans
                            syn keyword vbEvents RowColChange RowCurrencyChange RowResize
                            syn keyword vbEvents RowStatusChanged Scroll SelChange SelectionChanged
                            syn keyword vbEvents SendComplete SendProgress SeriesActivated
                            syn keyword vbEvents SeriesSelected SeriesUpdated SettingChanged Show
                            syn keyword vbEvents SplitChange Start StateChanged StatusUpdate
                            syn keyword vbEvents SysColorsChanged Terminate TimeChanged Timer
                            syn keyword vbEvents TitleActivated TitleSelected TitleUpdated
                            syn keyword vbEvents UnboundAddData UnboundDeleteRow
                            syn keyword vbEvents UnboundGetRelativeBookmark UnboundReadData
                            syn keyword vbEvents UnboundWriteData Unformat Unload UpClick Updated
                            syn keyword vbEvents UserEvent Validate ValidationError
                            syn keyword vbEvents VisibleRecordChanged WillAssociate WillChangeData
                            syn keyword vbEvents WillDissociate WillExecute WillUpdateRows
                            syn keyword vbEvents WriteProperties
                            
                            
                            syn keyword vbFunction Abs Array Asc AscB AscW Atn Avg BOF CBool CByte
                            syn keyword vbFunction CCur CDate CDbl CInt CLng CSng CStr CVDate CVErr
                            syn keyword vbFunction CVar CallByName Cdec Choose Chr ChrB ChrW Command
                            syn keyword vbFunction Cos Count CreateObject CurDir DDB Date DateAdd
                            syn keyword vbFunction DateDiff DatePart DateSerial DateValue Day Dir
                            syn keyword vbFunction DoEvents EOF Environ Error Exp FV FileAttr
                            syn keyword vbFunction FileDateTime FileLen FilterFix Fix Format
                            syn keyword vbFunction FormatCurrency FormatDateTime FormatNumber
                            syn keyword vbFunction FormatPercent FreeFile GetAllStrings GetAttr
                            syn keyword vbFunction GetAutoServerSettings GetObject GetSetting Hex
                            syn keyword vbFunction Hour IIf IMEStatus IPmt InStr Input InputB
                            syn keyword vbFunction InputBox InstrB Int IsArray IsDate IsEmpty IsError
                            syn keyword vbFunction IsMissing IsNull IsNumeric IsObject Join LBound
                            syn keyword vbFunction LCase LOF LTrim Left LeftB Len LenB LoadPicture
                            syn keyword vbFunction LoadResData LoadResPicture LoadResString Loc Log
                            syn keyword vbFunction MIRR Max Mid MidB Min Minute Month MonthName
                            syn keyword vbFunction MsgBox NPV NPer Now Oct PPmt PV Partition Pmt
                            syn keyword vbFunction QBColor RGB RTrim Rate Replace Right RightB Rnd
                            syn keyword vbFunction Round SLN SYD Second Seek Sgn Shell Sin Space Spc
                            syn keyword vbFunction Split Sqr StDev StDevP Str StrComp StrConv
                            syn keyword vbFunction StrReverse String Sum Switch Tab Tan Time
                            syn keyword vbFunction TimeSerial TimeValue Timer Trim TypeName UBound
                            syn keyword vbFunction UCase Val Var VarP VarType Weekday WeekdayName
                            syn keyword vbFunction Year
                            
                            syn keyword vbMethods AboutBox Accept Activate Add AddCustom AddFile
                            syn keyword vbMethods AddFromFile AddFromGuid AddFromString
                            syn keyword vbMethods AddFromTemplate AddItem AddNew AddToAddInToolbar
                            syn keyword vbMethods AddToolboxProgID Append AppendAppendChunk
                            syn keyword vbMethods AppendChunk Arrange Assert AsyncRead BatchUpdate
                            syn keyword vbMethods BeginQueryEdit BeginTrans Bind BuildPath
                            syn keyword vbMethods CanPropertyChange Cancel CancelAsyncRead
                            syn keyword vbMethods CancelBatch CancelUpdate CaptureImage CellText
                            syn keyword vbMethods CellValue Circle Clear ClearFields ClearSel
                            syn keyword vbMethods ClearSelCols ClearStructure Clone Close Cls
                            syn keyword vbMethods ColContaining CollapseAll ColumnSize CommitTrans
                            syn keyword vbMethods CompactDatabase Compose Connect Copy CopyFile
                            syn keyword vbMethods CopyFolder CopyQueryDef Count CreateDatabase
                            syn keyword vbMethods CreateDragImage CreateEmbed CreateField
                            syn keyword vbMethods CreateFolder CreateGroup CreateIndex CreateLink
                            syn keyword vbMethods CreatePreparedStatement CreatePropery CreateQuery
                            syn keyword vbMethods CreateQueryDef CreateRelation CreateTableDef
                            syn keyword vbMethods CreateTextFile CreateToolWindow CreateUser
                            syn keyword vbMethods CreateWorkspace Customize Cut Delete
                            syn keyword vbMethods DeleteColumnLabels DeleteColumns DeleteFile
                            syn keyword vbMethods DeleteFolder DeleteLines DeleteRowLabels
                            syn keyword vbMethods DeleteRows DeselectAll DesignerWindow DoVerb Drag
                            syn keyword vbMethods Draw DriveExists Edit EditCopy EditPaste EndDoc
                            syn keyword vbMethods EnsureVisible EstablishConnection Execute Exists
                            syn keyword vbMethods Expand Export ExportReport ExtractIcon Fetch
                            syn keyword vbMethods FetchVerbs FileExists Files FillCache Find
                            syn keyword vbMethods FindFirst FindItem FindLast FindNext FindPrevious
                            syn keyword vbMethods FolderExists Forward GetAbsolutePathName
                            syn keyword vbMethods GetBaseName GetBookmark GetChunk GetClipString
                            syn keyword vbMethods GetData GetDrive GetDriveName GetFile GetFileName
                            syn keyword vbMethods GetFirstVisible GetFolder GetFormat GetHeader
                            syn keyword vbMethods GetLineFromChar GetNumTicks GetParentFolderName
                            syn keyword vbMethods GetRows GetSelectedPart GetSelection
                            syn keyword vbMethods GetSpecialFolder GetTempName GetText
                            syn keyword vbMethods GetVisibleCount GoBack GoForward Hide HitTest
                            syn keyword vbMethods HoldFields Idle Import InitializeLabels Insert
                            syn keyword vbMethods InsertColumnLabels InsertColumns InsertFile
                            syn keyword vbMethods InsertLines InsertObjDlg InsertRowLabels
                            syn keyword vbMethods InsertRows Item Keys KillDoc Layout Line Lines
                            syn keyword vbMethods LinkExecute LinkPoke LinkRequest LinkSend Listen
                            syn keyword vbMethods LoadFile LoadResData LoadResPicture LoadResString
                            syn keyword vbMethods LogEvent MakeCompileFile MakeCompiledFile
                            syn keyword vbMethods MakeReplica MoreResults Move MoveData MoveFile
                            syn keyword vbMethods MoveFirst MoveFolder MoveLast MoveNext
                            syn keyword vbMethods MovePrevious NavigateTo NewPage NewPassword
                            syn keyword vbMethods NextRecordset OLEDrag OnAddinsUpdate OnConnection
                            syn keyword vbMethods OnDisconnection OnStartupComplete Open
                            syn keyword vbMethods OpenAsTextStream OpenConnection OpenDatabase
                            syn keyword vbMethods OpenQueryDef OpenRecordset OpenResultset OpenURL
                            syn keyword vbMethods Overlay PSet PaintPicture PastSpecialDlg Paste
                            syn keyword vbMethods PeekData Play Point PopulatePartial PopupMenu
                            syn keyword vbMethods Print PrintForm PrintReport PropertyChanged Quit
                            syn keyword vbMethods Raise RandomDataFill RandomFillColumns
                            syn keyword vbMethods RandomFillRows ReFill Read ReadAll ReadFromFile
                            syn keyword vbMethods ReadLine ReadProperty Rebind Refresh RefreshLink
                            syn keyword vbMethods RegisterDatabase ReleaseInstance Reload Remove
                            syn keyword vbMethods RemoveAddInFromToolbar RemoveAll RemoveItem Render
                            syn keyword vbMethods RepairDatabase ReplaceLine Reply ReplyAll Requery
                            syn keyword vbMethods ResetCustom ResetCustomLabel ResolveName
                            syn keyword vbMethods RestoreToolbar Resync Rollback RollbackTrans
                            syn keyword vbMethods RowBookmark RowContaining RowTop Save SaveAs
                            syn keyword vbMethods SaveFile SaveToFile SaveToOle1File SaveToolbar
                            syn keyword vbMethods Scale ScaleX ScaleY Scroll SelPrint SelectAll
                            syn keyword vbMethods SelectPart Send SendData Set SetAutoServerSettings
                            syn keyword vbMethods SetData SetFocus SetOption SetSelection SetSize
                            syn keyword vbMethods SetText SetViewport Show ShowColor ShowFont
                            syn keyword vbMethods ShowHelp ShowOpen ShowPrinter ShowSave
                            syn keyword vbMethods ShowWhatsThis SignOff SignOn Size Skip SkipLine
                            syn keyword vbMethods Span Split SplitContaining StartLabelEdit
                            syn keyword vbMethods StartLogging Stop Synchronize Tag TextHeight
                            syn keyword vbMethods TextWidth ToDefaults Trace TwipsToChartPart
                            syn keyword vbMethods TypeByChartType URLFor Update UpdateControls
                            syn keyword vbMethods UpdateRecord UpdateRow Upto ValidateControls Value
                            syn keyword vbMethods WhatsThisMode Write WriteBlankLines WriteLine
                            syn keyword vbMethods WriteProperty WriteTemplate ZOrder
                            syn keyword vbMethods rdoCreateEnvironment rdoRegisterDataSource
                            
                            syn keyword vbStatement Alias AppActivate As Base Beep Begin Call ChDir
                            syn keyword vbStatement ChDrive Close Const Date Declare DefBool DefByte
                            syn keyword vbStatement DefCur DefDate DefDbl DefDec DefInt DefLng DefObj
                            syn keyword vbStatement DefSng DefStr DefVar Deftype DeleteSetting Dim Do
                            syn keyword vbStatement Each ElseIf End Enum Erase Error Event Exit
                            syn keyword vbStatement Explicit FileCopy For ForEach Function Get GoSub
                            syn keyword vbStatement GoTo Gosub Implements Kill LSet Let Lib LineInput
                            syn keyword vbStatement Load Lock Loop Mid MkDir Name Next On OnError Open
                            syn keyword vbStatement Option Preserve Private Property Public Put RSet
                            syn keyword vbStatement RaiseEvent Randomize ReDim Redim Reset Resume
                            syn keyword vbStatement Return RmDir SavePicture SaveSetting Seek SendKeys
                            syn keyword vbStatement Sendkeys Set SetAttr Static Step Stop Sub Time
                            syn keyword vbStatement Type Unload Unlock Until Wend While Width With
                            syn keyword vbStatement Write
                            
                            syn keyword vbKeyword As Binary ByRef ByVal Date Empty Error Friend Get
                            syn keyword vbKeyword Input Is Len Lock Me Mid New Nothing Null On
                            syn keyword vbKeyword Option Optional ParamArray Print Private Property
                            syn keyword vbKeyword Public PublicNotCreateable OnNewProcessSingleUse
                            syn keyword vbKeyword InSameProcessMultiUse GlobalMultiUse Resume Seek
                            syn keyword vbKeyword Set Static Step String Time WithEvents
                            
                            syn keyword vbTodo contained	TODO
                            
                            "Datatypes
                            syn keyword vbTypes Boolean Byte Currency Date Decimal Double Empty
                            syn keyword vbTypes Integer Long Object Single String Variant
                            
                            "VB defined values
                            syn keyword vbDefine dbBigInt dbBinary dbBoolean dbByte dbChar
                            syn keyword vbDefine dbCurrency dbDate dbDecimal dbDouble dbFloat
                            syn keyword vbDefine dbGUID dbInteger dbLong dbLongBinary dbMemo
                            syn keyword vbDefine dbNumeric dbSingle dbText dbTime dbTimeStamp
                            syn keyword vbDefine dbVarBinary
                            
                            "VB defined values
                            syn keyword vbDefine vb3DDKShadow vb3DFace vb3DHighlight vb3DLight
                            syn keyword vbDefine vb3DShadow vbAbort vbAbortRetryIgnore
                            syn keyword vbDefine vbActiveBorder vbActiveTitleBar vbAlias
                            syn keyword vbDefine vbApplicationModal vbApplicationWorkspace
                            syn keyword vbDefine vbAppTaskManager vbAppWindows vbArchive vbArray
                            syn keyword vbDefine vbBack vbBinaryCompare vbBlack vbBlue vbBoolean
                            syn keyword vbDefine vbButtonFace vbButtonShadow vbButtonText vbByte
                            syn keyword vbDefine vbCalGreg vbCalHijri vbCancel vbCr vbCritical
                            syn keyword vbDefine vbCrLf vbCurrency vbCyan vbDatabaseCompare
                            syn keyword vbDefine vbDataObject vbDate vbDecimal vbDefaultButton1
                            syn keyword vbDefine vbDefaultButton2 vbDefaultButton3 vbDefaultButton4
                            syn keyword vbDefine vbDesktop vbDirectory vbDouble vbEmpty vbError
                            syn keyword vbDefine vbExclamation vbFirstFourDays vbFirstFullWeek
                            syn keyword vbDefine vbFirstJan1 vbFormCode vbFormControlMenu
                            syn keyword vbDefine vbFormFeed vbFormMDIForm vbFriday vbFromUnicode
                            syn keyword vbDefine vbGrayText vbGreen vbHidden vbHide vbHighlight
                            syn keyword vbDefine vbHighlightText vbHiragana vbIgnore vbIMEAlphaDbl
                            syn keyword vbDefine vbIMEAlphaSng vbIMEDisable vbIMEHiragana
                            syn keyword vbDefine vbIMEKatakanaDbl vbIMEKatakanaSng vbIMEModeAlpha
                            syn keyword vbDefine vbIMEModeAlphaFull vbIMEModeDisable
                            syn keyword vbDefine vbIMEModeHangul vbIMEModeHangulFull
                            syn keyword vbDefine vbIMEModeHiragana vbIMEModeKatakana
                            syn keyword vbDefine vbIMEModeKatakanaHalf vbIMEModeNoControl
                            syn keyword vbDefine vbIMEModeOff vbIMEModeOn vbIMENoOp vbIMEOff
                            syn keyword vbDefine vbIMEOn vbInactiveBorder vbInactiveCaptionText
                            syn keyword vbDefine vbInactiveTitleBar vbInfoBackground vbInformation
                            syn keyword vbDefine vbInfoText vbInteger vbKatakana vbKey0 vbKey1
                            syn keyword vbDefine vbKey2 vbKey3 vbKey4 vbKey5 vbKey6 vbKey7 vbKey8
                            syn keyword vbDefine vbKey9 vbKeyA vbKeyAdd vbKeyB vbKeyBack vbKeyC
                            syn keyword vbDefine vbKeyCancel vbKeyCapital vbKeyClear vbKeyControl
                            syn keyword vbDefine vbKeyD vbKeyDecimal vbKeyDelete vbKeyDivide
                            syn keyword vbDefine vbKeyDown vbKeyE vbKeyEnd vbKeyEscape vbKeyExecute
                            syn keyword vbDefine vbKeyF vbKeyF1 vbKeyF10 vbKeyF11 vbKeyF12 vbKeyF13
                            syn keyword vbDefine vbKeyF14 vbKeyF15 vbKeyF16 vbKeyF2 vbKeyF3 vbKeyF4
                            syn keyword vbDefine vbKeyF5 vbKeyF6 vbKeyF7 vbKeyF8 vbKeyF9 vbKeyG
                            syn keyword vbDefine vbKeyH vbKeyHelp vbKeyHome vbKeyI vbKeyInsert
                            syn keyword vbDefine vbKeyJ vbKeyK vbKeyL vbKeyLButton vbKeyLeft vbKeyM
                            syn keyword vbDefine vbKeyMButton vbKeyMenu vbKeyMultiply vbKeyN
                            syn keyword vbDefine vbKeyNumlock vbKeyNumpad0 vbKeyNumpad1
                            syn keyword vbDefine vbKeyNumpad2 vbKeyNumpad3 vbKeyNumpad4
                            syn keyword vbDefine vbKeyNumpad5 vbKeyNumpad6 vbKeyNumpad7
                            syn keyword vbDefine vbKeyNumpad8 vbKeyNumpad9 vbKeyO vbKeyP
                            syn keyword vbDefine vbKeyPageDown vbKeyPageUp vbKeyPause vbKeyPrint
                            syn keyword vbDefine vbKeyQ vbKeyR vbKeyRButton vbKeyReturn vbKeyRight
                            syn keyword vbDefine vbKeyS vbKeySelect vbKeySeparator vbKeyShift
                            syn keyword vbDefine vbKeySnapshot vbKeySpace vbKeySubtract vbKeyT
                            syn keyword vbDefine vbKeyTab vbKeyU vbKeyUp vbKeyV vbKeyW vbKeyX
                            syn keyword vbDefine vbKeyY vbKeyZ vbLf vbLong vbLowerCase vbMagenta
                            syn keyword vbDefine vbMaximizedFocus vbMenuBar vbMenuText
                            syn keyword vbDefine vbMinimizedFocus vbMinimizedNoFocus vbMonday
                            syn keyword vbDefine vbMsgBox vbMsgBoxHelpButton vbMsgBoxRight
                            syn keyword vbDefine vbMsgBoxRtlReading vbMsgBoxSetForeground
                            syn keyword vbDefine vbMsgBoxText vbNarrow vbNewLine vbNo vbNormal
                            syn keyword vbDefine vbNormalFocus vbNormalNoFocus vbNull vbNullChar
                            syn keyword vbDefine vbNullString vbObject vbObjectError vbOK
                            syn keyword vbDefine vbOKCancel vbOKOnly vbProperCase vbQuestion
                            syn keyword vbDefine vbReadOnly vbRed vbRetry vbRetryCancel vbSaturday
                            syn keyword vbDefine vbScrollBars vbSingle vbString vbSunday vbSystem
                            syn keyword vbDefine vbSystemModal vbTab vbTextCompare vbThursday
                            syn keyword vbDefine vbTitleBarText vbTuesday vbUnicode vbUpperCase
                            syn keyword vbDefine vbUseSystem vbUseSystemDayOfWeek vbVariant
                            syn keyword vbDefine vbVerticalTab vbVolume vbWednesday vbWhite vbWide
                            syn keyword vbDefine vbWindowBackground vbWindowFrame vbWindowText
                            syn keyword vbDefine vbYellow vbYes vbYesNo vbYesNoCancel
                            
                            "Numbers
                            "integer number, or floating point number without a dot.
                            syn match vbNumber "\<\d\+\>"
                            "floating point number, with dot
                            syn match vbNumber "\<\d\+\.\d*\>"
                            "floating point number, starting with a dot
                            syn match vbNumber "\.\d\+\>"
                            "syn match  vbNumber		"{[[:xdigit:]-]\+}\|&[hH][[:xdigit:]]\+&"
                            "syn match  vbNumber		":[[:xdigit:]]\+"
                            "syn match  vbNumber		"[-+]\=\<\d\+\>"
                            syn match  vbFloat		"[-+]\=\<\d\+[eE][\-+]\=\d\+"
                            syn match  vbFloat		"[-+]\=\<\d\+\.\d*\([eE][\-+]\=\d\+\)\="
                            syn match  vbFloat		"[-+]\=\<\.\d\+\([eE][\-+]\=\d\+\)\="
                            
                            " String and Character contstants
                            syn region  vbString		start=+"+  end=+"\|$+
                            syn region  vbComment		start="\(^\|\s\)REM\s" end="$" contains=vbTodo
                            syn region  vbComment		start="\(^\|\s\)\'"   end="$" contains=vbTodo
                            syn match   vbLineNumber	"^\d\+\(\s\|$\)"
                            syn match   vbTypeSpecifier  "[a-zA-Z0-9][\$%&!#]"ms=s+1
                            syn match   vbTypeSpecifier  "#[a-zA-Z0-9]"me=e-1
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
                            hi def link vbBoolean		Boolean
                            hi def link vbLineNumber		Comment
                            hi def link vbComment		Comment
                            hi def link vbConditional	Conditional
                            hi def link vbConst			Constant
                            hi def link vbDefine			Constant
                            hi def link vbError			Error
                            hi def link vbFunction		Identifier
                            hi def link vbIdentifier		Identifier
                            hi def link vbNumber			Number
                            hi def link vbFloat			Float
                            hi def link vbMethods		PreProc
                            hi def link vbOperator		Operator
                            hi def link vbRepeat			Repeat
                            hi def link vbString			String
                            hi def link vbStatement		Statement
                            hi def link vbKeyword		Statement
                            hi def link vbEvents			Special
                            hi def link vbTodo			Todo
                            hi def link vbTypes			Type
                            hi def link vbTypeSpecifier	Type
                            
                            
                            let b:current_syntax = "vb"
                            
                            " vim: ts=8

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\syntax\css.vim
Sourced 6 times
Total time:   0.144901
 Self time:   0.144630

count  total (s)   self (s)
    6   0.000855   0.000584 if polyglot#init#is_disabled(expand('<sfile>:p'), 'css', 'syntax/css.vim')
                              finish
    6              0.000008 endif
                            
                            " Vim syntax file
                            " Language:     Cascading Style Sheets
                            " Previous Contributor List:
                            "               Jules Wang      <w.jq0722@gmail.com>
                            "               Claudio Fleiner <claudio@fleiner.com> (Maintainer)
                            "               Yeti            (Add full CSS2, HTML4 support)
                            "               Nikolai Weibull (Add CSS2 support)
                            " URL:          https://github.com/jsit/css.vim
                            " Maintainer:   Jay Sitter <jay@jaysitter.com>
                            " Last Change:  2019 Jul. 29
                            
                            " quit when a syntax file was already loaded
    6              0.000033 if !exists("main_syntax")
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'css'
    6              0.000034 elseif exists("b:current_syntax") && b:current_syntax == "css"
                              finish
    6              0.000007 endif
                            
    6              0.000068 let s:cpo_save = &cpo
    6              0.000085 set cpo&vim
                            
    6              0.000025 syn case ignore
                            
                            " HTML4 tags
    6              0.000077 syn keyword cssTagName abbr address area a b base
    6              0.000062 syn keyword cssTagName bdo blockquote body br button
    6              0.000064 syn keyword cssTagName caption cite code col colgroup dd del
    6              0.000056 syn keyword cssTagName dfn div dl dt em fieldset form
    6              0.000056 syn keyword cssTagName h1 h2 h3 h4 h5 h6 head hr html img i
    6              0.000060 syn keyword cssTagName iframe input ins isindex kbd label legend li
    6              0.000052 syn keyword cssTagName link map menu meta noscript ol optgroup
    6              0.000055 syn keyword cssTagName option p param pre q s samp script small
    6              0.000048 syn keyword cssTagName span strong sub sup tbody td
    6              0.000053 syn keyword cssTagName textarea tfoot th thead title tr ul u var
    6              0.000034 syn keyword cssTagName object svg
    6              0.000110 syn match   cssTagName /\<select\>\|\<style\>\|\<table\>/
                            
                            " 34 HTML5 tags
    6              0.000054 syn keyword cssTagName article aside audio bdi canvas command data
    6              0.000059 syn keyword cssTagName datalist details dialog embed figcaption figure footer
    6              0.000052 syn keyword cssTagName header hgroup keygen main mark menuitem meter nav
    6              0.000053 syn keyword cssTagName output progress rt rp ruby section
    6              0.000046 syn keyword cssTagName source summary time track video wbr
                            
                            " Tags not supported in HTML5
                            " acronym applet basefont big center dir
                            " font frame frameset noframes strike tt
                            
    6              0.000052 syn match cssTagName "\*"
                            
                            " selectors
    6              0.000110 syn match cssSelectorOp "[,>+~]"
    6              0.000101 syn match cssSelectorOp2 "[~|^$*]\?=" contained
    6              0.000289 syn region cssAttributeSelector matchgroup=cssSelectorOp start="\[" end="]" contains=cssUnicodeEscape,cssSelectorOp2,cssStringQ,cssStringQQ
                            
                            " .class and #id
    6              0.000134 syn match cssClassName "\.-\=[A-Za-z_][A-Za-z0-9_-]*" contains=cssClassNameDot
    6              0.000043 syn match cssClassNameDot contained '\.'
                            
    6              0.000013 try
    6              0.000133 syn match cssIdentifier "#[A-Za-z\u00ac-\uffff_@][A-Za-z\u00ac-\uffff0-9_@-]*"
                            catch /^.*/
                            syn match cssIdentifier "#[A-Za-z_@][A-Za-z0-9_@-]*"
    6              0.000014 endtry
                            
                            " digits
    6              0.000091 syn match cssValueInteger contained "[-+]\=\d\+" contains=cssUnitDecorators
    6              0.000091 syn match cssValueNumber contained "[-+]\=\d\+\(\.\d*\)\=" contains=cssUnitDecorators
    6              0.000168 syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=\(mm\|cm\|in\|pt\|pc\|em\|ex\|px\|rem\|dpi\|dppx\|dpcm\|fr\|vw\|vh\|vmin\|vmax\|ch\)\>" contains=cssUnitDecorators
    6              0.000101 syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=%" contains=cssUnitDecorators
    6              0.000111 syn match cssValueAngle contained "[-+]\=\d\+\(\.\d*\)\=\(deg\|grad\|rad\)\>" contains=cssUnitDecorators
    6              0.000088 syn match cssValueTime contained "+\=\d\+\(\.\d*\)\=\(ms\|s\)\>" contains=cssUnitDecorators
    6              0.000087 syn match cssValueFrequency contained "+\=\d\+\(\.\d*\)\=\(Hz\|kHz\)\>" contains=cssUnitDecorators
                            
                            " The 16 basic color names
    6              0.000122 syn keyword cssColor contained aqua black blue fuchsia gray green lime maroon navy olive purple red silver teal yellow
                            
                            " 130 more color names
    6              0.000082 syn keyword cssColor contained aliceblue antiquewhite aquamarine azure
    6              0.000081 syn keyword cssColor contained beige bisque blanchedalmond blueviolet brown burlywood
    6              0.000095 syn keyword cssColor contained cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan
    6              0.000139 syn match cssColor contained /\<dark\(blue\|cyan\|goldenrod\|gray\|green\|grey\|khaki\)\>/
    6              0.000134 syn match cssColor contained /\<dark\(magenta\|olivegreen\|orange\|orchid\|red\|salmon\|seagreen\)\>/
    6              0.000222 syn match cssColor contained /\<darkslate\(blue\|gray\|grey\)\>/
    6              0.000113 syn match cssColor contained /\<dark\(turquoise\|violet\)\>/
    6              0.000111 syn keyword cssColor contained deeppink deepskyblue dimgray dimgrey dodgerblue firebrick
    6              0.000093 syn keyword cssColor contained floralwhite forestgreen gainsboro ghostwhite gold
    6              0.000090 syn keyword cssColor contained goldenrod greenyellow grey honeydew hotpink
    6              0.000101 syn keyword cssColor contained indianred indigo ivory khaki lavender lavenderblush lawngreen
    6              0.000076 syn keyword cssColor contained lemonchiffon limegreen linen magenta
    6              0.000133 syn match cssColor contained /\<light\(blue\|coral\|cyan\|goldenrodyellow\|gray\|green\)\>/
    6              0.000122 syn match cssColor contained /\<light\(grey\|pink\|salmon\|seagreen\|skyblue\|yellow\)\>/
    6              0.000116 syn match cssColor contained /\<light\(slategray\|slategrey\|steelblue\)\>/
    6              0.000130 syn match cssColor contained /\<medium\(aquamarine\|blue\|orchid\|purple\|seagreen\)\>/
    6              0.000122 syn match cssColor contained /\<medium\(slateblue\|springgreen\|turquoise\|violetred\)\>/
    6              0.000079 syn keyword cssColor contained midnightblue mintcream mistyrose moccasin navajowhite
    6              0.000076 syn keyword cssColor contained oldlace olivedrab orange orangered orchid
    6              0.000110 syn match cssColor contained /\<pale\(goldenrod\|green\|turquoise\|violetred\)\>/
    6              0.000076 syn keyword cssColor contained papayawhip peachpuff peru pink plum powderblue
    6              0.000082 syn keyword cssColor contained rosybrown royalblue rebeccapurple saddlebrown salmon
    6              0.000081 syn keyword cssColor contained sandybrown seagreen seashell sienna skyblue slateblue
    6              0.000078 syn keyword cssColor contained slategray slategrey snow springgreen steelblue tan
    6              0.000071 syn keyword cssColor contained thistle tomato turquoise violet wheat
    6              0.000058 syn keyword cssColor contained whitesmoke yellowgreen
                            
                            " FIXME: These are actually case-insensitive too, but (a) specs recommend using
                            " mixed-case (b) it's hard to highlight the word `Background' correctly in
                            " all situations
    6              0.000043 syn case match
    6              0.000215 syn keyword cssColor contained ActiveBorder ActiveCaption AppWorkspace ButtonFace ButtonHighlight ButtonShadow ButtonText CaptionText GrayText Highlight HighlightText InactiveBorder InactiveCaption InactiveCaptionText InfoBackground InfoText Menu MenuText Scrollbar ThreeDDarkShadow ThreeDFace ThreeDHighlight ThreeDLightShadow ThreeDShadow Window WindowFrame WindowText Background
    6              0.000019 syn case ignore
                            
    6              0.000099 syn match cssImportant contained "!\s*important\>"
    6              0.000059 syn match cssCustomProp contained "--[a-zA-Z0-9-_]*"
                            
    6              0.000082 syn match cssColor contained "\<transparent\>"
    6              0.000083 syn match cssColor contained "\<currentColor\>"
    6              0.000086 syn match cssColor contained "\<white\>"
    6              0.000121 syn match cssColor contained "#\x\{3,4\}\>" contains=cssUnitDecorators
    6              0.000114 syn match cssColor contained "#\x\{6\}\>" contains=cssUnitDecorators
    6              0.000115 syn match cssColor contained "#\x\{8\}\>" contains=cssUnitDecorators
                            
    6              0.000241 syn region cssURL contained matchgroup=cssFunctionName start="\<\(uri\|url\|local\|format\)\s*(" end=")" contains=cssStringQ,cssStringQQ oneline
    6              0.008518 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(var\|calc\)\s*(" end=")" contains=cssCustomProp,cssValue.*,cssFunction,cssColor,cssStringQ,cssStringQQ oneline
    6              0.000306 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgb\|clip\|attr\|counter\|rect\|cubic-bezier\|steps\)\s*(" end=")" oneline  contains=cssValueInteger,cssValueNumber,cssValueLength,cssFunctionComma
    6              0.000353 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgba\|hsl\|hsla\|color-stop\|from\|to\)\s*(" end=")" oneline  contains=cssColor,cssValueInteger,cssValueNumber,cssValueLength,cssFunctionComma,cssFunction
    6              0.000383 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(linear-\|radial-\)\=\gradient\s*(" end=")" oneline  contains=cssColor,cssValueInteger,cssValueNumber,cssValueLength,cssFunction,cssGradientAttr,cssFunctionComma
    6              0.000447 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(matrix\(3d\)\=\|scale\(3d\|X\|Y\|Z\)\=\|translate\(3d\|X\|Y\|Z\)\=\|skew\(X\|Y\)\=\|rotate\(3d\|X\|Y\|Z\)\=\|perspective\)\s*(" end=")" oneline contains=cssValueInteger,cssValueNumber,cssValueLength,cssValueAngle,cssFunctionComma
    6              0.000311 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(blur\|brightness\|contrast\|drop-shadow\|grayscale\|hue-rotate\|invert\|opacity\|saturate\|sepia\)\s*(" end=")" oneline contains=cssValueInteger,cssValueNumber,cssValueLength,cssValueAngle,cssFunctionComma
    6              0.000072 syn keyword cssGradientAttr contained top bottom left right cover center middle ellipse at
    6              0.000041 syn match cssFunctionComma contained ","
                            
                            " Common Prop and Attr
    6              0.000054 syn keyword cssCommonAttr contained auto none inherit all default normal
    6              0.000049 syn keyword cssCommonAttr contained top bottom center stretch hidden visible
    6              0.000080 syn match cssCommonAttr contained "\<\(max-\|min-\|fit-\)content\>"
                            "------------------------------------------------
                            " CSS Animations
                            " http://www.w3.org/TR/css3-animations/
    6              0.000169 syn match cssAnimationProp contained "\<animation\(-\(delay\|direction\|duration\|fill-mode\|name\|play-state\|timing-function\|iteration-count\)\)\=\>"
                            
                            " animation-direction attributes
    6              0.000041 syn keyword cssAnimationAttr contained alternate reverse
    6              0.000060 syn match cssAnimationAttr contained "\<alternate-reverse\>"
                            
                            " animation-fill-mode attributes
    6              0.000036 syn keyword cssAnimationAttr contained forwards backwards both
                            
                            " animation-play-state attributes
    6              0.000030 syn keyword cssAnimationAttr contained running paused
                            
                            " animation-iteration-count attributes
    6              0.000033 syn keyword cssAnimationAttr contained infinite
                            "------------------------------------------------
                            "  CSS Backgrounds and Borders Module Level 3
                            "  http://www.w3.org/TR/css3-background/
    6              0.000145 syn match cssBackgroundProp contained "\<background\(-\(attachment\|clip\|color\|image\|origin\|position\|repeat\|size\)\)\=\>"
                            " background-attachment attributes
    6              0.000042 syn keyword cssBackgroundAttr contained scroll fixed local
                            
                            " background-position attributes
    6              0.000039 syn keyword cssBackgroundAttr contained left center right top bottom
                            
                            " background-repeat attributes
    6              0.000060 syn match cssBackgroundAttr contained "\<no-repeat\>"
    6              0.000064 syn match cssBackgroundAttr contained "\<repeat\(-[xy]\)\=\>"
                            
                            " background-size attributes
    6              0.000034 syn keyword cssBackgroundAttr contained cover contain
                            
    6              0.000097 syn match cssBorderProp contained "\<border\(-\(top\|right\|bottom\|left\)\)\=\(-\(width\|color\|style\)\)\=\>"
    6              0.000102 syn match cssBorderProp contained "\<border\(-\(top\|bottom\)-\(left\|right\)\)\=-radius\>"
    6              0.000107 syn match cssBorderProp contained "\<border-image\(-\(outset\|repeat\|slice\|source\|width\)\)\=\>"
    6              0.000063 syn match cssBorderProp contained "\<box-decoration-break\>"
    6              0.000044 syn match cssBorderProp contained "\<box-shadow\>"
                            
                            " border-image attributes
    6              0.000035 syn keyword cssBorderAttr contained stretch round fill
                            
                            " border-style attributes
    6              0.000054 syn keyword cssBorderAttr contained dotted dashed solid double groove ridge inset outset
                            
                            " border-width attributes
    6              0.000032 syn keyword cssBorderAttr contained thin thick medium
                            
                            " box-decoration-break attributes
    6              0.000032 syn keyword cssBorderAttr contained clone slice
                            "------------------------------------------------
                            
    6              0.000114 syn match cssBoxProp contained "\<padding\(-\(top\|right\|bottom\|left\)\)\=\>"
    6              0.000116 syn match cssBoxProp contained "\<margin\(-\(top\|right\|bottom\|left\)\)\=\>"
    6              0.000101 syn match cssBoxProp contained "\<overflow\(-\(x\|y\|style\)\)\=\>"
    6              0.000090 syn match cssBoxProp contained "\<rotation\(-point\)\=\>"
    6              0.000048 syn keyword cssBoxAttr contained visible hidden scroll auto
    6              0.000063 syn match cssBoxAttr contained "\<no-\(display\|content\)\>"
                            
    6              0.000029 syn keyword cssCascadeProp contained all
    6              0.000034 syn keyword cssCascadeAttr contained initial unset revert
                            
    6              0.000058 syn keyword cssColorProp contained opacity
    6              0.000085 syn match cssColorProp contained "\<color-profile\>"
    6              0.000084 syn match cssColorProp contained "\<rendering-intent\>"
                            
                            
    6              0.000121 syn match cssDimensionProp contained "\<\(min\|max\)-\(width\|height\)\>"
    6              0.000057 syn keyword cssDimensionProp contained height
    6              0.000052 syn keyword cssDimensionProp contained width
                            
                            " CSS Flexible Box Layout Module Level 1
                            " http://www.w3.org/TR/css3-flexbox/
                            " CSS Box Alignment Module Level 3
                            " http://www.w3.org/TR/css-align-3/
    6              0.000128 syn match cssFlexibleBoxProp contained "\<flex\(-\(direction\|wrap\|flow\|grow\|shrink\|basis\)\)\=\>"
    6              0.000113 syn match cssFlexibleBoxProp contained "\<\(align\|justify\)\(-\(items\|self\|content\)\)\=\>"
    6              0.000056 syn keyword cssFlexibleBoxProp contained order
                            
    6              0.000149 syn match cssFlexibleBoxAttr contained "\<\(row\|column\|wrap\)\(-reverse\)\=\>"
    6              0.000045 syn keyword cssFlexibleBoxAttr contained nowrap stretch baseline center
    6              0.000063 syn match cssFlexibleBoxAttr contained "\<flex\(-\(start\|end\)\)\=\>"
    6              0.000063 syn match cssFlexibleBoxAttr contained "\<space\(-\(between\|around\)\)\=\>"
                            
                            " CSS Fonts Module Level 3
                            " http://www.w3.org/TR/css-fonts-3/
    6              0.000251 syn match cssFontProp contained "\<font\(-\(family\|\|feature-settings\|kerning\|language-override\|size\(-adjust\)\=\|stretch\|style\|synthesis\|variant\(-\(alternates\|caps\|east-asian\|ligatures\|numeric\|position\)\)\=\|weight\)\)\=\>"
                            
                            " font attributes
    6              0.000042 syn keyword cssFontAttr contained icon menu caption
    6              0.000054 syn match cssFontAttr contained "\<message-box\>"
    6              0.000046 syn match cssFontAttr contained "\<status-bar\>"
    6              0.000032 syn keyword cssFontAttr contained larger smaller
    6              0.000073 syn match cssFontAttr contained "\<\(x\{1,2\}-\)\=\(large\|small\)\>"
    6              0.000063 syn match cssFontAttr contained "\<small-\(caps\|caption\)\>"
                            " font-family attributes
    6              0.000068 syn match cssFontAttr contained "\<\(sans-\)\=serif\>"
    6              0.000155 syn keyword cssFontAttr contained Antiqua Arial Black Book Charcoal Comic Courier Dingbats Gadget Geneva Georgia Grande Helvetica Impact Linotype Lucida MS Monaco Neue New Palatino Roboto Roman Symbol Tahoma Times Trebuchet Verdana Webdings Wingdings York Zapf
    6              0.000038 syn keyword cssFontAttr contained cursive fantasy monospace
                            " font-feature-settings attributes
    6              0.000029 syn keyword cssFontAttr contained on off
                            " font-stretch attributes
    6              0.000095 syn match cssFontAttr contained "\<\(\(ultra\|extra\|semi\)-\)\=\(condensed\|expanded\)\>"
                            " font-style attributes
    6              0.000029 syn keyword cssFontAttr contained italic oblique
                            " font-synthesis attributes
    6              0.000028 syn keyword cssFontAttr contained weight style
                            " font-weight attributes
    6              0.000030 syn keyword cssFontAttr contained bold bolder lighter
                            " TODO: font-variant-* attributes
                            "------------------------------------------------
                            
                            " Webkit specific property/attributes
    6              0.000085 syn match cssFontProp contained "\<font-smooth\>"
    6              0.000068 syn match cssFontAttr contained "\<\(subpixel-\)\=\antialiased\>"
                            
                            
                            " CSS Multi-column Layout Module
                            " http://www.w3.org/TR/css3-multicol/
    6              0.000092 syn match cssMultiColumnProp contained "\<break-\(after\|before\|inside\)\>"
    6              0.000104 syn match cssMultiColumnProp contained "\<column-\(count\|fill\|gap\|rule\(-\(color\|style\|width\)\)\=\|span\|width\)\>"
    6              0.000031 syn keyword cssMultiColumnProp contained columns
    6              0.000032 syn keyword cssMultiColumnAttr contained balance medium
    6              0.000042 syn keyword cssMultiColumnAttr contained always left right page column
    6              0.000073 syn match cssMultiColumnAttr contained "\<avoid\(-\(page\|column\)\)\=\>"
                            
                            " http://www.w3.org/TR/css3-break/#page-break
    6              0.000074 syn match cssMultiColumnProp contained "\<page\(-break-\(before\|after\|inside\)\)\=\>"
                            
                            " http://www.w3.org/TR/SVG11/interact.html
    6              0.000055 syn match cssInteractProp contained "\<pointer-events\>"
    6              0.000072 syn match cssInteractAttr contained "\<\(visible\)\=\(Painted\|Fill\|Stroke\)\=\>"
                            
                            " TODO find following items in w3c docs.
    6              0.000066 syn keyword cssGeneratedContentProp contained quotes crop
    6              0.000093 syn match cssGeneratedContentProp contained "\<counter-\(reset\|increment\)\>"
    6              0.000079 syn match cssGeneratedContentProp contained "\<move-to\>"
    6              0.000080 syn match cssGeneratedContentProp contained "\<page-policy\>"
    6              0.000097 syn match cssGeneratedContentAttr contained "\<\(no-\)\=\(open\|close\)-quote\>"
                            
                            " https://www.w3.org/TR/css-grid-1/
    6              0.000050 syn match cssGridProp contained "\<grid\>"
    6              0.000099 syn match cssGridProp contained "\<grid-template\(-\(columns\|rows\|areas\)\)\=\>"
    6              0.000074 syn match cssGridProp contained "\<grid-\(column\|row\)\(-\(start\|end\|gap\)\)\=\>"
    6              0.000083 syn match cssGridProp contained "\<grid-\(area\|gap\)\>"
    6              0.000063 syn match cssGridProp contained "\<grid-auto-\(flow\|rows\|columns\)\>"
                            
    6              0.000081 syn match cssHyerlinkProp contained "\<target\(-\(name\|new\|position\)\)\=\>"
                            
    6              0.000118 syn match cssListProp contained "\<list-style\(-\(type\|position\|image\)\)\=\>"
    6              0.000087 syn match cssListAttr contained "\<\(lower\|upper\)-\(roman\|alpha\|greek\|latin\)\>"
    6              0.000067 syn match cssListAttr contained "\<\(hiragana\|katakana\)\(-iroha\)\=\>"
    6              0.000072 syn match cssListAttr contained "\<\(decimal\(-leading-zero\)\=\|cjk-ideographic\)\>"
    6              0.000114 syn keyword cssListAttr contained disc circle square hebrew armenian georgian
    6              0.000029 syn keyword cssListAttr contained inside outside
                            
    6              0.000083 syn keyword cssPositioningProp contained bottom clear clip display float left
    6              0.000071 syn keyword cssPositioningProp contained position right top visibility
    6              0.000090 syn match cssPositioningProp contained "\<z-index\>"
    6              0.000047 syn keyword cssPositioningAttr contained block compact grid
    6              0.000132 syn match cssPositioningAttr contained "\<table\(-\(row-group\|\(header\|footer\)-group\|row\|column\(-group\)\=\|cell\|caption\)\)\=\>"
    6              0.000033 syn keyword cssPositioningAttr contained left right both
    6              0.000049 syn match cssPositioningAttr contained "\<list-item\>"
    6              0.000073 syn match cssPositioningAttr contained "\<inline\(-\(block\|box\|table\|grid\|flex\)\)\=\>"
    6              0.000050 syn match cssPositioningAttr contained "\<flow\(-root\)\=\>"
    6              0.000041 syn keyword cssPositioningAttr contained static relative absolute fixed subgrid
                            
    6              0.000041 syn keyword cssPrintAttr contained landscape portrait crop cross always
                            
    6              0.000150 syn match cssTableProp contained "\<\(caption-side\|table-layout\|border-collapse\|border-spacing\|empty-cells\)\>"
    6              0.000054 syn keyword cssTableAttr contained fixed collapse separate show hide once always
                            
                            
    6              0.000072 syn keyword cssTextProp contained color direction hyphens
    6              0.000227 syn match cssTextProp "\<\(\(word\|letter\)-spacing\|text\(-\(decoration\|transform\|align\|index\|shadow\)\)\=\|vertical-align\|unicode-bidi\|line-height\)\>"
    6              0.000141 syn match cssTextProp contained "\<text-\(justify\|outline\|warp\|align-last\|size-adjust\|rendering\|stroke\|indent\)\>"
    6              0.000118 syn match cssTextProp contained "\<\(word\|line\)-break\|\(overflow\|word\)-wrap\>"
    6              0.000089 syn match cssTextProp contained "\<white-space\>"
    6              0.000088 syn match cssTextProp contained "\<hanging-punctuation\>"
    6              0.000085 syn match cssTextProp contained "\<tab-size\>"
    6              0.000084 syn match cssTextProp contained "\<punctuation-trim\>"
    6              0.000071 syn match cssTextAttr contained "\<line-through\>"
    6              0.000058 syn match cssTextAttr contained "\<\(text-\)\=\(top\|bottom\)\>"
    6              0.000039 syn keyword cssTextAttr contained ltr rtl embed nowrap
    6              0.000046 syn keyword cssTextAttr contained underline overline blink sub super middle
    6              0.000037 syn keyword cssTextAttr contained capitalize uppercase lowercase
    6              0.000037 syn keyword cssTextAttr contained justify baseline sub super
    6              0.000045 syn keyword cssTextAttr contained optimizeLegibility optimizeSpeed geometricPrecision
    6              0.000057 syn match cssTextAttr contained "\<pre\(-\(line\|wrap\)\)\=\>"
    6              0.000054 syn match cssTextAttr contained "\<\(allow\|force\)-end\>"
    6              0.000037 syn keyword cssTextAttr contained start end adjacent
    6              0.000111 syn match cssTextAttr contained "\<inter-\(word\|ideographic\|cluster\)\>"
    6              0.000039 syn keyword cssTextAttr contained distribute kashida first last
    6              0.000039 syn keyword cssTextAttr contained clip ellipsis unrestricted suppress
    6              0.000056 syn match cssTextAttr contained "\<break-all\>"
    6              0.000042 syn match cssTextAttr contained "\<break-word\>"
    6              0.000025 syn keyword cssTextAttr contained manual
    6              0.000044 syn match cssTextAttr contained "\<bidi-override\>"
                            
    6              0.000097 syn match cssTransformProp contained "\<transform\(-\(origin\|style\)\)\=\>"
    6              0.000230 syn match cssTransformProp contained "\<perspective\(-origin\)\=\>"
    6              0.000090 syn match cssTransformProp contained "\<backface-visibility\>"
                            
                            " CSS Transitions
                            " http://www.w3.org/TR/css3-transitions/
    6              0.000127 syn match cssTransitionProp contained "\<transition\(-\(delay\|duration\|property\|timing-function\)\)\=\>"
                            
                            " transition-time-function attributes
    6              0.000066 syn match cssTransitionAttr contained "\<linear\(-gradient\)\@!\>"
    6              0.000059 syn match cssTransitionAttr contained "\<ease\(-\(in-out\|out\|in\)\)\=\>"
    6              0.000052 syn match cssTransitionAttr contained "\<step\(-start\|-end\)\=\>"
                            "------------------------------------------------
                            " CSS Basic User Interface Module Level 3 (CSS3 UI)
                            " http://www.w3.org/TR/css3-ui/
    6              0.000076 syn match cssUIProp contained "\<box-sizing\>"
    6              0.000069 syn match cssUIAttr contained "\<\(content\|padding\|border\)\(-box\)\=\>"
                            
    6              0.000059 syn keyword cssUIProp contained cursor
    6              0.000105 syn match cssUIAttr contained "\<\(\([ns]\=[ew]\=\)\|col\|row\|nesw\|nwse\)-resize\>"
    6              0.000049 syn keyword cssUIAttr contained crosshair help move pointer alias copy
    6              0.000061 syn keyword cssUIAttr contained progress wait text cell move
    6              0.000058 syn match cssUIAttr contained "\<context-menu\>"
    6              0.000044 syn match cssUIAttr contained "\<no-drop\>"
    6              0.000119 syn match cssUIAttr contained "\<not-allowed\>"
    6              0.000045 syn match cssUIAttr contained "\<all-scroll\>"
    6              0.000056 syn match cssUIAttr contained "\<\(vertical-\)\=text\>"
    6              0.000058 syn match cssUIAttr contained "\<zoom\(-in\|-out\)\=\>"
                            
    6              0.000080 syn match cssUIProp contained "\<ime-mode\>"
    6              0.000038 syn keyword cssUIAttr contained active inactive disabled
                            
    6              0.000133 syn match cssUIProp contained "\<nav-\(down\|index\|left\|right\|up\)\=\>"
    6              0.000109 syn match cssUIProp contained "\<outline\(-\(width\|style\|color\|offset\)\)\=\>"
    6              0.000028 syn keyword cssUIAttr contained invert
                            
    6              0.000055 syn keyword cssUIProp contained icon resize
    6              0.000034 syn keyword cssUIAttr contained both horizontal vertical
                            
    6              0.000101 syn match cssUIProp contained "\<text-overflow\>"
    6              0.000031 syn keyword cssUIAttr contained clip ellipsis
                            
    6              0.000103 syn match cssUIProp contained "\<image-rendering\>"
    6              0.000030 syn keyword cssUIAttr contained pixellated
    6              0.000044 syn match cssUIAttr contained "\<crisp-edges\>"
                            
                            "------------------------------------------------
                            " Webkit/iOS specific attributes
    6              0.000041 syn match cssUIAttr contained '\<preserve-3d\>'
                            " IE specific attributes
    6              0.000372 syn match cssIEUIAttr contained '\<bicubic\>'
                            
                            " Webkit/iOS specific properties
    6              0.000125 syn match cssUIProp contained '\<tap-highlight-color\|user-select\|touch-callout\>'
                            " IE specific properties
    6              0.000072 syn match cssIEUIProp contained '\<interpolation-mode\|zoom\|filter\>'
                            
                            " Webkit/Firebox specific properties/attributes
    6              0.000056 syn keyword cssUIProp contained appearance
    6              0.000044 syn keyword cssUIAttr contained window button field icon document menu
                            
                            
    6              0.000082 syn match cssAuralProp contained "\<\(pause\|cue\)\(-\(before\|after\)\)\=\>"
    6              0.000149 syn match cssAuralProp contained "\<\(play-during\|speech-rate\|voice-family\|pitch\(-range\)\=\|speak\(-\(punctuation\|numeral\|header\)\)\=\)\>"
    6              0.000049 syn keyword cssAuralProp contained volume during azimuth elevation stress richness
    6              0.000054 syn match cssAuralAttr contained "\<\(x-\)\=\(soft\|loud\)\>"
    6              0.000027 syn keyword cssAuralAttr contained silent
    6              0.000046 syn match cssAuralAttr contained "\<spell-out\>"
    6              0.000029 syn keyword cssAuralAttr contained non mix
    6              0.000060 syn match cssAuralAttr contained "\<\(left\|right\)-side\>"
    6              0.000064 syn match cssAuralAttr contained "\<\(far\|center\)-\(left\|center\|right\)\>"
    6              0.000033 syn keyword cssAuralAttr contained leftwards rightwards behind
    6              0.000039 syn keyword cssAuralAttr contained below level above lower higher
    6              0.000058 syn match cssAuralAttr contained "\<\(x-\)\=\(slow\|fast\|low\|high\)\>"
    6              0.000030 syn keyword cssAuralAttr contained faster slower
    6              0.000046 syn keyword cssAuralAttr contained male female child code digits continuous
                            
                            " mobile text
    6              0.000052 syn match cssMobileTextProp contained "\<text-size-adjust\>"
                            
    6              0.000042 syn keyword cssMediaProp contained width height orientation scan
    6              0.000081 syn match cssMediaProp contained /\(\(max\|min\)-\)\=\(\(device\)-\)\=aspect-ratio/
    6              0.000069 syn match cssMediaProp contained /\(\(max\|min\)-\)\=device-pixel-ratio/
    6              0.000069 syn match cssMediaProp contained /\(\(max\|min\)-\)\=device-\(height\|width\)/
    6              0.000101 syn match cssMediaProp contained /\(\(max\|min\)-\)\=\(height\|width\|resolution\|monochrome\|color\(-index\)\=\)/
    6              0.000042 syn keyword cssMediaAttr contained portrait landscape progressive interlace
    6              0.000109 syn match cssKeyFrameProp contained /\(\d\+\(\.\d\+\)\?%\|\(\<from\|to\>\)\)/ nextgroup=cssDefinition
    6              0.000139 syn match cssPageMarginProp /@\(\(top\|left\|right\|bottom\)-\(left\|center\|right\|middle\|bottom\)\)\(-corner\)\=/ contained nextgroup=cssDefinition
    6              0.000037 syn keyword cssPageProp contained content size
    6              0.000033 syn keyword cssPageProp contained orphans widows
    6              0.000065 syn keyword cssFontDescriptorProp contained src
    6              0.000090 syn match cssFontDescriptorProp contained "\<unicode-range\>"
                            " unicode-range attributes
    6              0.000074 syn match cssFontDescriptorAttr contained "U+[0-9A-Fa-f?]\+"
    6              0.000048 syn match cssFontDescriptorAttr contained "U+\x\+-\x\+"
                            
    6              0.000071 syn match cssBraces contained "[{}]"
    6              0.000062 syn match cssError contained "{@<>"
    6              0.019076 syn region cssDefinition transparent matchgroup=cssBraces start='{' end='}' contains=cssTagName,cssAttributeSelector,cssClassName,cssIdentifier,cssAtRule,cssAttrRegion,css.*Prop,cssComment,cssValue.*,cssColor,cssURL,cssImportant,cssCustomProp,cssError,cssStringQ,cssStringQQ,cssFunction,cssUnicodeEscape,cssVendor,cssDefinition,cssHacks,cssNoise fold
    6              0.000062 syn match cssBraceError "}"
    6              0.000040 syn match cssAttrComma ","
                            
                            " Pseudo class
                            " http://www.w3.org/TR/css3-selectors/
    6              0.000238 syn match cssPseudoClass ":[A-Za-z0-9_-]*" contains=cssNoise,cssPseudoClassId,cssUnicodeEscape,cssVendor,cssPseudoClassFn
    6              0.000062 syn keyword cssPseudoClassId contained link visited active hover before after left right
    6              0.000056 syn keyword cssPseudoClassId contained root empty target enable disabled checked invalid
    6              0.000092 syn match cssPseudoClassId contained "\<first-\(line\|letter\)\>"
    6              0.000131 syn match cssPseudoClassId contained "\<\(first\|last\|only\)-\(of-type\|child\)\>"
    6              0.000237 syn region cssPseudoClassFn contained matchgroup=cssFunctionName start="\<\(not\|lang\|\(nth\|nth-last\)-\(of-type\|child\)\)(" end=")" contains=cssStringQ,cssStringQQ
                            " ------------------------------------
                            " Vendor specific properties
    6              0.000049 syn match cssPseudoClassId contained  "\<selection\>"
    6              0.000055 syn match cssPseudoClassId contained  "\<focus\(-inner\)\=\>"
    6              0.000055 syn match cssPseudoClassId contained  "\<\(input-\)\=placeholder\>"
                            
                            " Misc highlight groups
    6              0.000140 syntax match cssUnitDecorators /\(#\|-\|+\|%\|mm\|cm\|in\|pt\|pc\|em\|ex\|px\|ch\|rem\|vh\|vw\|vmin\|vmax\|dpi\|dppx\|dpcm\|Hz\|kHz\|s\|ms\|deg\|grad\|rad\)/ contained
    6              0.000048 syntax match cssNoise contained /\(:\|;\|\/\)/
                            
                            " Comment
    6              0.000092 syn region cssComment start="/\*" end="\*/" contains=@Spell fold
                            
    6              0.000078 syn match cssUnicodeEscape "\\\x\{1,6}\s\?"
    6              0.000044 syn match cssSpecialCharQQ +\\\\\|\\"+ contained
    6              0.000041 syn match cssSpecialCharQ +\\\\\|\\'+ contained
    6              0.000138 syn region cssStringQQ start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=cssUnicodeEscape,cssSpecialCharQQ
    6              0.000127 syn region cssStringQ start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=cssUnicodeEscape,cssSpecialCharQ
                            
                            " Vendor Prefix
    6              0.000103 syn match cssVendor contained "-\(webkit\|moz\|o\|ms\)-"
                            
                            " Various CSS Hack characters
                            " In earlier versions of IE (6 and 7), one can prefix property names
                            " with a _ or * to isolate those definitions to particular versions of IE
                            " This is purely decorative and therefore we assign to the same highlight
                            " group to cssVendor, for more information:
                            " http://www.paulirish.com/2009/browser-specific-css-hacks/
    6              0.000044 syn match cssHacks contained /\(_\|*\)/
                            
                            " Attr Enhance
                            " Some keywords are both Prop and Attr, so we have to handle them
                            " cssPseudoClassId is hidden by cssAttrRegion, so we add it here. see #69
    6              0.026485 syn region cssAttrRegion start=/:/ end=/\ze\(;\|)\|}\|{\)/ contained contains=cssPseudoClassId,css.*Attr,cssColor,cssImportant,cssValue.*,cssFunction,cssString.*,cssURL,cssComment,cssUnicodeEscape,cssVendor,cssError,cssAttrComma,cssNoise
                            
                            " Hack for transition
                            " 'transition' has Props after ':'.
    6              0.036035 syn region cssAttrRegion start=/transition\s*:/ end=/\ze\(;\|)\|}\)/ contained contains=css.*Prop,css.*Attr,cssColor,cssImportant,cssValue.*,cssFunction,cssString.*,cssURL,cssComment,cssUnicodeEscape,cssVendor,cssError,cssAttrComma,cssNoise
                            
    6              0.000148 syn match cssAtKeyword /@\(font-face\|media\|keyframes\|import\|charset\|namespace\|page\|supports\)/
                            
    6              0.000044 syn keyword cssAtRuleLogical only not and contained
                            
                            " @media
                            " Reference: http://www.w3.org/TR/css3-mediaqueries/
    6              0.000458 syn region cssAtRule start=/@media\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssMediaProp,cssValueLength,cssAtRuleLogical,cssValueInteger,cssMediaAttr,cssVendor,cssMediaType,cssComment,cssCustomProp,cssFunctionName nextgroup=cssDefinition
    6              0.000083 syn keyword cssMediaType contained screen print aural braille embossed handheld projection tty tv speech all contained
                            
                            " @page
                            " http://www.w3.org/TR/css3-page/
    6              0.000168 syn region cssAtRule start=/@page\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssPagePseudo,cssComment nextgroup=cssDefinition
    6              0.000082 syn match cssPagePseudo /:\(left\|right\|first\|blank\)/ contained skipwhite skipnl
                            " @keyframe
                            " http://www.w3.org/TR/css3-animations/#keyframes
    6              0.000230 syn region cssAtRule start=/@\(-[a-z]\+-\)\=keyframes\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssVendor,cssComment nextgroup=cssDefinition
                            
    6              0.000460 syn region cssAtRule start=/@import\>/    end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword,cssURL,cssMediaProp,cssValueLength,cssAtRuleLogical,cssValueInteger,cssMediaAttr,cssMediaType
    6              0.000197 syn region cssAtRule start=/@charset\>/   end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword
    6              0.000185 syn region cssAtRule start=/@namespace\>/ end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword
                            
                            " @supports
                            " https://www.w3.org/TR/css3-conditional/#at-supports
    6              0.018824 syn region cssAtRule start=/@supports\>/ end=/\ze{/ skipwhite skipnl contains=cssAtRuleLogical,cssAttrRegion,css.*Prop,cssValue.*,cssVendor,cssAtKeyword,cssComment nextgroup=cssDefinition
                            
                            
    6              0.000061 if main_syntax == "css"
                              syn sync minlines=10
    6              0.000011 endif
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
    6              0.000082 hi def link cssComment Comment
    6              0.000096 hi def link cssVendor Comment
    6              0.000066 hi def link cssHacks Comment
    6              0.000065 hi def link cssTagName Statement
    6              0.000061 hi def link cssDeprecated Error
    6              0.000089 hi def link cssSelectorOp Special
    6              0.000087 hi def link cssSelectorOp2 Special
    6              0.000058 hi def link cssAttrComma Special
                            
    6              0.000061 hi def link cssAnimationProp cssProp
    6              0.000052 hi def link cssBackgroundProp cssProp
    6              0.000027 hi def link cssBorderProp cssProp
    6              0.000053 hi def link cssBoxProp cssProp
    6              0.000027 hi def link cssCascadeProp cssProp
    6              0.000052 hi def link cssColorProp cssProp
    6              0.000026 hi def link cssContentForPagedMediaProp cssProp
    6              0.000051 hi def link cssDimensionProp cssProp
    6              0.000052 hi def link cssFlexibleBoxProp cssProp
    6              0.000051 hi def link cssFontProp cssProp
    6              0.000051 hi def link cssGeneratedContentProp cssProp
    6              0.000025 hi def link cssGridProp cssProp
    6              0.000026 hi def link cssHyerlinkProp cssProp
    6              0.000025 hi def link cssInteractProp cssProp
    6              0.000023 hi def link cssLineboxProp cssProp
    6              0.000051 hi def link cssListProp cssProp
    6              0.000024 hi def link cssMarqueeProp cssProp
    6              0.000027 hi def link cssMultiColumnProp cssProp
    6              0.000023 hi def link cssPagedMediaProp cssProp
    6              0.000053 hi def link cssPositioningProp cssProp
    6              0.000053 hi def link cssPrintProp cssProp
    6              0.000024 hi def link cssRubyProp cssProp
    6              0.000023 hi def link cssSpeechProp cssProp
    6              0.000051 hi def link cssTableProp cssProp
    6              0.000052 hi def link cssTextProp cssProp
    6              0.000054 hi def link cssTransformProp cssProp
    6              0.000052 hi def link cssTransitionProp cssProp
    6              0.000050 hi def link cssUIProp cssProp
    6              0.000025 hi def link cssIEUIProp cssProp
    6              0.000024 hi def link cssAuralProp cssProp
    6              0.000050 hi def link cssRenderProp cssProp
    6              0.000024 hi def link cssMobileTextProp cssProp
                            
    6              0.000025 hi def link cssAnimationAttr cssAttr
    6              0.000025 hi def link cssBackgroundAttr cssAttr
    6              0.000024 hi def link cssBorderAttr cssAttr
    6              0.000024 hi def link cssBoxAttr cssAttr
    6              0.000023 hi def link cssContentForPagedMediaAttr cssAttr
    6              0.000021 hi def link cssDimensionAttr cssAttr
    6              0.000025 hi def link cssFlexibleBoxAttr cssAttr
    6              0.000024 hi def link cssFontAttr cssAttr
    6              0.000024 hi def link cssGeneratedContentAttr cssAttr
    6              0.000020 hi def link cssGridAttr cssAttr
    6              0.000021 hi def link cssHyerlinkAttr cssAttr
    6              0.000023 hi def link cssInteractAttr cssAttr
    6              0.000021 hi def link cssLineboxAttr cssAttr
    6              0.000023 hi def link cssListAttr cssAttr
    6              0.000021 hi def link cssMarginAttr cssAttr
    6              0.000021 hi def link cssMarqueeAttr cssAttr
    6              0.000025 hi def link cssMultiColumnAttr cssAttr
    6              0.000021 hi def link cssPaddingAttr cssAttr
    6              0.000021 hi def link cssPagedMediaAttr cssAttr
    6              0.000025 hi def link cssPositioningAttr cssAttr
    6              0.000025 hi def link cssGradientAttr cssAttr
    6              0.000025 hi def link cssPrintAttr cssAttr
    6              0.000021 hi def link cssRubyAttr cssAttr
    6              0.000020 hi def link cssSpeechAttr cssAttr
    6              0.000023 hi def link cssTableAttr cssAttr
    6              0.000023 hi def link cssTextAttr cssAttr
    6              0.000021 hi def link cssTransformAttr cssAttr
    6              0.000023 hi def link cssTransitionAttr cssAttr
    6              0.000026 hi def link cssUIAttr cssAttr
    6              0.000023 hi def link cssIEUIAttr cssAttr
    6              0.000023 hi def link cssAuralAttr cssAttr
    6              0.000020 hi def link cssRenderAttr cssAttr
    6              0.000025 hi def link cssCascadeAttr cssAttr
    6              0.000023 hi def link cssCommonAttr cssAttr
                            
    6              0.000059 hi def link cssPseudoClassId PreProc
    6              0.000065 hi def link cssPseudoClassLang Constant
    6              0.000068 hi def link cssValueLength Number
    6              0.000069 hi def link cssValueInteger Number
    6              0.000068 hi def link cssValueNumber Number
    6              0.000068 hi def link cssValueAngle Number
    6              0.000068 hi def link cssValueTime Number
    6              0.000070 hi def link cssValueFrequency Number
    6              0.000069 hi def link cssFunction Constant
    6              0.000066 hi def link cssURL String
    6              0.000086 hi def link cssFunctionName Function
    6              0.000059 hi def link cssFunctionComma Function
    6              0.000092 hi def link cssColor Constant
    6              0.000083 hi def link cssIdentifier Function
    6              0.000057 hi def link cssAtRule Include
    6              0.000062 hi def link cssAtKeyword PreProc
    6              0.000086 hi def link cssImportant Special
    6              0.000062 hi def link cssCustomProp Special
    6              0.000084 hi def link cssBraces Function
    6              0.000059 hi def link cssBraceError Error
    6              0.000062 hi def link cssError Error
    6              0.000154 hi def link cssUnicodeEscape Special
    6              0.000072 hi def link cssStringQQ String
    6              0.000071 hi def link cssStringQ String
    6              0.000072 hi def link cssAttributeSelector String
    6              0.000062 hi def link cssMediaType Special
    6              0.000066 hi def link cssMediaComma Normal
    6              0.000064 hi def link cssAtRuleLogical Statement
    6              0.000029 hi def link cssMediaProp cssProp
    6              0.000024 hi def link cssMediaAttr cssAttr
    6              0.000058 hi def link cssPagePseudo PreProc
    6              0.000032 hi def link cssPageMarginProp cssAtKeyword
    6              0.000026 hi def link cssPageProp cssProp
    6              0.000063 hi def link cssKeyFrameProp Constant
    6              0.000059 hi def link cssFontDescriptor Special
    6              0.000061 hi def link cssFontDescriptorProp cssProp
    6              0.000024 hi def link cssFontDescriptorAttr cssAttr
    6              0.000055 hi def link cssUnicodeRange Constant
    6              0.000084 hi def link cssClassName Function
    6              0.000060 hi def link cssClassNameDot Function
    6              0.000059 hi def link cssProp StorageClass
    6              0.000062 hi def link cssAttr Constant
    6              0.000067 hi def link cssUnitDecorators Number
    6              0.000028 hi def link cssNoise Noise
                            
    6              0.000040 let b:current_syntax = "css"
                            
    6              0.000025 if main_syntax == 'css'
                              unlet main_syntax
    6              0.000008 endif
                            
    6              0.000110 let &cpo = s:cpo_save
    6              0.000022 unlet s:cpo_save
                            
                            " vim: ts=8

SCRIPT  C:\Neovim\share\nvim\runtime\syntax\css.vim
Sourced 6 times
Total time:   0.000455
 Self time:   0.000455

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:     Cascading Style Sheets
                            " Previous Contributor List:
                            "               Jules Wang      <w.jq0722@gmail.com>
                            "               Claudio Fleiner <claudio@fleiner.com> (Maintainer)
                            "               Yeti            (Add full CSS2, HTML4 support)
                            "               Nikolai Weibull (Add CSS2 support)
                            " URL:          https://github.com/jsit/css.vim
                            " Maintainer:   Jay Sitter <jay@jaysitter.com>
                            " Last Change:  2019 Jul. 29
                            
                            " quit when a syntax file was already loaded
    6              0.000073 if !exists("main_syntax")
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'css'
    6              0.000049 elseif exists("b:current_syntax") && b:current_syntax == "css"
    6              0.000012   finish
                            endif
                            
                            let s:cpo_save = &cpo
                            set cpo&vim
                            
                            syn case ignore
                            
                            " HTML4 tags
                            syn keyword cssTagName abbr address area a b base
                            syn keyword cssTagName bdo blockquote body br button
                            syn keyword cssTagName caption cite code col colgroup dd del
                            syn keyword cssTagName dfn div dl dt em fieldset form
                            syn keyword cssTagName h1 h2 h3 h4 h5 h6 head hr html img i
                            syn keyword cssTagName iframe input ins isindex kbd label legend li
                            syn keyword cssTagName link map menu meta noscript ol optgroup
                            syn keyword cssTagName option p param pre q s samp script small
                            syn keyword cssTagName span strong sub sup tbody td
                            syn keyword cssTagName textarea tfoot th thead title tr ul u var
                            syn keyword cssTagName object svg
                            syn match   cssTagName /\<select\>\|\<style\>\|\<table\>/
                            
                            " 34 HTML5 tags
                            syn keyword cssTagName article aside audio bdi canvas command data
                            syn keyword cssTagName datalist details dialog embed figcaption figure footer
                            syn keyword cssTagName header hgroup keygen main mark menuitem meter nav
                            syn keyword cssTagName output progress rt rp ruby section
                            syn keyword cssTagName source summary time track video wbr
                            
                            " Tags not supported in HTML5
                            " acronym applet basefont big center dir
                            " font frame frameset noframes strike tt
                            
                            syn match cssTagName "\*"
                            
                            " selectors
                            syn match cssSelectorOp "[,>+~]"
                            syn match cssSelectorOp2 "[~|^$*]\?=" contained
                            syn region cssAttributeSelector matchgroup=cssSelectorOp start="\[" end="]" contains=cssUnicodeEscape,cssSelectorOp2,cssStringQ,cssStringQQ
                            
                            " .class and #id
                            syn match cssClassName "\.-\=[A-Za-z_][A-Za-z0-9_-]*" contains=cssClassNameDot
                            syn match cssClassNameDot contained '\.'
                            
                            try
                            syn match cssIdentifier "#[A-Za-zÀ-ÿ_@][A-Za-zÀ-ÿ0-9_@-]*"
                            catch /^.*/
                            syn match cssIdentifier "#[A-Za-z_@][A-Za-z0-9_@-]*"
                            endtry
                            
                            " digits
                            syn match cssValueInteger contained "[-+]\=\d\+" contains=cssUnitDecorators
                            syn match cssValueNumber contained "[-+]\=\d\+\(\.\d*\)\=" contains=cssUnitDecorators
                            syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=\(mm\|cm\|in\|pt\|pc\|em\|ex\|px\|rem\|dpi\|dppx\|dpcm\|fr\|vw\|vh\|vmin\|vmax\|ch\)\>" contains=cssUnitDecorators
                            syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=%" contains=cssUnitDecorators
                            syn match cssValueAngle contained "[-+]\=\d\+\(\.\d*\)\=\(deg\|grad\|rad\)\>" contains=cssUnitDecorators
                            syn match cssValueTime contained "+\=\d\+\(\.\d*\)\=\(ms\|s\)\>" contains=cssUnitDecorators
                            syn match cssValueFrequency contained "+\=\d\+\(\.\d*\)\=\(Hz\|kHz\)\>" contains=cssUnitDecorators
                            
                            " The 16 basic color names
                            syn keyword cssColor contained aqua black blue fuchsia gray green lime maroon navy olive purple red silver teal yellow
                            
                            " 130 more color names
                            syn keyword cssColor contained aliceblue antiquewhite aquamarine azure
                            syn keyword cssColor contained beige bisque blanchedalmond blueviolet brown burlywood
                            syn keyword cssColor contained cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan
                            syn match cssColor contained /\<dark\(blue\|cyan\|goldenrod\|gray\|green\|grey\|khaki\)\>/
                            syn match cssColor contained /\<dark\(magenta\|olivegreen\|orange\|orchid\|red\|salmon\|seagreen\)\>/
                            syn match cssColor contained /\<darkslate\(blue\|gray\|grey\)\>/
                            syn match cssColor contained /\<dark\(turquoise\|violet\)\>/
                            syn keyword cssColor contained deeppink deepskyblue dimgray dimgrey dodgerblue firebrick
                            syn keyword cssColor contained floralwhite forestgreen gainsboro ghostwhite gold
                            syn keyword cssColor contained goldenrod greenyellow grey honeydew hotpink
                            syn keyword cssColor contained indianred indigo ivory khaki lavender lavenderblush lawngreen
                            syn keyword cssColor contained lemonchiffon limegreen linen magenta
                            syn match cssColor contained /\<light\(blue\|coral\|cyan\|goldenrodyellow\|gray\|green\)\>/
                            syn match cssColor contained /\<light\(grey\|pink\|salmon\|seagreen\|skyblue\|yellow\)\>/
                            syn match cssColor contained /\<light\(slategray\|slategrey\|steelblue\)\>/
                            syn match cssColor contained /\<medium\(aquamarine\|blue\|orchid\|purple\|seagreen\)\>/
                            syn match cssColor contained /\<medium\(slateblue\|springgreen\|turquoise\|violetred\)\>/
                            syn keyword cssColor contained midnightblue mintcream mistyrose moccasin navajowhite
                            syn keyword cssColor contained oldlace olivedrab orange orangered orchid
                            syn match cssColor contained /\<pale\(goldenrod\|green\|turquoise\|violetred\)\>/
                            syn keyword cssColor contained papayawhip peachpuff peru pink plum powderblue
                            syn keyword cssColor contained rosybrown royalblue rebeccapurple saddlebrown salmon
                            syn keyword cssColor contained sandybrown seagreen seashell sienna skyblue slateblue
                            syn keyword cssColor contained slategray slategrey snow springgreen steelblue tan
                            syn keyword cssColor contained thistle tomato turquoise violet wheat
                            syn keyword cssColor contained whitesmoke yellowgreen
                            
                            " FIXME: These are actually case-insensitive too, but (a) specs recommend using
                            " mixed-case (b) it's hard to highlight the word `Background' correctly in
                            " all situations
                            syn case match
                            syn keyword cssColor contained ActiveBorder ActiveCaption AppWorkspace ButtonFace ButtonHighlight ButtonShadow ButtonText CaptionText GrayText Highlight HighlightText InactiveBorder InactiveCaption InactiveCaptionText InfoBackground InfoText Menu MenuText Scrollbar ThreeDDarkShadow ThreeDFace ThreeDHighlight ThreeDLightShadow ThreeDShadow Window WindowFrame WindowText Background
                            syn case ignore
                            
                            syn match cssImportant contained "!\s*important\>"
                            syn match cssCustomProp contained "--[a-zA-Z0-9-_]*"
                            
                            syn match cssColor contained "\<transparent\>"
                            syn match cssColor contained "\<currentColor\>"
                            syn match cssColor contained "\<white\>"
                            syn match cssColor contained "#\x\{3,4\}\>" contains=cssUnitDecorators
                            syn match cssColor contained "#\x\{6\}\>" contains=cssUnitDecorators
                            syn match cssColor contained "#\x\{8\}\>" contains=cssUnitDecorators
                            
                            syn region cssURL contained matchgroup=cssFunctionName start="\<\(uri\|url\|local\|format\)\s*(" end=")" contains=cssStringQ,cssStringQQ oneline
                            syn region cssFunction contained matchgroup=cssFunctionName start="\<\(var\|calc\)\s*(" end=")" contains=cssCustomProp,cssValue.*,cssFunction,cssColor,cssStringQ,cssStringQQ oneline
                            syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgb\|clip\|attr\|counter\|rect\|cubic-bezier\|steps\)\s*(" end=")" oneline  contains=cssValueInteger,cssValueNumber,cssValueLength,cssFunctionComma
                            syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgba\|hsl\|hsla\|color-stop\|from\|to\)\s*(" end=")" oneline  contains=cssColor,cssValueInteger,cssValueNumber,cssValueLength,cssFunctionComma,cssFunction
                            syn region cssFunction contained matchgroup=cssFunctionName start="\<\(linear-\|radial-\)\=\gradient\s*(" end=")" oneline  contains=cssColor,cssValueInteger,cssValueNumber,cssValueLength,cssFunction,cssGradientAttr,cssFunctionComma
                            syn region cssFunction contained matchgroup=cssFunctionName start="\<\(matrix\(3d\)\=\|scale\(3d\|X\|Y\|Z\)\=\|translate\(3d\|X\|Y\|Z\)\=\|skew\(X\|Y\)\=\|rotate\(3d\|X\|Y\|Z\)\=\|perspective\)\s*(" end=")" oneline contains=cssValueInteger,cssValueNumber,cssValueLength,cssValueAngle,cssFunctionComma
                            syn region cssFunction contained matchgroup=cssFunctionName start="\<\(blur\|brightness\|contrast\|drop-shadow\|grayscale\|hue-rotate\|invert\|opacity\|saturate\|sepia\)\s*(" end=")" oneline contains=cssValueInteger,cssValueNumber,cssValueLength,cssValueAngle,cssFunctionComma
                            syn keyword cssGradientAttr contained top bottom left right cover center middle ellipse at
                            syn match cssFunctionComma contained ","
                            
                            " Common Prop and Attr
                            syn keyword cssCommonAttr contained auto none inherit all default normal
                            syn keyword cssCommonAttr contained top bottom center stretch hidden visible
                            syn match cssCommonAttr contained "\<\(max-\|min-\|fit-\)content\>"
                            "------------------------------------------------
                            " CSS Animations
                            " http://www.w3.org/TR/css3-animations/
                            syn match cssAnimationProp contained "\<animation\(-\(delay\|direction\|duration\|fill-mode\|name\|play-state\|timing-function\|iteration-count\)\)\=\>"
                            
                            " animation-direction attributes
                            syn keyword cssAnimationAttr contained alternate reverse
                            syn match cssAnimationAttr contained "\<alternate-reverse\>"
                            
                            " animation-fill-mode attributes
                            syn keyword cssAnimationAttr contained forwards backwards both
                            
                            " animation-play-state attributes
                            syn keyword cssAnimationAttr contained running paused
                            
                            " animation-iteration-count attributes
                            syn keyword cssAnimationAttr contained infinite
                            "------------------------------------------------
                            "  CSS Backgrounds and Borders Module Level 3
                            "  http://www.w3.org/TR/css3-background/
                            syn match cssBackgroundProp contained "\<background\(-\(attachment\|clip\|color\|image\|origin\|position\|repeat\|size\)\)\=\>"
                            " background-attachment attributes
                            syn keyword cssBackgroundAttr contained scroll fixed local
                            
                            " background-position attributes
                            syn keyword cssBackgroundAttr contained left center right top bottom
                            
                            " background-repeat attributes
                            syn match cssBackgroundAttr contained "\<no-repeat\>"
                            syn match cssBackgroundAttr contained "\<repeat\(-[xy]\)\=\>"
                            
                            " background-size attributes
                            syn keyword cssBackgroundAttr contained cover contain
                            
                            syn match cssBorderProp contained "\<border\(-\(top\|right\|bottom\|left\)\)\=\(-\(width\|color\|style\)\)\=\>"
                            syn match cssBorderProp contained "\<border\(-\(top\|bottom\)-\(left\|right\)\)\=-radius\>"
                            syn match cssBorderProp contained "\<border-image\(-\(outset\|repeat\|slice\|source\|width\)\)\=\>"
                            syn match cssBorderProp contained "\<box-decoration-break\>"
                            syn match cssBorderProp contained "\<box-shadow\>"
                            
                            " border-image attributes
                            syn keyword cssBorderAttr contained stretch round fill
                            
                            " border-style attributes
                            syn keyword cssBorderAttr contained dotted dashed solid double groove ridge inset outset
                            
                            " border-width attributes
                            syn keyword cssBorderAttr contained thin thick medium
                            
                            " box-decoration-break attributes
                            syn keyword cssBorderAttr contained clone slice
                            "------------------------------------------------
                            
                            syn match cssBoxProp contained "\<padding\(-\(top\|right\|bottom\|left\)\)\=\>"
                            syn match cssBoxProp contained "\<margin\(-\(top\|right\|bottom\|left\)\)\=\>"
                            syn match cssBoxProp contained "\<overflow\(-\(x\|y\|style\)\)\=\>"
                            syn match cssBoxProp contained "\<rotation\(-point\)\=\>"
                            syn keyword cssBoxAttr contained visible hidden scroll auto
                            syn match cssBoxAttr contained "\<no-\(display\|content\)\>"
                            
                            syn keyword cssCascadeProp contained all
                            syn keyword cssCascadeAttr contained initial unset revert
                            
                            syn keyword cssColorProp contained opacity
                            syn match cssColorProp contained "\<color-profile\>"
                            syn match cssColorProp contained "\<rendering-intent\>"
                            
                            
                            syn match cssDimensionProp contained "\<\(min\|max\)-\(width\|height\)\>"
                            syn keyword cssDimensionProp contained height
                            syn keyword cssDimensionProp contained width
                            
                            " CSS Flexible Box Layout Module Level 1
                            " http://www.w3.org/TR/css3-flexbox/
                            " CSS Box Alignment Module Level 3
                            " http://www.w3.org/TR/css-align-3/
                            syn match cssFlexibleBoxProp contained "\<flex\(-\(direction\|wrap\|flow\|grow\|shrink\|basis\)\)\=\>"
                            syn match cssFlexibleBoxProp contained "\<\(align\|justify\)\(-\(items\|self\|content\)\)\=\>"
                            syn keyword cssFlexibleBoxProp contained order
                            
                            syn match cssFlexibleBoxAttr contained "\<\(row\|column\|wrap\)\(-reverse\)\=\>"
                            syn keyword cssFlexibleBoxAttr contained nowrap stretch baseline center
                            syn match cssFlexibleBoxAttr contained "\<flex\(-\(start\|end\)\)\=\>"
                            syn match cssFlexibleBoxAttr contained "\<space\(-\(between\|around\)\)\=\>"
                            
                            " CSS Fonts Module Level 3
                            " http://www.w3.org/TR/css-fonts-3/
                            syn match cssFontProp contained "\<font\(-\(family\|\|feature-settings\|kerning\|language-override\|size\(-adjust\)\=\|stretch\|style\|synthesis\|variant\(-\(alternates\|caps\|east-asian\|ligatures\|numeric\|position\)\)\=\|weight\)\)\=\>"
                            
                            " font attributes
                            syn keyword cssFontAttr contained icon menu caption
                            syn match cssFontAttr contained "\<message-box\>"
                            syn match cssFontAttr contained "\<status-bar\>"
                            syn keyword cssFontAttr contained larger smaller
                            syn match cssFontAttr contained "\<\(x\{1,2\}-\)\=\(large\|small\)\>"
                            syn match cssFontAttr contained "\<small-\(caps\|caption\)\>"
                            " font-family attributes
                            syn match cssFontAttr contained "\<\(sans-\)\=serif\>"
                            syn keyword cssFontAttr contained Antiqua Arial Black Book Charcoal Comic Courier Dingbats Gadget Geneva Georgia Grande Helvetica Impact Linotype Lucida MS Monaco Neue New Palatino Roboto Roman Symbol Tahoma Times Trebuchet Verdana Webdings Wingdings York Zapf
                            syn keyword cssFontAttr contained cursive fantasy monospace
                            " font-feature-settings attributes
                            syn keyword cssFontAttr contained on off
                            " font-stretch attributes
                            syn match cssFontAttr contained "\<\(\(ultra\|extra\|semi\)-\)\=\(condensed\|expanded\)\>"
                            " font-style attributes
                            syn keyword cssFontAttr contained italic oblique
                            " font-synthesis attributes
                            syn keyword cssFontAttr contained weight style
                            " font-weight attributes
                            syn keyword cssFontAttr contained bold bolder lighter
                            " TODO: font-variant-* attributes
                            "------------------------------------------------
                            
                            " Webkit specific property/attributes
                            syn match cssFontProp contained "\<font-smooth\>"
                            syn match cssFontAttr contained "\<\(subpixel-\)\=\antialiased\>"
                            
                            
                            " CSS Multi-column Layout Module
                            " http://www.w3.org/TR/css3-multicol/
                            syn match cssMultiColumnProp contained "\<break-\(after\|before\|inside\)\>"
                            syn match cssMultiColumnProp contained "\<column-\(count\|fill\|gap\|rule\(-\(color\|style\|width\)\)\=\|span\|width\)\>"
                            syn keyword cssMultiColumnProp contained columns
                            syn keyword cssMultiColumnAttr contained balance medium
                            syn keyword cssMultiColumnAttr contained always left right page column
                            syn match cssMultiColumnAttr contained "\<avoid\(-\(page\|column\)\)\=\>"
                            
                            " http://www.w3.org/TR/css3-break/#page-break
                            syn match cssMultiColumnProp contained "\<page\(-break-\(before\|after\|inside\)\)\=\>"
                            
                            " http://www.w3.org/TR/SVG11/interact.html
                            syn match cssInteractProp contained "\<pointer-events\>"
                            syn match cssInteractAttr contained "\<\(visible\)\=\(Painted\|Fill\|Stroke\)\=\>"
                            
                            " TODO find following items in w3c docs.
                            syn keyword cssGeneratedContentProp contained quotes crop
                            syn match cssGeneratedContentProp contained "\<counter-\(reset\|increment\)\>"
                            syn match cssGeneratedContentProp contained "\<move-to\>"
                            syn match cssGeneratedContentProp contained "\<page-policy\>"
                            syn match cssGeneratedContentAttr contained "\<\(no-\)\=\(open\|close\)-quote\>"
                            
                            " https://www.w3.org/TR/css-grid-1/
                            syn match cssGridProp contained "\<grid\>"
                            syn match cssGridProp contained "\<grid-template\(-\(columns\|rows\|areas\)\)\=\>"
                            syn match cssGridProp contained "\<grid-\(column\|row\)\(-\(start\|end\|gap\)\)\=\>"
                            syn match cssGridProp contained "\<grid-\(area\|gap\)\>"
                            syn match cssGridProp contained "\<grid-auto-\(flow\|rows\|columns\)\>"
                            
                            syn match cssHyerlinkProp contained "\<target\(-\(name\|new\|position\)\)\=\>"
                            
                            syn match cssListProp contained "\<list-style\(-\(type\|position\|image\)\)\=\>"
                            syn match cssListAttr contained "\<\(lower\|upper\)-\(roman\|alpha\|greek\|latin\)\>"
                            syn match cssListAttr contained "\<\(hiragana\|katakana\)\(-iroha\)\=\>"
                            syn match cssListAttr contained "\<\(decimal\(-leading-zero\)\=\|cjk-ideographic\)\>"
                            syn keyword cssListAttr contained disc circle square hebrew armenian georgian
                            syn keyword cssListAttr contained inside outside
                            
                            syn keyword cssPositioningProp contained bottom clear clip display float left
                            syn keyword cssPositioningProp contained position right top visibility
                            syn match cssPositioningProp contained "\<z-index\>"
                            syn keyword cssPositioningAttr contained block compact grid
                            syn match cssPositioningAttr contained "\<table\(-\(row-group\|\(header\|footer\)-group\|row\|column\(-group\)\=\|cell\|caption\)\)\=\>"
                            syn keyword cssPositioningAttr contained left right both
                            syn match cssPositioningAttr contained "\<list-item\>"
                            syn match cssPositioningAttr contained "\<inline\(-\(block\|box\|table\|grid\|flex\)\)\=\>"
                            syn match cssPositioningAttr contained "\<flow\(-root\)\=\>"
                            syn keyword cssPositioningAttr contained static relative absolute fixed subgrid
                            
                            syn keyword cssPrintAttr contained landscape portrait crop cross always
                            
                            syn match cssTableProp contained "\<\(caption-side\|table-layout\|border-collapse\|border-spacing\|empty-cells\)\>"
                            syn keyword cssTableAttr contained fixed collapse separate show hide once always
                            
                            
                            syn keyword cssTextProp contained color direction hyphens
                            syn match cssTextProp "\<\(\(word\|letter\)-spacing\|text\(-\(decoration\|transform\|align\|index\|shadow\)\)\=\|vertical-align\|unicode-bidi\|line-height\)\>"
                            syn match cssTextProp contained "\<text-\(justify\|outline\|warp\|align-last\|size-adjust\|rendering\|stroke\|indent\)\>"
                            syn match cssTextProp contained "\<\(word\|line\)-break\|\(overflow\|word\)-wrap\>"
                            syn match cssTextProp contained "\<white-space\>"
                            syn match cssTextProp contained "\<hanging-punctuation\>"
                            syn match cssTextProp contained "\<tab-size\>"
                            syn match cssTextProp contained "\<punctuation-trim\>"
                            syn match cssTextAttr contained "\<line-through\>"
                            syn match cssTextAttr contained "\<\(text-\)\=\(top\|bottom\)\>"
                            syn keyword cssTextAttr contained ltr rtl embed nowrap
                            syn keyword cssTextAttr contained underline overline blink sub super middle
                            syn keyword cssTextAttr contained capitalize uppercase lowercase
                            syn keyword cssTextAttr contained justify baseline sub super
                            syn keyword cssTextAttr contained optimizeLegibility optimizeSpeed geometricPrecision
                            syn match cssTextAttr contained "\<pre\(-\(line\|wrap\)\)\=\>"
                            syn match cssTextAttr contained "\<\(allow\|force\)-end\>"
                            syn keyword cssTextAttr contained start end adjacent
                            syn match cssTextAttr contained "\<inter-\(word\|ideographic\|cluster\)\>"
                            syn keyword cssTextAttr contained distribute kashida first last
                            syn keyword cssTextAttr contained clip ellipsis unrestricted suppress
                            syn match cssTextAttr contained "\<break-all\>"
                            syn match cssTextAttr contained "\<break-word\>"
                            syn keyword cssTextAttr contained manual
                            syn match cssTextAttr contained "\<bidi-override\>"
                            
                            syn match cssTransformProp contained "\<transform\(-\(origin\|style\)\)\=\>"
                            syn match cssTransformProp contained "\<perspective\(-origin\)\=\>"
                            syn match cssTransformProp contained "\<backface-visibility\>"
                            
                            " CSS Transitions
                            " http://www.w3.org/TR/css3-transitions/
                            syn match cssTransitionProp contained "\<transition\(-\(delay\|duration\|property\|timing-function\)\)\=\>"
                            
                            " transition-time-function attributes
                            syn match cssTransitionAttr contained "\<linear\(-gradient\)\@!\>"
                            syn match cssTransitionAttr contained "\<ease\(-\(in-out\|out\|in\)\)\=\>"
                            syn match cssTransitionAttr contained "\<step\(-start\|-end\)\=\>"
                            "------------------------------------------------
                            " CSS Basic User Interface Module Level 3 (CSS3 UI)
                            " http://www.w3.org/TR/css3-ui/
                            syn match cssUIProp contained "\<box-sizing\>"
                            syn match cssUIAttr contained "\<\(content\|padding\|border\)\(-box\)\=\>"
                            
                            syn keyword cssUIProp contained cursor
                            syn match cssUIAttr contained "\<\(\([ns]\=[ew]\=\)\|col\|row\|nesw\|nwse\)-resize\>"
                            syn keyword cssUIAttr contained crosshair help move pointer alias copy
                            syn keyword cssUIAttr contained progress wait text cell move
                            syn match cssUIAttr contained "\<context-menu\>"
                            syn match cssUIAttr contained "\<no-drop\>"
                            syn match cssUIAttr contained "\<not-allowed\>"
                            syn match cssUIAttr contained "\<all-scroll\>"
                            syn match cssUIAttr contained "\<\(vertical-\)\=text\>"
                            syn match cssUIAttr contained "\<zoom\(-in\|-out\)\=\>"
                            
                            syn match cssUIProp contained "\<ime-mode\>"
                            syn keyword cssUIAttr contained active inactive disabled
                            
                            syn match cssUIProp contained "\<nav-\(down\|index\|left\|right\|up\)\=\>"
                            syn match cssUIProp contained "\<outline\(-\(width\|style\|color\|offset\)\)\=\>"
                            syn keyword cssUIAttr contained invert
                            
                            syn keyword cssUIProp contained icon resize
                            syn keyword cssUIAttr contained both horizontal vertical
                            
                            syn match cssUIProp contained "\<text-overflow\>"
                            syn keyword cssUIAttr contained clip ellipsis
                            
                            syn match cssUIProp contained "\<image-rendering\>"
                            syn keyword cssUIAttr contained pixellated
                            syn match cssUIAttr contained "\<crisp-edges\>"
                            
                            "------------------------------------------------
                            " Webkit/iOS specific attributes
                            syn match cssUIAttr contained '\<preserve-3d\>'
                            " IE specific attributes
                            syn match cssIEUIAttr contained '\<bicubic\>'
                            
                            " Webkit/iOS specific properties
                            syn match cssUIProp contained '\<tap-highlight-color\|user-select\|touch-callout\>'
                            " IE specific properties
                            syn match cssIEUIProp contained '\<interpolation-mode\|zoom\|filter\>'
                            
                            " Webkit/Firebox specific properties/attributes
                            syn keyword cssUIProp contained appearance
                            syn keyword cssUIAttr contained window button field icon document menu
                            
                            
                            syn match cssAuralProp contained "\<\(pause\|cue\)\(-\(before\|after\)\)\=\>"
                            syn match cssAuralProp contained "\<\(play-during\|speech-rate\|voice-family\|pitch\(-range\)\=\|speak\(-\(punctuation\|numeral\|header\)\)\=\)\>"
                            syn keyword cssAuralProp contained volume during azimuth elevation stress richness
                            syn match cssAuralAttr contained "\<\(x-\)\=\(soft\|loud\)\>"
                            syn keyword cssAuralAttr contained silent
                            syn match cssAuralAttr contained "\<spell-out\>"
                            syn keyword cssAuralAttr contained non mix
                            syn match cssAuralAttr contained "\<\(left\|right\)-side\>"
                            syn match cssAuralAttr contained "\<\(far\|center\)-\(left\|center\|right\)\>"
                            syn keyword cssAuralAttr contained leftwards rightwards behind
                            syn keyword cssAuralAttr contained below level above lower higher
                            syn match cssAuralAttr contained "\<\(x-\)\=\(slow\|fast\|low\|high\)\>"
                            syn keyword cssAuralAttr contained faster slower
                            syn keyword cssAuralAttr contained male female child code digits continuous
                            
                            " mobile text
                            syn match cssMobileTextProp contained "\<text-size-adjust\>"
                            
                            syn keyword cssMediaProp contained width height orientation scan
                            syn match cssMediaProp contained /\(\(max\|min\)-\)\=\(\(device\)-\)\=aspect-ratio/
                            syn match cssMediaProp contained /\(\(max\|min\)-\)\=device-pixel-ratio/
                            syn match cssMediaProp contained /\(\(max\|min\)-\)\=device-\(height\|width\)/
                            syn match cssMediaProp contained /\(\(max\|min\)-\)\=\(height\|width\|resolution\|monochrome\|color\(-index\)\=\)/
                            syn keyword cssMediaAttr contained portrait landscape progressive interlace
                            syn match cssKeyFrameProp contained /\(\d\+\(\.\d\+\)\?%\|\(\<from\|to\>\)\)/ nextgroup=cssDefinition
                            syn match cssPageMarginProp /@\(\(top\|left\|right\|bottom\)-\(left\|center\|right\|middle\|bottom\)\)\(-corner\)\=/ contained nextgroup=cssDefinition
                            syn keyword cssPageProp contained content size
                            syn keyword cssPageProp contained orphans widows
                            syn keyword cssFontDescriptorProp contained src
                            syn match cssFontDescriptorProp contained "\<unicode-range\>"
                            " unicode-range attributes
                            syn match cssFontDescriptorAttr contained "U+[0-9A-Fa-f?]\+"
                            syn match cssFontDescriptorAttr contained "U+\x\+-\x\+"
                            
                            syn match cssBraces contained "[{}]"
                            syn match cssError contained "{@<>"
                            syn region cssDefinition transparent matchgroup=cssBraces start='{' end='}' contains=cssTagName,cssAttributeSelector,cssClassName,cssIdentifier,cssAtRule,cssAttrRegion,css.*Prop,cssComment,cssValue.*,cssColor,cssURL,cssImportant,cssCustomProp,cssError,cssStringQ,cssStringQQ,cssFunction,cssUnicodeEscape,cssVendor,cssDefinition,cssHacks,cssNoise fold
                            syn match cssBraceError "}"
                            syn match cssAttrComma ","
                            
                            " Pseudo class
                            " http://www.w3.org/TR/css3-selectors/
                            syn match cssPseudoClass ":[A-Za-z0-9_-]*" contains=cssNoise,cssPseudoClassId,cssUnicodeEscape,cssVendor,cssPseudoClassFn
                            syn keyword cssPseudoClassId contained link visited active hover before after left right
                            syn keyword cssPseudoClassId contained root empty target enable disabled checked invalid
                            syn match cssPseudoClassId contained "\<first-\(line\|letter\)\>"
                            syn match cssPseudoClassId contained "\<\(first\|last\|only\)-\(of-type\|child\)\>"
                            syn region cssPseudoClassFn contained matchgroup=cssFunctionName start="\<\(not\|lang\|\(nth\|nth-last\)-\(of-type\|child\)\)(" end=")" contains=cssStringQ,cssStringQQ
                            " ------------------------------------
                            " Vendor specific properties
                            syn match cssPseudoClassId contained  "\<selection\>"
                            syn match cssPseudoClassId contained  "\<focus\(-inner\)\=\>"
                            syn match cssPseudoClassId contained  "\<\(input-\)\=placeholder\>"
                            
                            " Misc highlight groups
                            syntax match cssUnitDecorators /\(#\|-\|+\|%\|mm\|cm\|in\|pt\|pc\|em\|ex\|px\|ch\|rem\|vh\|vw\|vmin\|vmax\|dpi\|dppx\|dpcm\|Hz\|kHz\|s\|ms\|deg\|grad\|rad\)/ contained
                            syntax match cssNoise contained /\(:\|;\|\/\)/
                            
                            " Comment
                            syn region cssComment start="/\*" end="\*/" contains=@Spell fold
                            
                            syn match cssUnicodeEscape "\\\x\{1,6}\s\?"
                            syn match cssSpecialCharQQ +\\\\\|\\"+ contained
                            syn match cssSpecialCharQ +\\\\\|\\'+ contained
                            syn region cssStringQQ start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=cssUnicodeEscape,cssSpecialCharQQ
                            syn region cssStringQ start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=cssUnicodeEscape,cssSpecialCharQ
                            
                            " Vendor Prefix
                            syn match cssVendor contained "-\(webkit\|moz\|o\|ms\)-"
                            
                            " Various CSS Hack characters
                            " In earlier versions of IE (6 and 7), one can prefix property names
                            " with a _ or * to isolate those definitions to particular versions of IE
                            " This is purely decorative and therefore we assign to the same highlight
                            " group to cssVendor, for more information:
                            " http://www.paulirish.com/2009/browser-specific-css-hacks/
                            syn match cssHacks contained /\(_\|*\)/
                            
                            " Attr Enhance
                            " Some keywords are both Prop and Attr, so we have to handle them
                            " cssPseudoClassId is hidden by cssAttrRegion, so we add it here. see #69
                            syn region cssAttrRegion start=/:/ end=/\ze\(;\|)\|}\|{\)/ contained contains=cssPseudoClassId,css.*Attr,cssColor,cssImportant,cssValue.*,cssFunction,cssString.*,cssURL,cssComment,cssUnicodeEscape,cssVendor,cssError,cssAttrComma,cssNoise
                            
                            " Hack for transition
                            " 'transition' has Props after ':'.
                            syn region cssAttrRegion start=/transition\s*:/ end=/\ze\(;\|)\|}\)/ contained contains=css.*Prop,css.*Attr,cssColor,cssImportant,cssValue.*,cssFunction,cssString.*,cssURL,cssComment,cssUnicodeEscape,cssVendor,cssError,cssAttrComma,cssNoise
                            
                            syn match cssAtKeyword /@\(font-face\|media\|keyframes\|import\|charset\|namespace\|page\|supports\)/
                            
                            syn keyword cssAtRuleLogical only not and contained
                            
                            " @media
                            " Reference: http://www.w3.org/TR/css3-mediaqueries/
                            syn region cssAtRule start=/@media\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssMediaProp,cssValueLength,cssAtRuleLogical,cssValueInteger,cssMediaAttr,cssVendor,cssMediaType,cssComment,cssCustomProp,cssFunctionName nextgroup=cssDefinition
                            syn keyword cssMediaType contained screen print aural braille embossed handheld projection tty tv speech all contained
                            
                            " @page
                            " http://www.w3.org/TR/css3-page/
                            syn region cssAtRule start=/@page\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssPagePseudo,cssComment nextgroup=cssDefinition
                            syn match cssPagePseudo /:\(left\|right\|first\|blank\)/ contained skipwhite skipnl
                            " @keyframe
                            " http://www.w3.org/TR/css3-animations/#keyframes
                            syn region cssAtRule start=/@\(-[a-z]\+-\)\=keyframes\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssVendor,cssComment nextgroup=cssDefinition
                            
                            syn region cssAtRule start=/@import\>/    end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword,cssURL,cssMediaProp,cssValueLength,cssAtRuleLogical,cssValueInteger,cssMediaAttr,cssMediaType
                            syn region cssAtRule start=/@charset\>/   end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword
                            syn region cssAtRule start=/@namespace\>/ end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword
                            
                            " @supports
                            " https://www.w3.org/TR/css3-conditional/#at-supports
                            syn region cssAtRule start=/@supports\>/ end=/\ze{/ skipwhite skipnl contains=cssAtRuleLogical,cssAttrRegion,css.*Prop,cssValue.*,cssVendor,cssAtKeyword,cssComment nextgroup=cssDefinition
                            
                            
                            if main_syntax == "css"
                              syn sync minlines=10
                            endif
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
                            hi def link cssComment Comment
                            hi def link cssVendor Comment
                            hi def link cssHacks Comment
                            hi def link cssTagName Statement
                            hi def link cssDeprecated Error
                            hi def link cssSelectorOp Special
                            hi def link cssSelectorOp2 Special
                            hi def link cssAttrComma Special
                            
                            hi def link cssAnimationProp cssProp
                            hi def link cssBackgroundProp cssProp
                            hi def link cssBorderProp cssProp
                            hi def link cssBoxProp cssProp
                            hi def link cssCascadeProp cssProp
                            hi def link cssColorProp cssProp
                            hi def link cssContentForPagedMediaProp cssProp
                            hi def link cssDimensionProp cssProp
                            hi def link cssFlexibleBoxProp cssProp
                            hi def link cssFontProp cssProp
                            hi def link cssGeneratedContentProp cssProp
                            hi def link cssGridProp cssProp
                            hi def link cssHyerlinkProp cssProp
                            hi def link cssInteractProp cssProp
                            hi def link cssLineboxProp cssProp
                            hi def link cssListProp cssProp
                            hi def link cssMarqueeProp cssProp
                            hi def link cssMultiColumnProp cssProp
                            hi def link cssPagedMediaProp cssProp
                            hi def link cssPositioningProp cssProp
                            hi def link cssPrintProp cssProp
                            hi def link cssRubyProp cssProp
                            hi def link cssSpeechProp cssProp
                            hi def link cssTableProp cssProp
                            hi def link cssTextProp cssProp
                            hi def link cssTransformProp cssProp
                            hi def link cssTransitionProp cssProp
                            hi def link cssUIProp cssProp
                            hi def link cssIEUIProp cssProp
                            hi def link cssAuralProp cssProp
                            hi def link cssRenderProp cssProp
                            hi def link cssMobileTextProp cssProp
                            
                            hi def link cssAnimationAttr cssAttr
                            hi def link cssBackgroundAttr cssAttr
                            hi def link cssBorderAttr cssAttr
                            hi def link cssBoxAttr cssAttr
                            hi def link cssContentForPagedMediaAttr cssAttr
                            hi def link cssDimensionAttr cssAttr
                            hi def link cssFlexibleBoxAttr cssAttr
                            hi def link cssFontAttr cssAttr
                            hi def link cssGeneratedContentAttr cssAttr
                            hi def link cssGridAttr cssAttr
                            hi def link cssHyerlinkAttr cssAttr
                            hi def link cssInteractAttr cssAttr
                            hi def link cssLineboxAttr cssAttr
                            hi def link cssListAttr cssAttr
                            hi def link cssMarginAttr cssAttr
                            hi def link cssMarqueeAttr cssAttr
                            hi def link cssMultiColumnAttr cssAttr
                            hi def link cssPaddingAttr cssAttr
                            hi def link cssPagedMediaAttr cssAttr
                            hi def link cssPositioningAttr cssAttr
                            hi def link cssGradientAttr cssAttr
                            hi def link cssPrintAttr cssAttr
                            hi def link cssRubyAttr cssAttr
                            hi def link cssSpeechAttr cssAttr
                            hi def link cssTableAttr cssAttr
                            hi def link cssTextAttr cssAttr
                            hi def link cssTransformAttr cssAttr
                            hi def link cssTransitionAttr cssAttr
                            hi def link cssUIAttr cssAttr
                            hi def link cssIEUIAttr cssAttr
                            hi def link cssAuralAttr cssAttr
                            hi def link cssRenderAttr cssAttr
                            hi def link cssCascadeAttr cssAttr
                            hi def link cssCommonAttr cssAttr
                            
                            hi def link cssPseudoClassId PreProc
                            hi def link cssPseudoClassLang Constant
                            hi def link cssValueLength Number
                            hi def link cssValueInteger Number
                            hi def link cssValueNumber Number
                            hi def link cssValueAngle Number
                            hi def link cssValueTime Number
                            hi def link cssValueFrequency Number
                            hi def link cssFunction Constant
                            hi def link cssURL String
                            hi def link cssFunctionName Function
                            hi def link cssFunctionComma Function
                            hi def link cssColor Constant
                            hi def link cssIdentifier Function
                            hi def link cssAtRule Include
                            hi def link cssAtKeyword PreProc
                            hi def link cssImportant Special
                            hi def link cssCustomProp Special
                            hi def link cssBraces Function
                            hi def link cssBraceError Error
                            hi def link cssError Error
                            hi def link cssUnicodeEscape Special
                            hi def link cssStringQQ String
                            hi def link cssStringQ String
                            hi def link cssAttributeSelector String
                            hi def link cssMediaType Special
                            hi def link cssMediaComma Normal
                            hi def link cssAtRuleLogical Statement
                            hi def link cssMediaProp cssProp
                            hi def link cssMediaAttr cssAttr
                            hi def link cssPagePseudo PreProc
                            hi def link cssPageMarginProp cssAtKeyword
                            hi def link cssPageProp cssProp
                            hi def link cssKeyFrameProp Constant
                            hi def link cssFontDescriptor Special
                            hi def link cssFontDescriptorProp cssProp
                            hi def link cssFontDescriptorAttr cssAttr
                            hi def link cssUnicodeRange Constant
                            hi def link cssClassName Function
                            hi def link cssClassNameDot Function
                            hi def link cssProp StorageClass
                            hi def link cssAttr Constant
                            hi def link cssUnitDecorators Number
                            hi def link cssNoise Noise
                            
                            let b:current_syntax = "css"
                            
                            if main_syntax == 'css'
                              unlet main_syntax
                            endif
                            
                            let &cpo = s:cpo_save
                            unlet s:cpo_save
                            
                            " vim: ts=8

SCRIPT  C:\Neovim\share\nvim\runtime\syntax\html.vim
Sourced 3 times
Total time:   0.160445
 Self time:   0.043007

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:             HTML
                            " Previous Maintainer:  Jorge Maldonado Ventura <jorgesumle@freakspot.net>
                            " Previous Maintainer:  Claudio Fleiner <claudio@fleiner.com>
                            " Repository:           https://notabug.org/jorgesumle/vim-html-syntax
                            " Last Change:          2021 Mar 02
                            "			Included patch #7900 to fix comments
                            "			Included patch #7916 to fix a few more things
                            "
                            
                            " Please check :help html.vim for some comments and a description of the options
                            
                            " quit when a syntax file was already loaded
    3              0.000033 if !exists("main_syntax")
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'html'
    3              0.000004 endif
                            
    3              0.000029 let s:cpo_save = &cpo
    3              0.000035 set cpo&vim
                            
    3              0.000014 syntax spell toplevel
                            
    3              0.000010 syn case ignore
                            
                            " mark illegal characters
    3              0.000046 syn match htmlError "[<>&]"
                            
                            
                            " tags
    3              0.000124 syn region  htmlString   contained start=+"+ end=+"+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
    3              0.000106 syn region  htmlString   contained start=+'+ end=+'+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
    3              0.000073 syn match   htmlValue    contained "=[\t ]*[^'" \t>][^ \t>]*"hs=s+1   contains=javaScriptExpression,@htmlPreproc
    3              0.000108 syn region  htmlEndTag             start=+</+      end=+>+ contains=htmlTagN,htmlTagError
    3              0.000227 syn region  htmlTag                start=+<[^/]+   end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
    3              0.000142 syn match   htmlTagN     contained +<\s*[-a-zA-Z0-9]\++hs=s+1 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
    3              0.000139 syn match   htmlTagN     contained +</\s*[-a-zA-Z0-9]\++hs=s+2 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
    3              0.000030 syn match   htmlTagError contained "[^>]<"ms=s+1
                            
                            
                            " tag names
    3              0.000044 syn keyword htmlTagName contained address applet area a base basefont
    3              0.000044 syn keyword htmlTagName contained big blockquote br caption center
    3              0.000046 syn keyword htmlTagName contained cite code dd dfn dir div dl dt font
    3              0.000034 syn keyword htmlTagName contained form hr html img
    3              0.000039 syn keyword htmlTagName contained input isindex kbd li link map menu
    3              0.000042 syn keyword htmlTagName contained meta ol option param pre p samp span
    3              0.000036 syn keyword htmlTagName contained select small sub sup
    3              0.000043 syn keyword htmlTagName contained table td textarea th tr tt ul var xmp
    3              0.000075 syn match htmlTagName contained "\<\(b\|i\|u\|h[1-6]\|em\|strong\|head\|body\|title\)\>"
                            
                            " new html 4.0 tags
    3              0.000040 syn keyword htmlTagName contained abbr acronym bdo button col label
    3              0.000037 syn keyword htmlTagName contained colgroup fieldset iframe ins legend
    3              0.000038 syn keyword htmlTagName contained object optgroup q s tbody tfoot thead
                            
                            " new html 5 tags
    3              0.000038 syn keyword htmlTagName contained article aside audio bdi canvas data
    3              0.000040 syn keyword htmlTagName contained datalist details dialog embed figcaption
    3              0.000039 syn keyword htmlTagName contained figure footer header hgroup keygen main
    3              0.000038 syn keyword htmlTagName contained mark menuitem meter nav output picture
    3              0.000037 syn keyword htmlTagName contained progress rb rp rt rtc ruby section
    3              0.000040 syn keyword htmlTagName contained slot source summary template time track
    3              0.000028 syn keyword htmlTagName contained video wbr
                            
                            " legal arg names
    3              0.000028 syn keyword htmlArg contained action
    3              0.000038 syn keyword htmlArg contained align alink alt archive background bgcolor
    3              0.000034 syn keyword htmlArg contained border bordercolor cellpadding
    3              0.000042 syn keyword htmlArg contained cellspacing checked class clear code codebase color
    3              0.000039 syn keyword htmlArg contained cols colspan content coords enctype face
    3              0.000033 syn keyword htmlArg contained gutter height hspace id
    3              0.000032 syn keyword htmlArg contained link lowsrc marginheight
    3              0.000036 syn keyword htmlArg contained marginwidth maxlength method name prompt
    3              0.000039 syn keyword htmlArg contained rel rev rows rowspan scrolling selected shape
    3              0.000039 syn keyword htmlArg contained size src start target text type url
    3              0.000038 syn keyword htmlArg contained usemap ismap valign value vlink vspace width wrap
    3              0.000055 syn match   htmlArg contained "\<\(http-equiv\|href\|title\)="me=e-1
                            
                            " aria attributes
    3              0.000625 exe 'syn match htmlArg contained "\<aria-\%(' . join([
                                \ 'activedescendant', 'atomic', 'autocomplete', 'busy', 'checked', 'colcount',
                                \ 'colindex', 'colspan', 'controls', 'current', 'describedby', 'details',
                                \ 'disabled', 'dropeffect', 'errormessage', 'expanded', 'flowto', 'grabbed',
                                \ 'haspopup', 'hidden', 'invalid', 'keyshortcuts', 'label', 'labelledby', 'level',
                                \ 'live', 'modal', 'multiline', 'multiselectable', 'orientation', 'owns',
                                \ 'placeholder', 'posinset', 'pressed', 'readonly', 'relevant', 'required',
                                \ 'roledescription', 'rowcount', 'rowindex', 'rowspan', 'selected', 'setsize',
                                \ 'sort', 'valuemax', 'valuemin', 'valuenow', 'valuetext'
                                \ ], '\|') . '\)\>"'
    3              0.000033 syn keyword htmlArg contained role
                            
                            " Netscape extensions
    3              0.000037 syn keyword htmlTagName contained frame noframes frameset nobr blink
    3              0.000034 syn keyword htmlTagName contained layer ilayer nolayer spacer
    3              0.000037 syn keyword htmlArg     contained frameborder noresize pagex pagey above below
    3              0.000037 syn keyword htmlArg     contained left top visibility clip id noshade
    3              0.000043 syn match   htmlArg     contained "\<z-index\>"
                            
                            " Microsoft extensions
    3              0.000029 syn keyword htmlTagName contained marquee
                            
                            " html 4.0 arg names
    3              0.000053 syn match   htmlArg contained "\<\(accept-charset\|label\)\>"
    3              0.000043 syn keyword htmlArg contained abbr accept accesskey axis char charoff charset
    3              0.000041 syn keyword htmlArg contained cite classid codetype compact data datetime
    3              0.000039 syn keyword htmlArg contained declare defer dir disabled for frame
    3              0.000035 syn keyword htmlArg contained headers hreflang lang language longdesc
    3              0.000037 syn keyword htmlArg contained multiple nohref nowrap object profile readonly
    3              0.000039 syn keyword htmlArg contained rules scheme scope span standby style
    3              0.000034 syn keyword htmlArg contained summary tabindex valuetype version
                            
                            " html 5 arg names
    3              0.000036 syn keyword htmlArg contained allowfullscreen async autocomplete autofocus
    3              0.000038 syn keyword htmlArg contained autoplay challenge contenteditable contextmenu
    3              0.000039 syn keyword htmlArg contained controls crossorigin default dirname download
    3              0.000039 syn keyword htmlArg contained draggable dropzone form formaction formenctype
    3              0.000038 syn keyword htmlArg contained formmethod formnovalidate formtarget hidden
    3              0.000043 syn keyword htmlArg contained high icon inputmode keytype kind list loop low
    3              0.000040 syn keyword htmlArg contained max min minlength muted nonce novalidate open
    3              0.000037 syn keyword htmlArg contained optimum pattern placeholder poster preload
    3              0.000038 syn keyword htmlArg contained radiogroup required reversed sandbox spellcheck
    3              0.000040 syn keyword htmlArg contained sizes srcset srcdoc srclang step title translate
    3              0.000028 syn keyword htmlArg contained typemustmatch
                            
                            " special characters
    3              0.000085 syn match htmlSpecialChar "&#\=[0-9A-Za-z]\{1,8};"
                            
                            " Comments (the real ones or the old netscape ones)
    3              0.000032 if exists("html_wrong_comments")
                              syn region htmlComment        start=+<!--+    end=+--\s*>+    contains=@Spell
    3              0.000010 else
                              " The HTML 5.2 syntax 8.2.4.41: bogus comment is parser error; browser skips until next &gt
    3              0.000078   syn region htmlComment        start=+<!+      end=+>+         contains=htmlCommentError keepend
                              " Idem 8.2.4.42,51: Comment starts with <!-- and ends with -->
                              " Idem 8.2.4.43,44: Except <!--> and <!---> are parser errors
                              " Idem 8.2.4.52: dash-dash-bang (--!>) is error ignored by parser, also closes comment
    3              0.000111   syn region htmlComment matchgroup=htmlComment start=+<!--\%(-\?>\)\@!+        end=+--!\?>+    contains=htmlCommentNested,@htmlPreProc,@Spell keepend
                              " Idem 8.2.4.49: nested comment is parser error, except <!--> is all right
    3              0.000035   syn match htmlCommentNested contained "<!-->\@!"
    3              0.000031   syn match htmlCommentError  contained "[^><!]"
    3              0.000008 endif
    3              0.000058 syn region htmlComment  start=+<!DOCTYPE+       end=+>+ keepend
                            
                            " server-parsed commands
    3              0.000092 syn region htmlPreProc start=+<!--#+ end=+-->+ contains=htmlPreStmt,htmlPreError,htmlPreAttr
    3              0.000076 syn match htmlPreStmt contained "<!--#\(config\|echo\|exec\|fsize\|flastmod\|include\|printenv\|set\|if\|elif\|else\|endif\|geoguide\)\>"
    3              0.000031 syn match htmlPreError contained "<!--#\S*"ms=s+4
    3              0.000104 syn match htmlPreAttr contained "\w\+=[^"]\S\+" contains=htmlPreProcAttrError,htmlPreProcAttrName
    3              0.000132 syn region htmlPreAttr contained start=+\w\+="+ skip=+\\\\\|\\"+ end=+"+ contains=htmlPreProcAttrName keepend
    3              0.000030 syn match htmlPreProcAttrError contained "\w\+="he=e-1
    3              0.000056 syn match htmlPreProcAttrName contained "\(expr\|errmsg\|sizefmt\|timefmt\|var\|cgi\|cmd\|file\|virtual\|value\)="he=e-1
                            
    3              0.000030 if !exists("html_no_rendering")
                              " rendering
    3              0.000257   syn cluster htmlTop contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,javaScript,@htmlPreproc
                            
    3              0.000097   syn region htmlStrike start="<del\>" end="</del\_s*>"me=s-1 contains=@htmlTop
    3              0.000051   syn region htmlStrike start="<strike\>" end="</strike\_s*>"me=s-1 contains=@htmlTop
                            
    3              0.000129   syn region htmlBold start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
    3              0.000139   syn region htmlBold start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
    3              0.000097   syn region htmlBoldUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderlineItalic
    3              0.000073   syn region htmlBoldItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlBoldItalicUnderline
    3              0.000074   syn region htmlBoldItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop,htmlBoldItalicUnderline
    3              0.000058   syn region htmlBoldUnderlineItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop
    3              0.000058   syn region htmlBoldUnderlineItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
    3              0.000082   syn region htmlBoldItalicUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderlineItalic
                            
    3              0.000108   syn region htmlUnderline start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBold,htmlUnderlineItalic
    3              0.000067   syn region htmlUnderlineBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBoldItalic
    3              0.000063   syn region htmlUnderlineBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBoldItalic
    3              0.000070   syn region htmlUnderlineItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineItalicBold
    3              0.000075   syn region htmlUnderlineItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineItalicBold
    3              0.000059   syn region htmlUnderlineItalicBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop
    3              0.000051   syn region htmlUnderlineItalicBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop
    3              0.000044   syn region htmlUnderlineBoldItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop
    3              0.000041   syn region htmlUnderlineBoldItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
                            
    3              0.000108   syn region htmlItalic start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlItalicBold,htmlItalicUnderline
    3              0.000064   syn region htmlItalic start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
    3              0.000066   syn region htmlItalicBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlItalicBoldUnderline
    3              0.000099   syn region htmlItalicBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlItalicBoldUnderline
    3              0.000043   syn region htmlItalicBoldUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop
    3              0.000054   syn region htmlItalicUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlItalicUnderlineBold
    3              0.000039   syn region htmlItalicUnderlineBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop
    3              0.000041   syn region htmlItalicUnderlineBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop
                            
    3              0.000027   syn match htmlLeadingSpace "^\s\+" contained
    3              0.000256   syn region htmlLink start="<a\>\_[^>]*\<href\>" end="</a\_s*>"me=s-1 contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLeadingSpace,javaScript,@htmlPreproc
    3              0.000046   syn region htmlH1 start="<h1\>" end="</h1\_s*>"me=s-1 contains=@htmlTop
    3              0.000038   syn region htmlH2 start="<h2\>" end="</h2\_s*>"me=s-1 contains=@htmlTop
    3              0.000038   syn region htmlH3 start="<h3\>" end="</h3\_s*>"me=s-1 contains=@htmlTop
    3              0.000039   syn region htmlH4 start="<h4\>" end="</h4\_s*>"me=s-1 contains=@htmlTop
    3              0.000037   syn region htmlH5 start="<h5\>" end="</h5\_s*>"me=s-1 contains=@htmlTop
    3              0.000087   syn region htmlH6 start="<h6\>" end="</h6\_s*>"me=s-1 contains=@htmlTop
    3              0.000310   syn region htmlHead start="<head\>" end="</head\_s*>"me=s-1 end="<body\>"me=s-1 end="<h[1-6]\>"me=s-1 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,htmlTitle,javaScript,cssStyle,@htmlPreproc
    3              0.000198   syn region htmlTitle start="<title\>" end="</title\_s*>"me=s-1 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,javaScript,@htmlPreproc
    3              0.000006 endif
                            
    3              0.000032 syn keyword htmlTagName         contained noscript
    3              0.000033 syn keyword htmlSpecialTagName  contained script style
    3              0.000024 if main_syntax != 'java' || exists("java_javascript")
                              " JAVA SCRIPT
    3   0.042080   0.007411   syn include @htmlJavaScript syntax/javascript.vim
    3              0.000022   unlet b:current_syntax
    3              0.000158   syn region  javaScript start=+<script\_[^>]*>+ keepend end=+</script\_[^>]*>+me=s-1 contains=@htmlJavaScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
    3              0.000193   syn region  htmlScriptTag     contained start=+<script+ end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent
    3              0.000047   hi def link htmlScriptTag htmlTag
                            
                              " html events (i.e. arguments that include javascript commands)
    3              0.000026   if exists("html_extended_events")
                                syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ contains=htmlEventSQ
                                syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ contains=htmlEventDQ
    3              0.000008   else
    3              0.000055     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ keepend contains=htmlEventSQ
    3              0.000049     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ keepend contains=htmlEventDQ
    3              0.000007   endif
    3              0.000039   syn region htmlEventSQ        contained start=+'+ms=s+1 end=+'+me=s-1 contains=@htmlJavaScript
    3              0.000034   syn region htmlEventDQ        contained start=+"+ms=s+1 end=+"+me=s-1 contains=@htmlJavaScript
    3              0.000018   hi def link htmlEventSQ htmlEvent
    3              0.000016   hi def link htmlEventDQ htmlEvent
                            
                              " a javascript expression is used as an arg value
    3              0.000058   syn region  javaScriptExpression contained start=+&{+ keepend end=+};+ contains=@htmlJavaScript,@htmlPreproc
    3              0.000005 endif
                            
    3              0.000020 if main_syntax != 'java' || exists("java_vb")
                              " VB SCRIPT
    3   0.015784   0.006131   syn include @htmlVbScript syntax/vb.vim
    3              0.000028   unlet b:current_syntax
    3              0.000206   syn region  javaScript start=+<script \_[^>]*language *=\_[^>]*vbscript\_[^>]*>+ keepend end=+</script\_[^>]*>+me=s-1 contains=@htmlVbScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
    3              0.000007 endif
                            
    3              0.000025 syn cluster htmlJavaScript      add=@htmlPreproc
                            
    3              0.000026 if main_syntax != 'java' || exists("java_css")
                              " embedded style sheets
    3              0.000037   syn keyword htmlArg           contained media
    3   0.079147   0.006032   syn include @htmlCss syntax/css.vim
    3              0.000023   unlet b:current_syntax
    3              0.000209   syn region cssStyle start=+<style+ keepend end=+</style>+ contains=@htmlCss,htmlTag,htmlEndTag,htmlCssStyleComment,@htmlPreproc
    3              0.000040   syn match htmlCssStyleComment contained "\(<!--\|-->\)"
    3              0.010109   syn region htmlCssDefinition matchgroup=htmlArg start='style="' keepend matchgroup=htmlString end='"' contains=css.*Attr,css.*Prop,cssComment,cssLength,cssColor,cssURL,cssImportant,cssError,cssString,@htmlPreproc
    3              0.000023   hi def link htmlStyleArg htmlString
    3              0.000005 endif
                            
    3              0.000019 if main_syntax == "html"
                              " synchronizing (does not always work if a comment includes legal
                              " html tags, but doing it right would mean to always start
                              " at the first line, which is too slow)
                              syn sync match htmlHighlight groupthere NONE "<[/a-zA-Z]"
                              syn sync match htmlHighlight groupthere javaScript "<script"
                              syn sync match htmlHighlightSkip "^.*['\"].*$"
                              syn sync minlines=10
    3              0.000005 endif
                            
                            " The default highlighting.
    3              0.000049 hi def link htmlTag                     Function
    3              0.000051 hi def link htmlEndTag                  Identifier
    3              0.000050 hi def link htmlArg                     Type
    3              0.000031 hi def link htmlTagName                 htmlStatement
    3              0.000042 hi def link htmlSpecialTagName          Exception
    3              0.000037 hi def link htmlValue                   String
    3              0.000046 hi def link htmlSpecialChar             Special
                            
    3              0.000023 if !exists("html_no_rendering")
    3              0.000041   hi def link htmlH1                      Title
    3              0.000023   hi def link htmlH2                      htmlH1
    3              0.000017   hi def link htmlH3                      htmlH2
    3              0.000017   hi def link htmlH4                      htmlH3
    3              0.000017   hi def link htmlH5                      htmlH4
    3              0.000017   hi def link htmlH6                      htmlH5
    3              0.000032   hi def link htmlHead                    PreProc
    3              0.000107   hi def link htmlTitle                   Title
    3              0.000037   hi def link htmlBoldItalicUnderline     htmlBoldUnderlineItalic
    3              0.000033   hi def link htmlUnderlineBold           htmlBoldUnderline
    3              0.000032   hi def link htmlUnderlineItalicBold     htmlBoldUnderlineItalic
    3              0.000032   hi def link htmlUnderlineBoldItalic     htmlBoldUnderlineItalic
    3              0.000032   hi def link htmlItalicUnderline         htmlUnderlineItalic
    3              0.000032   hi def link htmlItalicBold              htmlBoldItalic
    3              0.000031   hi def link htmlItalicBoldUnderline     htmlBoldUnderlineItalic
    3              0.000031   hi def link htmlItalicUnderlineBold     htmlBoldUnderlineItalic
    3              0.000042   hi def link htmlLink                    Underlined
    3              0.000018   hi def link htmlLeadingSpace            None
    3              0.000019   if !exists("html_my_rendering")
    3              0.000027     hi def htmlBold                term=bold cterm=bold gui=bold
    3              0.000028     hi def htmlBoldUnderline       term=bold,underline cterm=bold,underline gui=bold,underline
    3              0.000029     hi def htmlBoldItalic          term=bold,italic cterm=bold,italic gui=bold,italic
    3              0.000027     hi def htmlBoldUnderlineItalic term=bold,italic,underline cterm=bold,italic,underline gui=bold,italic,underline
    3              0.000027     hi def htmlUnderline           term=underline cterm=underline gui=underline
    3              0.000026     hi def htmlUnderlineItalic     term=italic,underline cterm=italic,underline gui=italic,underline
    3              0.000025     hi def htmlItalic              term=italic cterm=italic gui=italic
    3              0.000102     if v:version > 800 || v:version == 800 && has("patch1038")
    3              0.000017         hi def htmlStrike              term=strikethrough cterm=strikethrough gui=strikethrough
                                else
                                    hi def htmlStrike              term=underline cterm=underline gui=underline
    3              0.000004     endif
    3              0.000005   endif
    3              0.000003 endif
                            
    3              0.000035 hi def link htmlPreStmt            PreProc
    3              0.000035 hi def link htmlPreError           Error
    3              0.000035 hi def link htmlPreProc            PreProc
    3              0.000037 hi def link htmlPreAttr            String
    3              0.000038 hi def link htmlPreProcAttrName    PreProc
    3              0.000035 hi def link htmlPreProcAttrError   Error
    3              0.000037 hi def link htmlString             String
    3              0.000031 hi def link htmlStatement          Statement
    3              0.000036 hi def link htmlComment            Comment
    3              0.000023 hi def link htmlCommentNested      htmlError
    3              0.000020 hi def link htmlCommentError       htmlError
    3              0.000020 hi def link htmlTagError           htmlError
    3              0.000020 hi def link htmlEvent              javaScript
    3              0.000031 hi def link htmlError              Error
                            
    3              0.000036 hi def link javaScript             Special
    3              0.000024 hi def link javaScriptExpression   javaScript
    3              0.000030 hi def link htmlCssStyleComment    Comment
    3              0.000034 hi def link htmlCssDefinition      Special
                            
    3              0.000016 let b:current_syntax = "html"
                            
    3              0.000013 if main_syntax == 'html'
                              unlet main_syntax
    3              0.000004 endif
                            
    3              0.000046 let &cpo = s:cpo_save
    3              0.000010 unlet s:cpo_save
                            " vim: ts=8

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\after\syntax\html.vim
Sourced 3 times
Total time:   0.006854
 Self time:   0.006717

count  total (s)   self (s)
    3   0.000440   0.000303 if polyglot#init#is_disabled(expand('<sfile>:p'), 'html5', 'after/syntax/html.vim')
                              finish
    3              0.000004 endif
                            
                            " Vim syntax file
                            " Language:     HTML (version 5.1)
                            "               SVG (SVG 1.1 Second Edition)
                            "               MathML (MathML 3.0 Second Edition)
                            " Last Change:  2017 Mar 07
                            " License:      Public domain
                            "               (but let me know if you like :) )
                            "
                            " Note: This file just add new tags from HTML 5
                            "       and don't replace default html.vim syntax file
                            "
                            " Maintainer:   Kao, Wei-Ko(othree) ( othree AT gmail DOT com )
                            " Changes:      update to Draft 2016 Jan 13
                            "               add microdata Attributes
                            " Maintainer:   Rodrigo Machado <rcmachado@gmail.com>
                            " URL:          http://rm.blog.br/vim/syntax/html.vim
                            " Modified:     htdebeer <H.T.de.Beer@gmail.com>
                            " Changes:      add common SVG elements and attributes for inline SVG
                            
                            " Patch 7.4.1142
    3              0.000080 if has("patch-7.4-1142")
    3              0.000015   if has("win32")
    3              0.000062     syn iskeyword @,48-57,_,128-167,224-235,-
                              else
                                syn iskeyword @,48-57,_,192-255,-
    3              0.000004   endif
    3              0.000004 endif
                            
                            " HTML 5 tags
    3              0.000062 syn keyword htmlTagName contained article aside audio canvas command
    3              0.000051 syn keyword htmlTagName contained datalist details dialog embed figcaption figure footer
    3              0.000053 syn keyword htmlTagName contained header hgroup keygen main mark meter menu menuitem nav output
    3              0.000056 syn keyword htmlTagName contained progress ruby rt rp rb rtc section source summary time track video data
    3              0.000037 syn keyword htmlTagName contained template content shadow slot
    3              0.000030 syn keyword htmlTagName contained wbr bdi
    3              0.000027 syn keyword htmlTagName contained picture
                            
                            " SVG tags
                            " http://www.w3.org/TR/SVG/
                            " as found in http://www.w3.org/TR/SVG/eltindex.html
    3              0.000030 syn keyword htmlTagName contained svg 
    3              0.000037 syn keyword htmlTagName contained altGlyph altGlyphDef altGlyphItem 
    3              0.000037 syn keyword htmlTagName contained animate animateColor animateMotion animateTransform 
    3              0.000041 syn keyword htmlTagName contained circle ellipse rect line polyline polygon image path
    3              0.000036 syn keyword htmlTagName contained clipPath color-profile cursor 
    3              0.000057 syn keyword htmlTagName contained defs desc g symbol view use switch foreignObject
    3              0.000096 syn keyword htmlTagName contained filter feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence 
    3              0.000044 syn keyword htmlTagName contained font font-face font-face-format font-face-name font-face-src font-face-uri 
    3              0.000035 syn keyword htmlTagName contained glyph glyphRef hkern 
    3              0.000043 syn keyword htmlTagName contained linearGradient marker mask pattern radialGradient set stop
    3              0.000032 syn keyword htmlTagName contained missing-glyph mpath 
    3              0.000037 syn keyword htmlTagName contained text textPath tref tspan vkern
    3              0.000030 syn keyword htmlTagName contained metadata title
                            
                            " MathML tags
                            " https://www.w3.org/TR/MathML3/appendixi.html#index.elem
    3              0.000047 syn keyword htmlTagName contained abs and annotation annotation-xml apply approx arccos arccosh arccot arccoth
    3              0.000051 syn keyword htmlTagName contained arccsc arccsch arcsec arcsech arcsin arcsinh arctan arctanh arg bind
    3              0.000053 syn keyword htmlTagName contained bvar card cartesianproduct cbytes ceiling cerror ci cn codomain complexes
    3              0.000055 syn keyword htmlTagName contained compose condition conjugate cos cosh cot coth cs csc csch
    3              0.000079 syn keyword htmlTagName contained csymbol curl declare degree determinant diff divergence divide domain domainofapplication
    3              0.000068 syn keyword htmlTagName contained emptyset eq equivalent eulergamma exists exp exponentiale factorial factorof false
    3              0.000073 syn keyword htmlTagName contained floor fn forall gcd geq grad gt ident image imaginary
    3              0.000054 syn keyword htmlTagName contained imaginaryi implies in infinity int integers intersect interval inverse lambda
    3              0.000044 syn keyword htmlTagName contained laplacian lcm leq limit list ln log logbase lowlimit lt
    3              0.000105 syn keyword htmlTagName contained maction maligngroup malignmark math matrix matrixrow max mean median menclose
    3              0.000046 syn keyword htmlTagName contained merror mfenced mfrac mglyph mi mi" min minus mlabeledtr mlongdiv
    3              0.000046 syn keyword htmlTagName contained mmultiscripts mn mo mode moment momentabout mover mpadded mphantom mprescripts
    3              0.000044 syn keyword htmlTagName contained mroot mrow ms mscarries mscarry msgroup msline mspace msqrt msrow
    3              0.000044 syn keyword htmlTagName contained mstack mstyle msub msubsup msup mtable mtd mtext mtr munder
    3              0.000050 syn keyword htmlTagName contained munderover naturalnumbers neq none not notanumber notin notprsubset notsubset or
    3              0.000048 syn keyword htmlTagName contained otherwise outerproduct partialdiff pi piece piecewise plus power primes product
    3              0.000045 syn keyword htmlTagName contained prsubset quotient rationals real reals reln rem root scalarproduct sdev
    3              0.000047 syn keyword htmlTagName contained sec sech selector semantics sep set setdiff share sin sinh
    3              0.000048 syn keyword htmlTagName contained span subset sum tan tanh tendsto times transpose true union
    3              0.000035 syn keyword htmlTagName contained uplimit variance vector vectorproduct xor
                            
                            " Custom Element
    3              0.000075 syn match htmlTagName contained "\<[a-z][-.0-9_a-z]*-[-.0-9_a-z]*\>"
    3              0.000058 syn match htmlTagName contained "[.0-9_a-z]\@<=-[-.0-9_a-z]*\>"
                            
                            " HTML 5 arguments
                            " Core Attributes
    3              0.000044 syn keyword htmlArg contained accesskey class contenteditable contextmenu dir 
    3              0.000048 syn keyword htmlArg contained draggable hidden id is lang spellcheck style tabindex title translate
                            " Event-handler Attributes
    3              0.000040 syn keyword htmlArg contained onabort onblur oncanplay oncanplaythrough onchange
    3              0.000046 syn keyword htmlArg contained onclick oncontextmenu ondblclick ondrag ondragend ondragenter ondragleave ondragover 
    3              0.000048 syn keyword htmlArg contained ondragstart ondrop ondurationchange onemptied onended onerror onfocus onformchange 
    3              0.000046 syn keyword htmlArg contained onforminput oninput oninvalid onkeydown onkeypress onkeyup onload onloadeddata 
    3              0.000045 syn keyword htmlArg contained onloadedmetadata onloadstart onmousedown onmousemove onmouseout onmouseover onmouseup
    3              0.000045 syn keyword htmlArg contained onmousewheel onpause onplay onplaying onprogress onratechange onreadystatechange 
    3              0.000045 syn keyword htmlArg contained onscroll onseeked onseeking onselect onshow onstalled onsubmit onsuspend ontimeupdate 
    3              0.000031 syn keyword htmlArg contained onvolumechange onwaiting
                            " XML Attributes
    3              0.000032 syn keyword htmlArg contained xml:lang xml:space xml:base xmlns
                            " new features
                            " <body>
    3              0.000047 syn keyword htmlArg contained onafterprint onbeforeprint onbeforeunload onblur onerror onfocus onhashchange onload 
    3              0.000049 syn keyword htmlArg contained onmessage onoffline ononline onpopstate onredo onresize onstorage onundo onunload
                            " <video>, <audio>, <source>, <track>
    3              0.000050 syn keyword htmlArg contained autoplay preload controls loop poster media kind charset srclang track playsinline
                            " <form>, <input>, <button>
    3              0.000041 syn keyword htmlArg contained form autocomplete autofocus list min max step
    3              0.000042 syn keyword htmlArg contained formaction autofocus formenctype formmethod formtarget formnovalidate
    3              0.000032 syn keyword htmlArg contained required placeholder pattern
                            " <command>, <details>, <time>
    3              0.000035 syn keyword htmlArg contained label icon open datetime-local pubdate
                            " <script>
    3              0.000027 syn keyword htmlArg contained async
                            " <content>
    3              0.000027 syn keyword htmlArg contained select
                            " <iframe>
    3              0.000044 syn keyword htmlArg contained seamless srcdoc sandbox allowfullscreen allowusermedia allowpaymentrequest allowpresentation
                            " <picture>
    3              0.000029 syn keyword htmlArg contained srcset sizes
                            " <a>
    3              0.000029 syn keyword htmlArg contained download media
                            " <script>, <style>
    3              0.000028 syn keyword htmlArg contained nonce
                            " <area>, <a>, <img>, <iframe>, <link>
    3              0.000028 syn keyword htmlArg contained referrerpolicy
                            " https://w3c.github.io/webappsec-subresource-integrity/#the-integrity-attribute
    3              0.000031 syn keyword htmlArg contained integrity crossorigin
                            " <link>
    3              0.000028 syn keyword htmlArg contained prefetch 
                            " syn keyword htmlArg contained preload
                            " <img>
    3              0.000028 syn keyword htmlArg contained decoding
                            " https://w3c.github.io/selection-api/#extensions-to-globaleventhandlers
    3              0.000032 syn keyword htmlArg contained onselectstart onselectionchange
                            " https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/loading
    3              0.000026 syn keyword htmlArg contained loading
                            
                            " Custom Data Attributes
                            " http://w3c.github.io/html/single-page.html#embedding-custom-non-visible-data-with-the-data-attributes
    3              0.000061 syn match   htmlArg "\<data[-.0-9_a-z]*-[-.0-9_a-z]*\>" contained
                            
                            " Vendor Extension Attributes
                            " http://w3c.github.io/html/single-page.html#conformance-requirements-extensibility
    3              0.000050 syn match   htmlArg "\<x[-.0-9_a-z]*-[-.0-9_a-z]*\>" contained
                            
                            " Microdata
                            " http://dev.w3.org/html5/md/
    3              0.000036 syn keyword htmlArg contained itemid itemscope itemtype itemprop itemref
                            
                            " SVG
                            " http://www.w3.org/TR/SVG/
                            " Some common attributes from http://www.w3.org/TR/SVG/attindex.html
    3              0.000049 syn keyword htmlArg contained accent-height accumulate additive alphabetic amplitude arabic-form ascent attributeName attributeType azimuth 
    3              0.000040 syn keyword htmlArg contained baseFrequency baseProfile bbox begin bias by 
    3              0.000048 syn keyword htmlArg contained calcMode cap-height class clipPathUnits contentScriptType contentStyleType cx cy 
    3              0.000043 syn keyword htmlArg contained d descent diffuseConstant divisor dur dx dy 
    3              0.000043 syn keyword htmlArg contained edgeMode elevation end exponent externalResourcesRequired 
    3              0.000069 syn keyword htmlArg contained fill filterRes filterUnits font-family font-size font-stretch font-style font-variant font-weight format format from fx fy 
    3              0.000043 syn keyword htmlArg contained g1 g2 glyph-name glyphRef gradientTransform gradientUnits 
    3              0.000038 syn keyword htmlArg contained hanging height horiz-adv-x horiz-origin-x horiz-origin-y 
    3              0.000036 syn keyword htmlArg contained id ideographic in in2 intercept 
    3              0.000047 syn keyword htmlArg contained k k1 k2 k3 k4 kernelMatrix kernelUnitLength keyPoints keySplines keyTimes 
    3              0.000037 syn keyword htmlArg contained lang lengthAdjust limitingConeAngle local 
    3              0.000052 syn keyword htmlArg contained markerHeight markerUnits markerWidth maskContentUnits maskUnits mathematical max media method min mode name 
    3              0.000040 syn keyword htmlArg contained numOctaves 
    3              0.000122 syn keyword htmlArg contained offset onabort onactivate onbegin onclick onend onerror onfocusin onfocusout onload onmousedown onmousemove onmouseout onmouseover onmouseup onrepeat onresize onscroll onunload onzoom operator order orient orientation origin overline-position overline-thickness 
    3              0.000064 syn keyword htmlArg contained panose-1 path pathLength patternContentUnits patternTransform patternUnits points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits 
    3              0.000063 syn keyword htmlArg contained r radius refX refY rendering-intent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry 
    3              0.000071 syn keyword htmlArg contained scale seed slope spacing specularConstant specularExponent spreadMethod startOffset stdDeviation stemh stemv stitchTiles strikethrough-position strikethrough-thickness string surfaceScale systemLanguage 
    3              0.000048 syn keyword htmlArg contained tableValues target targetX targetY textLength title to transform type
    3              0.000044 syn keyword htmlArg contained u1 u2 underline-position underline-thickness unicode unicode-range units-per-em 
    3              0.000048 syn keyword htmlArg contained v-alphabetic v-hanging v-ideographic v-mathematical values version vert-adv-y vert-origin-x vert-origin-y viewBox viewTarget 
    3              0.000034 syn keyword htmlArg contained width widths 
    3              0.000058 syn keyword htmlArg contained x x-height x1 x2 xChannelSelector xlink:actuate xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xml:lang xml:space 
    3              0.000033 syn keyword htmlArg contained y y1 y2 yChannelSelector 
    3              0.000097 syn keyword htmlArg contained z zoomAndPan 
    3              0.000195 syn keyword htmlArg contained alignment-baseline baseline-shift clip-path clip-rule clip color-interpolation-filters color-interpolation color-profile color-rendering color cursor direction display dominant-baseline enable-background fill-opacity fill-rule fill filter flood-color flood-opacity font-family font-size-adjust font-size font-stretch font-style font-variant font-weight glyph-orientation-horizontal glyph-orientation-vertical image-rendering kerning letter-spacing lighting-color marker-end marker-mid marker-start mask opacity overflow pointer-events shape-rendering stop-color stop-opacity stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width stroke text-anchor text-decoration text-rendering unicode-bidi visibility word-spacing writing-mode
                            
                            " MathML attributes
                            " https://www.w3.org/TR/MathML3/chapter2.html#interf.toplevel.atts
    3              0.000052 syn keyword htmlArg contained accent accentunder actiontype align alignmentscope altimg altimg-height altimg-valign altimg-width alttext
    3              0.000051 syn keyword htmlArg contained annotation-xml background base baseline bevelled cd cdgroup charalign charspacing close
    3              0.000056 syn keyword htmlArg contained closure color columnalign columnalignment columnlines columnspacing columnspan columnwidth crossout decimalpoint
    3              0.000069 syn keyword htmlArg contained definitionURL denomalign depth display displaystyle edge encoding equalcolumns equalrows fence
    3              0.000071 syn keyword htmlArg contained fontfamily fontsize fontstyle fontweight form frame framespacing groupalign height indentalign
    3              0.000057 syn keyword htmlArg contained indentalignfirst indentalignlast indentshift indentshiftfirst indentshiftlast indenttarget index infixlinebreakstyle integer largeop
    3              0.000050 syn keyword htmlArg contained leftoverhang length linebreak linebreakmultchar linebreakstyle lineleading linethickness location longdivstyle lquote
    3              0.000048 syn keyword htmlArg contained lspace ltr macros math mathbackground mathcolor mathsize mathvariant maxsize maxwidth
    3              0.000049 syn keyword htmlArg contained mediummathspace menclose minlabelspacing minsize mode movablelimits msgroup mslinethickness name nargs
    3              0.000050 syn keyword htmlArg contained newline notation numalign number occurrence open order other overflow position
    3              0.000049 syn keyword htmlArg contained rightoverhang role rowalign rowlines rowspacing rowspan rquote rspace schemaLocation scope
    3              0.000058 syn keyword htmlArg contained scriptlevel scriptminsize scriptsize scriptsizemultiplier selection separator separators shift side stackalign
    3              0.000053 syn keyword htmlArg contained stretchy subscriptshift superscriptshift symmetric thickmathspace thinmathspace type valign verythickmathspace verythinmathspace
    3              0.000037 syn keyword htmlArg contained veryverythickmathspace veryverythinmathspace voffset width xref
                            
                            " Comment
                            " https://github.com/w3c/html/issues/694
    3              0.000077 syntax region htmlComment start=+<!--+ end=+-->+ contains=@Spell
    3              0.000108 syntax region htmlComment start=+<!DOCTYPE+ keepend end=+>+

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\syntax\sql.vim
Sourced 3 times
Total time:   0.017588
 Self time:   0.008140

count  total (s)   self (s)
    3   0.000433   0.000301 if polyglot#init#is_disabled(expand('<sfile>:p'), 'sql', 'syntax/sql.vim')
                              finish
    3              0.000004 endif
                            
                            " Vim syntax file loader
                            " Language:    SQL
                            " Maintainer:  David Fishburn <fishburn at ianywhere dot com>
                            " Last Change: Thu Sep 15 2005 10:30:02 AM
                            " Version:     1.0
                            
                            " Description: Checks for a:
                            "                  buffer local variable,
                            "                  global variable,
                            "              If the above exist, it will source the type specified.
                            "              If none exist, it will source the default sql.vim file.
                            "
                            " quit when a syntax file was already loaded
    3              0.000015 if exists("b:current_syntax")
                                finish
    3              0.000003 endif
                            
                            " Default to the standard Vim distribution file
    3              0.000023 let filename = 'sqloracle'
                            
                            " Check for overrides.  Buffer variables have the highest priority.
    3              0.000016 if exists("b:sql_type_override")
                                " Check the runtimepath to see if the file exists
    3              0.003964     if globpath(&runtimepath, 'syntax/'.b:sql_type_override.'.vim') != ''
    3              0.000036         let filename = b:sql_type_override
    3              0.000006     endif
                            elseif exists("g:sql_type_default")
                                if globpath(&runtimepath, 'syntax/'.g:sql_type_default.'.vim') != ''
                                    let filename = g:sql_type_default
                                endif
    3              0.000004 endif
                            
                            " Source the appropriate file
    3   0.012815   0.003501 exec 'runtime syntax/'.filename.'.vim'
                            
                            " vim:sw=4:

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\syntax\mysql.vim
Sourced 3 times
Total time:   0.009120
 Self time:   0.008993

count  total (s)   self (s)
    3   0.000427   0.000300 if polyglot#init#is_disabled(expand('<sfile>:p'), 'mysql', 'syntax/mysql.vim')
                              finish
    3              0.000004 endif
                            
                            " Vim syntax file
                            " Language:     mysql
                            " Maintainer:   Kenneth J. Pronovici <pronovic@ieee.org>
                            " Last Change:  $LastChangedDate: 2016-04-11 10:31:04 -0500 (Mon, 11 Apr 2016) $
                            " Filenames:    *.mysql
                            " URL:          ftp://cedar-solutions.com/software/mysql.vim
                            " Note:         The definitions below are taken from the mysql user manual as of April 2002, for version 3.23
                            
                            " quit when a syntax file was already loaded
    3              0.000015 if exists("b:current_syntax")
                              finish
    3              0.000004 endif
                            
                            " Always ignore case
    3              0.000013 syn case ignore
                            
                            " General keywords which don't fall into other categories
    3              0.000044 syn keyword mysqlKeyword         action add after aggregate all alter as asc auto_increment avg_row_length
    3              0.000020 syn keyword mysqlKeyword         both by
    3              0.000041 syn keyword mysqlKeyword         cascade change character check checksum column columns comment constraint create cross
    3              0.000021 syn keyword mysqlKeyword         current_date current_time current_timestamp
    3              0.000028 syn keyword mysqlKeyword         data database databases day day_hour day_minute day_second
    3              0.000034 syn keyword mysqlKeyword         default delayed delay_key_write delete desc describe distinct distinctrow drop
    3              0.000020 syn keyword mysqlKeyword         enclosed escape escaped explain
    3              0.000031 syn keyword mysqlKeyword         fields file first flush for foreign from full function
    3              0.000020 syn keyword mysqlKeyword         global grant grants group
    3              0.000025 syn keyword mysqlKeyword         having heap high_priority hosts hour hour_minute hour_second
    3              0.000025 syn keyword mysqlKeyword         identified ignore index infile inner insert insert_id into isam
    3              0.000014 syn keyword mysqlKeyword         join
    3              0.000033 syn keyword mysqlKeyword         key keys kill last_insert_id leading left limit lines load local lock logs long
    3              0.000015 syn keyword mysqlKeyword         low_priority
    3              0.000027 syn keyword mysqlKeyword         match max_rows middleint min_rows minute minute_second modify month myisam
    3              0.000015 syn keyword mysqlKeyword         natural no
    3              0.000026 syn keyword mysqlKeyword         on optimize option optionally order outer outfile
    3              0.000028 syn keyword mysqlKeyword         pack_keys partial password primary privileges procedure process processlist
    3              0.000031 syn keyword mysqlKeyword         read references reload rename replace restrict returns revoke right row rows
    3              0.000034 syn keyword mysqlKeyword         second select show shutdown soname sql_big_result sql_big_selects sql_big_tables sql_log_off
    3              0.000027 syn keyword mysqlKeyword         sql_log_update sql_low_priority_updates sql_select_limit sql_small_result sql_warnings starting
    3              0.000018 syn keyword mysqlKeyword         status straight_join string
    3              0.000025 syn keyword mysqlKeyword         table tables temporary terminated to trailing type
    3              0.000022 syn keyword mysqlKeyword         unique unlock unsigned update usage use using
    3              0.000017 syn keyword mysqlKeyword         values varbinary variables varying
    3              0.000016 syn keyword mysqlKeyword         where with write
    3              0.000011 syn keyword mysqlKeyword         year_month
    3              0.000012 syn keyword mysqlKeyword         zerofill
                            
                            " Special values
    3              0.000015 syn keyword mysqlSpecial         false null true
                            
                            " Strings (single- and double-quote)
    3              0.000073 syn region mysqlString           start=+"+  skip=+\\\\\|\\"+  end=+"+
    3              0.000045 syn region mysqlString           start=+'+  skip=+\\\\\|\\'+  end=+'+
                            
                            " Numbers and hexidecimal values
    3              0.000032 syn match mysqlNumber            "-\=\<[0-9]*\>"
    3              0.000028 syn match mysqlNumber            "-\=\<[0-9]*\.[0-9]*\>"
    3              0.000032 syn match mysqlNumber            "-\=\<[0-9][0-9]*e[+-]\=[0-9]*\>"
    3              0.000029 syn match mysqlNumber            "-\=\<[0-9]*\.[0-9]*e[+-]\=[0-9]*\>"
    3              0.000029 syn match mysqlNumber            "\<0x[abcdefABCDEF0-9]*\>"
                            
                            " User variables
    3              0.000036 syn match mysqlVariable          "@\a*[A-Za-z0-9]*\([._]*[A-Za-z0-9]\)*"
                            
                            " Escaped column names
    3              0.000024 syn match mysqlEscaped           "`[^`]*`"
                            
                            " Comments (c-style, mysql-style and modified sql-style)
    3              0.000037 syn region mysqlComment          start="/\*"  end="\*/"
    3              0.000020 syn match mysqlComment           "#.*"
    3              0.000022 syn match mysqlComment           "--\_s.*"
    3              0.000010 syn sync ccomment mysqlComment
                            
                            " Column types
                            "
                            " This gets a bit ugly.  There are two different problems we have to
                            " deal with.
                            "
                            " The first problem is that some keywords like 'float' can be used
                            " both with and without specifiers, i.e. 'float', 'float(1)' and
                            " 'float(@var)' are all valid.  We have to account for this and we
                            " also have to make sure that garbage like floatn or float_(1) is not
                            " highlighted.
                            "
                            " The second problem is that some of these keywords are included in
                            " function names.  For instance, year() is part of the name of the
                            " dayofyear() function, and the dec keyword (no parenthesis) is part of
                            " the name of the decode() function.
                            
    3              0.000038 syn keyword mysqlType            tinyint smallint mediumint int integer bigint
    3              0.000023 syn keyword mysqlType            date datetime time bit bool
    3              0.000020 syn keyword mysqlType            tinytext mediumtext longtext text
    3              0.000020 syn keyword mysqlType            tinyblob mediumblob longblob blob
    3              0.000050 syn region mysqlType             start="float\W" end="."me=s-1
    3              0.000115 syn region mysqlType             start="float$" end="."me=s-1
    3              0.000056 syn region mysqlType             start="float(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000036 syn region mysqlType             start="double\W" end="."me=s-1
    3              0.000035 syn region mysqlType             start="double$" end="."me=s-1
    3              0.000045 syn region mysqlType             start="double(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000040 syn region mysqlType             start="double precision\W" end="."me=s-1
    3              0.000044 syn region mysqlType             start="double precision$" end="."me=s-1
    3              0.000052 syn region mysqlType             start="double precision(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000035 syn region mysqlType             start="real\W" end="."me=s-1
    3              0.000052 syn region mysqlType             start="real$" end="."me=s-1
    3              0.000062 syn region mysqlType             start="real(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000060 syn region mysqlType             start="numeric(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000046 syn region mysqlType             start="dec\W" end="."me=s-1
    3              0.000043 syn region mysqlType             start="dec$" end="."me=s-1
    3              0.000057 syn region mysqlType             start="dec(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000043 syn region mysqlType             start="decimal\W" end="."me=s-1
    3              0.000044 syn region mysqlType             start="decimal$" end="."me=s-1
    3              0.000057 syn region mysqlType             start="decimal(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000048 syn region mysqlType             start="\Wtimestamp\W" end="."me=s-1
    3              0.000047 syn region mysqlType             start="\Wtimestamp$" end="."me=s-1
    3              0.000066 syn region mysqlType             start="\Wtimestamp(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000057 syn region mysqlType             start="^timestamp\W" end="."me=s-1
    3              0.000046 syn region mysqlType             start="^timestamp$" end="."me=s-1
    3              0.000063 syn region mysqlType             start="^timestamp(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000070 syn region mysqlType             start="\Wyear(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000055 syn region mysqlType             start="^year(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000045 syn region mysqlType             start="char(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000045 syn region mysqlType             start="varchar(" end=")" contains=mysqlNumber,mysqlVariable
    3              0.000043 syn region mysqlType             start="enum(" end=")" contains=mysqlString,mysqlVariable
    3              0.000047 syn region mysqlType             start="\Wset(" end=")" contains=mysqlString,mysqlVariable
    3              0.000043 syn region mysqlType             start="^set(" end=")" contains=mysqlString,mysqlVariable
                            
                            " Logical, string and  numeric operators
    3              0.000034 syn keyword mysqlOperator        between not and or is in like regexp rlike binary exists
    3              0.000039 syn region mysqlOperator         start="isnull(" end=")" contains=ALL
    3              0.000038 syn region mysqlOperator         start="coalesce(" end=")" contains=ALL
    3              0.000034 syn region mysqlOperator         start="interval(" end=")" contains=ALL
                            
                            " Control flow functions
    3              0.000022 syn keyword mysqlFlow            case when then else end
    3              0.000040 syn region mysqlFlow             start="ifnull("   end=")"  contains=ALL
    3              0.000043 syn region mysqlFlow             start="nullif("   end=")"  contains=ALL
    3              0.000035 syn region mysqlFlow             start="if("       end=")"  contains=ALL
                            
                            " General Functions
                            "
                            " I'm leery of just defining keywords for functions, since according to the MySQL manual:
                            "
                            "     Function names do not clash with table or column names. For example, ABS is a
                            "     valid column name. The only restriction is that for a function call, no spaces
                            "     are allowed between the function name and the `(' that follows it.
                            "
                            " This means that if I want to highlight function names properly, I have to use a
                            " region to define them, not just a keyword.  This will probably cause the syntax file
                            " to load more slowly, but at least it will be 'correct'.
                            
    3              0.000046 syn region mysqlFunction         start="abs(" end=")" contains=ALL
    3              0.000038 syn region mysqlFunction         start="acos(" end=")" contains=ALL
    3              0.000039 syn region mysqlFunction         start="adddate(" end=")" contains=ALL
    3              0.000041 syn region mysqlFunction         start="ascii(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="asin(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="atan(" end=")" contains=ALL
    3              0.000038 syn region mysqlFunction         start="atan2(" end=")" contains=ALL
    3              0.000037 syn region mysqlFunction         start="avg(" end=")" contains=ALL
    3              0.000040 syn region mysqlFunction         start="benchmark(" end=")" contains=ALL
    3              0.000038 syn region mysqlFunction         start="bin(" end=")" contains=ALL
    3              0.000058 syn region mysqlFunction         start="bit_and(" end=")" contains=ALL
    3              0.000037 syn region mysqlFunction         start="bit_count(" end=")" contains=ALL
    3              0.000037 syn region mysqlFunction         start="bit_or(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="ceiling(" end=")" contains=ALL
    3              0.000046 syn region mysqlFunction         start="character_length(" end=")" contains=ALL
    3              0.000042 syn region mysqlFunction         start="char_length(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="concat(" end=")" contains=ALL
    3              0.000048 syn region mysqlFunction         start="concat_ws(" end=")" contains=ALL
    3              0.000039 syn region mysqlFunction         start="connection_id(" end=")" contains=ALL
    3              0.000033 syn region mysqlFunction         start="conv(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="cos(" end=")" contains=ALL
    3              0.000033 syn region mysqlFunction         start="cot(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="count(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="curdate(" end=")" contains=ALL
    3              0.000032 syn region mysqlFunction         start="curtime(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="date_add(" end=")" contains=ALL
    3              0.000038 syn region mysqlFunction         start="date_format(" end=")" contains=ALL
    3              0.000033 syn region mysqlFunction         start="date_sub(" end=")" contains=ALL
    3              0.000032 syn region mysqlFunction         start="dayname(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="dayofmonth(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="dayofweek(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="dayofyear(" end=")" contains=ALL
    3              0.000033 syn region mysqlFunction         start="decode(" end=")" contains=ALL
    3              0.000063 syn region mysqlFunction         start="degrees(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="elt(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="encode(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="encrypt(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="exp(" end=")" contains=ALL
    3              0.000046 syn region mysqlFunction         start="export_set(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="extract(" end=")" contains=ALL
    3              0.000044 syn region mysqlFunction         start="field(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="find_in_set(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="floor(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="format(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="from_days(" end=")" contains=ALL
    3              0.000038 syn region mysqlFunction         start="from_unixtime(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="get_lock(" end=")" contains=ALL
    3              0.000037 syn region mysqlFunction         start="greatest(" end=")" contains=ALL
    3              0.000081 syn region mysqlFunction         start="group_unique_users(" end=")" contains=ALL
    3              0.000039 syn region mysqlFunction         start="hex(" end=")" contains=ALL
    3              0.000037 syn region mysqlFunction         start="inet_aton(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="inet_ntoa(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="instr(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="lcase(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="least(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="length(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="load_file(" end=")" contains=ALL
    3              0.000039 syn region mysqlFunction         start="locate(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="log(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="log10(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="lower(" end=")" contains=ALL
    3              0.000033 syn region mysqlFunction         start="lpad(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="ltrim(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="make_set(" end=")" contains=ALL
    3              0.000041 syn region mysqlFunction         start="master_pos_wait(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="max(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="md5(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="mid(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="min(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="mod(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="monthname(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="now(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="oct(" end=")" contains=ALL
    3              0.000042 syn region mysqlFunction         start="octet_length(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="ord(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="period_add(" end=")" contains=ALL
    3              0.000055 syn region mysqlFunction         start="period_diff(" end=")" contains=ALL
    3              0.000033 syn region mysqlFunction         start="pi(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="position(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="pow(" end=")" contains=ALL
    3              0.000037 syn region mysqlFunction         start="power(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="quarter(" end=")" contains=ALL
    3              0.000043 syn region mysqlFunction         start="radians(" end=")" contains=ALL
    3              0.000032 syn region mysqlFunction         start="rand(" end=")" contains=ALL
    3              0.000040 syn region mysqlFunction         start="release_lock(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="repeat(" end=")" contains=ALL
    3              0.000040 syn region mysqlFunction         start="reverse(" end=")" contains=ALL
    3              0.000041 syn region mysqlFunction         start="round(" end=")" contains=ALL
    3              0.000033 syn region mysqlFunction         start="rpad(" end=")" contains=ALL
    3              0.000040 syn region mysqlFunction         start="rtrim(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="sec_to_time(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="session_user(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="sign(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="sin(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="soundex(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="space(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="sqrt(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="std(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="stddev(" end=")" contains=ALL
    3              0.000033 syn region mysqlFunction         start="strcmp(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="subdate(" end=")" contains=ALL
    3              0.000039 syn region mysqlFunction         start="substring(" end=")" contains=ALL
    3              0.000068 syn region mysqlFunction         start="substring_index(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="subtime(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="sum(" end=")" contains=ALL
    3              0.000069 syn region mysqlFunction         start="sysdate(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="system_user(" end=")" contains=ALL
    3              0.000033 syn region mysqlFunction         start="tan(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="time_format(" end=")" contains=ALL
    3              0.000034 syn region mysqlFunction         start="time_to_sec(" end=")" contains=ALL
    3              0.000032 syn region mysqlFunction         start="to_days(" end=")" contains=ALL
    3              0.000033 syn region mysqlFunction         start="trim(" end=")" contains=ALL
    3              0.000035 syn region mysqlFunction         start="ucase(" end=")" contains=ALL
    3              0.000042 syn region mysqlFunction         start="unique_users(" end=")" contains=ALL
    3              0.000040 syn region mysqlFunction         start="unix_timestamp(" end=")" contains=ALL
    3              0.000036 syn region mysqlFunction         start="upper(" end=")" contains=ALL
    3              0.000031 syn region mysqlFunction         start="user(" end=")" contains=ALL
    3              0.000033 syn region mysqlFunction         start="version(" end=")" contains=ALL
    3              0.000032 syn region mysqlFunction         start="week(" end=")" contains=ALL
    3              0.000032 syn region mysqlFunction         start="weekday(" end=")" contains=ALL
    3              0.000032 syn region mysqlFunction         start="yearweek(" end=")" contains=ALL
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
    3              0.000057 hi def link mysqlKeyword            Statement
    3              0.000038 hi def link mysqlSpecial            Special
    3              0.000041 hi def link mysqlString             String
    3              0.000039 hi def link mysqlNumber             Number
    3              0.000039 hi def link mysqlVariable           Identifier
    3              0.000038 hi def link mysqlComment            Comment
    3              0.000037 hi def link mysqlType               Type
    3              0.000035 hi def link mysqlOperator           Statement
    3              0.000033 hi def link mysqlFlow               Statement
    3              0.000031 hi def link mysqlFunction           Function
                            
                            
    3              0.000021 let b:current_syntax = "mysql"
                            

SCRIPT  C:\Neovim\share\nvim\runtime\syntax\sql.vim
Sourced 3 times
Total time:   0.000191
 Self time:   0.000191

count  total (s)   self (s)
                            " Vim syntax file loader
                            " Language:    SQL
                            " Maintainer:  David Fishburn <fishburn at ianywhere dot com>
                            " Last Change: Thu Sep 15 2005 10:30:02 AM
                            " Version:     1.0
                            
                            " Description: Checks for a:
                            "                  buffer local variable,
                            "                  global variable,
                            "              If the above exist, it will source the type specified.
                            "              If none exist, it will source the default sql.vim file.
                            "
                            " quit when a syntax file was already loaded
    3              0.000034 if exists("b:current_syntax")
    3              0.000008     finish
                            endif
                            
                            " Default to the standard Vim distribution file
                            let filename = 'sqloracle'
                            
                            " Check for overrides.  Buffer variables have the highest priority.
                            if exists("b:sql_type_override")
                                " Check the runtimepath to see if the file exists
                                if globpath(&runtimepath, 'syntax/'.b:sql_type_override.'.vim') != ''
                                    let filename = b:sql_type_override
                                endif
                            elseif exists("g:sql_type_default")
                                if globpath(&runtimepath, 'syntax/'.g:sql_type_default.'.vim') != ''
                                    let filename = g:sql_type_default
                                endif
                            endif
                            
                            " Source the appropriate file
                            exec 'runtime syntax/'.filename.'.vim'
                            
                            " vim:sw=4:

SCRIPT  C:\Neovim\share\nvim\runtime\syntax\php.vim
Sourced 3 times
Total time:   0.000329
 Self time:   0.000329

count  total (s)   self (s)
                            " Vim syntax file
                            " Language: php PHP 3/4/5/7/8
                            " Maintainer: Tyson Andre <tysonandre775@hotmail.com>
                            " Last Change: Dec 22, 2020
                            " URL: https://github.com/TysonAndre/php-vim-syntax
                            " Former Maintainers: 
                            "         Jason Woofenden <jason@jasonwoof.com>
                            "         Peter Hodge <toomuchphp-vim@yahoo.com>
                            "         Debian VIM Maintainers <pkg-vim-maintainers@lists.alioth.debian.org>
                            "
                            " Note: If you are using a colour terminal with dark background, you will
                            "       probably find the 'elflord' colorscheme is much better for PHP's syntax
                            "       than the default colourscheme, because elflord's colours will better
                            "       highlight the break-points (Statements) in your code.
                            "
                            " Options:
                            "   Set to anything to enable:
                            "     php_sql_query           SQL syntax highlighting inside strings
                            "     php_htmlInStrings       HTML syntax highlighting inside strings
                            "     php_baselib             highlighting baselib functions
                            "     php_asp_tags            highlighting ASP-style short tags
                            "     php_parent_error_close  highlighting parent error ] or )
                            "     php_parent_error_open   skipping an php end tag, if there exists
                            "                               an open ( or [ without a closing one
                            "     php_oldStyle            use old colorstyle
                            "     php_noShortTags         don't sync <? ?> as php
                            "   Set to a specific value:
                            "     php_folding = 1         fold classes and functions
                            "     php_folding = 2         fold all { } regions
                            "     php_sync_method = x  where x is an integer:
                            "                       -1  sync by search ( default )
                            "                       >0  sync at least x lines backwards
                            "                       0   sync from start
                            "   Set to 0 to _disable_:      (Added by Peter Hodge On June 9, 2006)
                            "     php_special_functions = 0      highlight functions with abnormal behaviour
                            "     php_alt_comparisons = 0        comparison operators in an alternate colour
                            "     php_alt_assignByReference = 0  '= &' in an alternate colour
                            "
                            "
                            " Note:
                            " Setting php_folding=1 will match a closing } by comparing the indent
                            " before the class or function keyword with the indent of a matching }.
                            " Setting php_folding=2 will match all of pairs of {,} ( see known
                            " bugs ii )
                            
                            " Known Bugs:
                            "  - setting  php_parent_error_close  on  and  php_parent_error_open  off
                            "    has these two leaks:
                            "     i) A closing ) or ] inside a string match to the last open ( or [
                            "        before the string, when the the closing ) or ] is on the same line
                            "        where the string started. In this case a following ) or ] after
                            "        the string would be highlighted as an error, what is incorrect.
                            "    ii) Same problem if you are setting php_folding = 2 with a closing
                            "        } inside an string on the first line of this string.
                            
                            " quit when a syntax file was already loaded
    3              0.000033 if exists("b:current_syntax")
    3              0.000008   finish
                            endif
                            
                            if !exists("main_syntax")
                              let main_syntax = 'php'
                            endif
                            
                            runtime! syntax/html.vim
                            unlet b:current_syntax
                            
                            " accept old options
                            if !exists("php_sync_method")
                              if exists("php_minlines")
                                let php_sync_method=php_minlines
                              else
                                let php_sync_method=-1
                              endif
                            endif
                            
                            if exists("php_parentError") && !exists("php_parent_error_open") && !exists("php_parent_error_close")
                              let php_parent_error_close=1
                              let php_parent_error_open=1
                            endif
                            
                            syn cluster htmlPreproc add=phpRegion,phpRegionAsp,phpRegionSc
                            
                            syn include @sqlTop syntax/sql.vim
                            syn sync clear
                            unlet b:current_syntax
                            syn cluster sqlTop remove=sqlString,sqlComment
                            if exists( "php_sql_query")
                              syn cluster phpAddStrings contains=@sqlTop
                            endif
                            
                            if exists( "php_htmlInStrings")
                              syn cluster phpAddStrings add=@htmlTop
                            endif
                            
                            " make sure we can use \ at the beginning of the line to do a continuation
                            let s:cpo_save = &cpo
                            set cpo&vim
                            
                            syn case match
                            
                            " Env Variables
                            syn keyword phpEnvVar GATEWAY_INTERFACE SERVER_NAME SERVER_SOFTWARE SERVER_PROTOCOL REQUEST_METHOD QUERY_STRING DOCUMENT_ROOT HTTP_ACCEPT HTTP_ACCEPT_CHARSET HTTP_ENCODING HTTP_ACCEPT_LANGUAGE HTTP_CONNECTION HTTP_HOST HTTP_REFERER HTTP_USER_AGENT REMOTE_ADDR REMOTE_PORT SCRIPT_FILENAME SERVER_ADMIN SERVER_PORT SERVER_SIGNATURE PATH_TRANSLATED SCRIPT_NAME REQUEST_URI contained
                            
                            " Internal Variables
                            syn keyword phpIntVar GLOBALS PHP_ERRMSG PHP_SELF HTTP_GET_VARS HTTP_POST_VARS HTTP_COOKIE_VARS HTTP_POST_FILES HTTP_ENV_VARS HTTP_SERVER_VARS HTTP_SESSION_VARS HTTP_RAW_POST_DATA HTTP_STATE_VARS _GET _POST _COOKIE _FILES _SERVER _ENV _SERVER _REQUEST _SESSION contained
                            
                            " Constants
                            syn keyword phpCoreConstant PHP_VERSION PHP_OS DEFAULT_INCLUDE_PATH PEAR_INSTALL_DIR PEAR_EXTENSION_DIR PHP_EXTENSION_DIR PHP_BINDIR PHP_LIBDIR PHP_DATADIR PHP_SYSCONFDIR PHP_LOCALSTATEDIR PHP_CONFIG_FILE_PATH PHP_OUTPUT_HANDLER_START PHP_OUTPUT_HANDLER_CONT PHP_OUTPUT_HANDLER_END contained
                            
                            " Predefined constants
                            " Generated by: curl -q https://www.php.net/manual/en/errorfunc.constants.php | grep -oP 'E_\w+' | sort -u
                            syn keyword phpCoreConstant E_ALL E_COMPILE_ERROR E_COMPILE_WARNING E_CORE_ERROR E_CORE_WARNING E_DEPRECATED E_ERROR E_NOTICE E_PARSE E_RECOVERABLE_ERROR E_STRICT E_USER_DEPRECATED E_USER_ERROR E_USER_NOTICE E_USER_WARNING E_WARNING contained
                            
                            syn case ignore
                            
                            syn keyword phpConstant __LINE__ __FILE__ __FUNCTION__ __METHOD__ __CLASS__ __DIR__ __NAMESPACE__ __TRAIT__ contained
                            
                            
                            " Function and Methods ripped from php_manual_de.tar.gz Jan 2003 and amended later with common bundled extensions
                            
                            syn keyword phpFunctions apc_cache_info apc_clear_cache apc_store apc_fetch apc_enabled apc_delete apc_add apc_sma_info apc_inc apc_dec apc_cas apc_exists contained
                            syn keyword phpFunctions apcu_add apcu_cache_info apcu_cas apcu_clear_cache apcu_dec apcu_delete apcu_enabled apcu_entry apcu_exists apcu_fetch apcu_inc apcu_key_info apcu_sma_info apcu_store contained
                            syn keyword phpFunctions apache_child_terminate apache_get_modules apache_get_version apache_getenv apache_lookup_uri apache_note apache_request_headers apache_response_headers apache_setenv ascii2ebcdic ebcdic2ascii getallheaders virtual contained
                            syn keyword phpFunctions array_change_key_case array_chunk array_column array_combine array_count_values array_diff_assoc array_diff_key array_diff_uassoc array_diff_ukey array_diff array_fill_keys array_fill array_filter array_flip array_intersect_assoc array_intersect_key array_intersect_uassoc array_intersect_ukey array_intersect array_key_exists array_keys array_map array_merge_recursive array_merge array_multisort array_pad array_pop array_product array_push array_rand array_reduce array_replace_recursive array_replace array_reverse array_search array_shift array_slice array_splice array_sum array_udiff_assoc array_udiff_uassoc array_udiff array_uintersect_assoc array_uintersect_uassoc array_uintersect array_unique array_unshift array_values array_walk_recursive array_walk arsort asort count current each end in_array key_exists key krsort ksort natcasesort natsort next pos prev range reset rsort shuffle sizeof sort uasort uksort usort contained
                            syn keyword phpFunctions aspell_check aspell_new aspell_suggest contained
                            syn keyword phpFunctions bcadd bccomp bcdiv bcmod bcmul bcpow bcpowmod bcscale bcsqrt bcsub contained
                            syn keyword phpFunctions bzclose bzcompress bzdecompress bzerrno bzerror bzerrstr bzflush bzopen bzread bzwrite contained
                            syn keyword phpFunctions cal_days_in_month cal_from_jd cal_info cal_to_jd easter_date easter_days frenchtojd gregoriantojd jddayofweek jdmonthname jdtofrench jdtogregorian jdtojewish jdtojulian jdtounix jewishtojd juliantojd unixtojd contained
                            syn keyword phpFunctions ccvs_add ccvs_auth ccvs_command ccvs_count ccvs_delete ccvs_done ccvs_init ccvs_lookup ccvs_new ccvs_report ccvs_return ccvs_reverse ccvs_sale ccvs_status ccvs_textvalue ccvs_void contained
                            syn keyword phpFunctions call_user_method_array call_user_method class_exists get_class_methods get_class_vars get_class get_declared_classes get_object_vars get_parent_class is_a is_subclass_of method_exists contained
                            syn keyword phpFunctions com VARIANT com_addref com_get com_invoke com_isenum com_load_typelib com_load com_propget com_propput com_propset com_release com_set contained
                            syn keyword phpFunctions cpdf_add_annotation cpdf_add_outline cpdf_arc cpdf_begin_text cpdf_circle cpdf_clip cpdf_close cpdf_closepath_fill_stroke cpdf_closepath_stroke cpdf_closepath cpdf_continue_text cpdf_curveto cpdf_end_text cpdf_fill_stroke cpdf_fill cpdf_finalize_page cpdf_finalize cpdf_global_set_document_limits cpdf_import_jpeg cpdf_lineto cpdf_moveto cpdf_newpath cpdf_open cpdf_output_buffer cpdf_page_init cpdf_place_inline_image cpdf_rect cpdf_restore cpdf_rlineto cpdf_rmoveto cpdf_rotate_text cpdf_rotate cpdf_save_to_file cpdf_save cpdf_scale cpdf_set_action_url cpdf_set_char_spacing cpdf_set_creator cpdf_set_current_page cpdf_set_font_directories cpdf_set_font_map_file cpdf_set_font cpdf_set_horiz_scaling cpdf_set_keywords cpdf_set_leading cpdf_set_page_animation cpdf_set_subject cpdf_set_text_matrix cpdf_set_text_pos cpdf_set_text_rendering cpdf_set_text_rise cpdf_set_title cpdf_set_viewer_preferences cpdf_set_word_spacing cpdf_setdash cpdf_setflat cpdf_setgray_fill cpdf_setgray_stroke cpdf_set
                            syn keyword phpFunctions crack_check crack_closedict crack_getlastmessage crack_opendict contained
                            syn keyword phpFunctions ctype_alnum ctype_alpha ctype_cntrl ctype_digit ctype_graph ctype_lower ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit contained
                            syn keyword phpFunctions curl_close curl_errno curl_error curl_exec curl_getinfo curl_init curl_multi_add_handle curl_multi_close curl_multi_exec curl_multi_getcontent curl_multi_info_read curl_multi_init curl_multi_remove_handle curl_multi_select curl_setopt curl_version curl_copy_handle curl_escape curl_file_create curl_multi_errno curl_multi_setopt curl_multi_strerror curl_pause curl_reset curl_setopt_array curl_share_close curl_share_errno curl_share_init curl_share_setopt curl_share_strerror curl_strerror curl_unescape contained
                            syn keyword phpFunctions cybercash_base64_decode cybercash_base64_encode cybercash_decr cybercash_encr contained
                            syn keyword phpFunctions cyrus_authenticate cyrus_bind cyrus_close cyrus_connect cyrus_query cyrus_unbind contained
                            syn keyword phpFunctions checkdate date getdate gettimeofday gmdate gmmktime gmstrftime localtime microtime mktime strftime strtotime time date_add date_create date_create_from_format date_create_immutable date_create_immutable_from_format date_date_set date_default_timezone_get date_default_timezone_set date_diff date_format date_get_last_errors date_interval_create_from_date_string date_interval_format date_isodate_set date_modify date_offset_get date_parse date_parse_from_format date_sub date_sun_info date_sunrise date_sunset date_time_set date_timestamp_get date_timestamp_set date_timezone_get date_timezone_set idate timezone_abbreviations_list timezone_identifiers_list timezone_location_get timezone_name_from_abbr timezone_name_get timezone_offset_get timezone_open timezone_transitions_get timezone_version_get contained
                            syn keyword phpFunctions dba_close dba_delete dba_exists dba_fetch dba_firstkey dba_handlers dba_insert dba_key_split dba_list dba_nextkey dba_open dba_optimize dba_popen dba_replace dba_sync contained
                            syn keyword phpFunctions dbase_add_record dbase_close dbase_create dbase_delete_record dbase_get_header_info dbase_get_record_with_names dbase_get_record dbase_numfields dbase_numrecords dbase_open dbase_pack dbase_replace_record contained
                            syn keyword phpFunctions dblist dbmclose dbmdelete dbmexists dbmfetch dbmfirstkey dbminsert dbmnextkey dbmopen dbmreplace contained
                            syn keyword phpFunctions dbplus_add dbplus_aql dbplus_chdir dbplus_close dbplus_curr dbplus_errcode dbplus_errno dbplus_find dbplus_first dbplus_flush dbplus_freealllocks dbplus_freelock dbplus_freerlocks dbplus_getlock dbplus_getunique dbplus_info dbplus_last dbplus_lockrel dbplus_next dbplus_open dbplus_prev dbplus_rchperm dbplus_rcreate dbplus_rcrtexact dbplus_rcrtlike dbplus_resolve dbplus_restorepos dbplus_rkeys dbplus_ropen dbplus_rquery dbplus_rrename dbplus_rsecindex dbplus_runlink dbplus_rzap dbplus_savepos dbplus_setindex dbplus_setindexbynumber dbplus_sql dbplus_tcl dbplus_tremove dbplus_undo dbplus_undoprepare dbplus_unlockrel dbplus_unselect dbplus_update dbplus_xlockrel dbplus_xunlockrel contained
                            syn keyword phpFunctions dbx_close dbx_compare dbx_connect dbx_error dbx_escape_string dbx_fetch_row dbx_query dbx_sort contained
                            syn keyword phpFunctions dio_close dio_fcntl dio_open dio_read dio_seek dio_stat dio_tcsetattr dio_truncate dio_write contained
                            syn keyword phpFunctions chdir chroot dir closedir getcwd opendir readdir rewinddir scandir contained
                            syn keyword phpFunctions dom_import_simplexml contained
                            syn keyword phpFunctions domxml_new_doc domxml_open_file domxml_open_mem domxml_version domxml_xmltree domxml_xslt_stylesheet_doc domxml_xslt_stylesheet_file domxml_xslt_stylesheet xpath_eval_expression xpath_eval xpath_new_context xptr_eval xptr_new_context contained
                            syn keyword phpMethods name specified value create_attribute create_cdata_section create_comment create_element_ns create_element create_entity_reference create_processing_instruction create_text_node doctype document_element dump_file dump_mem get_element_by_id get_elements_by_tagname html_dump_mem xinclude entities internal_subset name notations public_id system_id get_attribute_node get_attribute get_elements_by_tagname has_attribute remove_attribute set_attribute tagname add_namespace append_child append_sibling attributes child_nodes clone_node dump_node first_child get_content has_attributes has_child_nodes insert_before is_blank_node last_child next_sibling node_name node_type node_value owner_document parent_node prefix previous_sibling remove_child replace_child replace_node set_content set_name set_namespace unlink_node data target process result_dump_file result_dump_mem contained
                            syn keyword phpFunctions dotnet_load contained
                            syn keyword phpFunctions debug_backtrace debug_print_backtrace error_log error_reporting restore_error_handler set_error_handler trigger_error user_error contained
                            syn keyword phpFunctions enchant_broker_describe enchant_broker_dict_exists enchant_broker_free enchant_broker_free_dict enchant_broker_get_dict_path enchant_broker_get_error enchant_broker_init enchant_broker_list_dicts enchant_broker_request_dict enchant_broker_request_pwl_dict enchant_broker_set_dict_path enchant_broker_set_ordering enchant_dict_add enchant_dict_add_to_personal enchant_dict_add_to_session enchant_dict_check enchant_dict_describe enchant_dict_get_error enchant_dict_is_added enchant_dict_is_in_session enchant_dict_quick_check enchant_dict_store_replacement enchant_dict_suggest contained
                            syn keyword phpFunctions escapeshellarg escapeshellcmd exec passthru proc_close proc_get_status proc_nice proc_open proc_terminate shell_exec system contained
                            syn keyword phpFunctions fam_cancel_monitor fam_close fam_monitor_collection fam_monitor_directory fam_monitor_file fam_next_event fam_open fam_pending fam_resume_monitor fam_suspend_monitor contained
                            syn keyword phpFunctions fbsql_affected_rows fbsql_autocommit fbsql_change_user fbsql_close fbsql_commit fbsql_connect fbsql_create_blob fbsql_create_clob fbsql_create_db fbsql_data_seek fbsql_database_password fbsql_database fbsql_db_query fbsql_db_status fbsql_drop_db fbsql_errno fbsql_error fbsql_fetch_array fbsql_fetch_assoc fbsql_fetch_field fbsql_fetch_lengths fbsql_fetch_object fbsql_fetch_row fbsql_field_flags fbsql_field_len fbsql_field_name fbsql_field_seek fbsql_field_table fbsql_field_type fbsql_free_result fbsql_get_autostart_info fbsql_hostname fbsql_insert_id fbsql_list_dbs fbsql_list_fields fbsql_list_tables fbsql_next_result fbsql_num_fields fbsql_num_rows fbsql_password fbsql_pconnect fbsql_query fbsql_read_blob fbsql_read_clob fbsql_result fbsql_rollback fbsql_select_db fbsql_set_lob_mode fbsql_set_transaction fbsql_start_db fbsql_stop_db fbsql_tablename fbsql_username fbsql_warnings contained
                            syn keyword phpFunctions fdf_add_doc_javascript fdf_add_template fdf_close fdf_create fdf_enum_values fdf_errno fdf_error fdf_get_ap fdf_get_attachment fdf_get_encoding fdf_get_file fdf_get_flags fdf_get_opt fdf_get_status fdf_get_value fdf_get_version fdf_header fdf_next_field_name fdf_open_string fdf_open fdf_remove_item fdf_save_string fdf_save fdf_set_ap fdf_set_encoding fdf_set_file fdf_set_flags fdf_set_javascript_action fdf_set_opt fdf_set_status fdf_set_submit_form_action fdf_set_target_frame fdf_set_value fdf_set_version contained
                            syn keyword phpFunctions filepro_fieldcount filepro_fieldname filepro_fieldtype filepro_fieldwidth filepro_retrieve filepro_rowcount filepro contained
                            syn keyword phpFunctions filter_has_var filter_id filter_input filter_input_array filter_list filter_var filter_var_array contained
                            syn keyword phpFunctions basename chgrp chmod chown clearstatcache copy delete dirname disk_free_space disk_total_space diskfreespace fclose feof fflush fgetc fgetcsv fgets fgetss file_exists file_get_contents file_put_contents file fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype flock fnmatch fopen fpassthru fputs fread fscanf fseek fstat ftell ftruncate fwrite glob is_dir is_executable is_file is_link is_readable is_uploaded_file is_writable is_writeable link linkinfo lstat mkdir move_uploaded_file parse_ini_file pathinfo pclose popen readfile readlink realpath rename rewind rmdir set_file_buffer stat symlink tempnam tmpfile touch umask unlink contained
                            syn keyword phpFunctions fribidi_log2vis contained
                            syn keyword phpFunctions ftp_alloc ftp_cdup ftp_chdir ftp_chmod ftp_close ftp_connect ftp_delete ftp_exec ftp_fget ftp_fput ftp_get_option ftp_get ftp_login ftp_mdtm ftp_mkdir ftp_nb_continue ftp_nb_fget ftp_nb_fput ftp_nb_get ftp_nb_put ftp_nlist ftp_pasv ftp_put ftp_pwd ftp_quit ftp_raw ftp_rawlist ftp_rename ftp_rmdir ftp_set_option ftp_site ftp_size ftp_ssl_connect ftp_systype ftp_append ftp_mlsd contained
                            syn keyword phpFunctions call_user_func_array call_user_func create_function func_get_arg func_get_args func_num_args function_exists get_defined_functions register_shutdown_function register_tick_function unregister_tick_function contained
                            syn keyword phpFunctions bind_textdomain_codeset bindtextdomain dcgettext dcngettext dgettext dngettext gettext ngettext textdomain _ contained
                            syn keyword phpFunctions gmp_abs gmp_add gmp_and gmp_clrbit gmp_cmp gmp_com gmp_div_q gmp_div_qr gmp_div_r gmp_div gmp_divexact gmp_fact gmp_gcd gmp_gcdext gmp_hamdist gmp_init gmp_intval gmp_invert gmp_jacobi gmp_legendre gmp_mod gmp_mul gmp_neg gmp_or gmp_perfect_square gmp_popcount gmp_pow gmp_powm gmp_prob_prime gmp_random gmp_scan0 gmp_scan1 gmp_setbit gmp_sign gmp_sqrt gmp_sqrtrem gmp_sqrtrm gmp_strval gmp_sub gmp_xor gmp_binomial gmp_export gmp_import gmp_kronecker gmp_lcm gmp_nextprime gmp_perfect_power gmp_random_bits gmp_random_range gmp_random_seed gmp_root gmp_rootrem gmp_testbit contained
                            syn keyword phpFunctions hash hash_algos hash_copy hash_equals hash_file hash_final hash_hkdf hash_hmac hash_hmac_algos hash_hmac_file hash_init hash_pbkdf2 hash_update hash_update_file hash_update_stream contained
                            syn keyword phpFunctions header headers_list headers_sent setcookie contained
                            syn keyword phpFunctions hw_api_attribute hwapi_hgcsp hw_api_content hw_api_object contained
                            syn keyword phpMethods key langdepvalue value values checkin checkout children mimetype read content copy dbstat dcstat dstanchors dstofsrcanchors count reason find ftstat hwstat identify info insert insertanchor insertcollection insertdocument link lock move assign attreditable count insert remove title value object objectbyanchor parents description type remove replace setcommitedversion srcanchors srcsofdst unlock user userlist contained
                            syn keyword phpFunctions hw_Array2Objrec hw_changeobject hw_Children hw_ChildrenObj hw_Close hw_Connect hw_connection_info hw_cp hw_Deleteobject hw_DocByAnchor hw_DocByAnchorObj hw_Document_Attributes hw_Document_BodyTag hw_Document_Content hw_Document_SetContent hw_Document_Size hw_dummy hw_EditText hw_Error hw_ErrorMsg hw_Free_Document hw_GetAnchors hw_GetAnchorsObj hw_GetAndLock hw_GetChildColl hw_GetChildCollObj hw_GetChildDocColl hw_GetChildDocCollObj hw_GetObject hw_GetObjectByQuery hw_GetObjectByQueryColl hw_GetObjectByQueryCollObj hw_GetObjectByQueryObj hw_GetParents hw_GetParentsObj hw_getrellink hw_GetRemote hw_getremotechildren hw_GetSrcByDestObj hw_GetText hw_getusername hw_Identify hw_InCollections hw_Info hw_InsColl hw_InsDoc hw_insertanchors hw_InsertDocument hw_InsertObject hw_mapid hw_Modifyobject hw_mv hw_New_Document hw_objrec2array hw_Output_Document hw_pConnect hw_PipeDocument hw_Root hw_setlinkroot hw_stat hw_Unlock hw_Who contained
                            syn keyword phpFunctions ibase_add_user ibase_affected_rows ibase_blob_add ibase_blob_cancel ibase_blob_close ibase_blob_create ibase_blob_echo ibase_blob_get ibase_blob_import ibase_blob_info ibase_blob_open ibase_close ibase_commit_ret ibase_commit ibase_connect ibase_delete_user ibase_drop_db ibase_errcode ibase_errmsg ibase_execute ibase_fetch_assoc ibase_fetch_object ibase_fetch_row ibase_field_info ibase_free_event_handler ibase_free_query ibase_free_result ibase_gen_id ibase_modify_user ibase_name_result ibase_num_fields ibase_num_params ibase_param_info ibase_pconnect ibase_prepare ibase_query ibase_rollback_ret ibase_rollback ibase_set_event_handler ibase_timefmt ibase_trans ibase_wait_event contained
                            syn keyword phpFunctions iconv_get_encoding iconv_mime_decode_headers iconv_mime_decode iconv_mime_encode iconv_set_encoding iconv_strlen iconv_strpos iconv_strrpos iconv_substr iconv ob_iconv_handler contained
                            syn keyword phpFunctions ifx_affected_rows ifx_blobinfile_mode ifx_byteasvarchar ifx_close ifx_connect ifx_copy_blob ifx_create_blob ifx_create_char ifx_do ifx_error ifx_errormsg ifx_fetch_row ifx_fieldproperties ifx_fieldtypes ifx_free_blob ifx_free_char ifx_free_result ifx_get_blob ifx_get_char ifx_getsqlca ifx_htmltbl_result ifx_nullformat ifx_num_fields ifx_num_rows ifx_pconnect ifx_prepare ifx_query ifx_textasvarchar ifx_update_blob ifx_update_char ifxus_close_slob ifxus_create_slob ifxus_free_slob ifxus_open_slob ifxus_read_slob ifxus_seek_slob ifxus_tell_slob ifxus_write_slob contained
                            syn keyword phpFunctions igbinary_serialize igbinary_unserialize contained
                            syn keyword phpFunctions exif_imagetype exif_read_data exif_thumbnail gd_info getimagesize image_type_to_mime_type image2wbmp imagealphablending imageantialias imagearc imagechar imagecharup imagecolorallocate imagecolorallocatealpha imagecolorat imagecolorclosest imagecolorclosestalpha imagecolorclosesthwb imagecolordeallocate imagecolorexact imagecolorexactalpha imagecolormatch imagecolorresolve imagecolorresolvealpha imagecolorset imagecolorsforindex imagecolorstotal imagecolortransparent imagecopy imagecopymerge imagecopymergegray imagecopyresampled imagecopyresized imagecreate imagecreatefromgd2 imagecreatefromgd2part imagecreatefromgd imagecreatefromgif imagecreatefromjpeg imagecreatefrompng imagecreatefromstring imagecreatefromwbmp imagecreatefromxbm imagecreatefromxpm imagecreatetruecolor imagedashedline imagedestroy imageellipse imagefill imagefilledarc imagefilledellipse imagefilledpolygon imagefilledrectangle imagefilltoborder imagefontheight imagefontwidth imageftbbox imagefttext imagegammacorrec
                            syn keyword phpFunctions imap_8bit imap_alerts imap_append imap_base64 imap_binary imap_body imap_bodystruct imap_check imap_clearflag_full imap_close imap_createmailbox imap_delete imap_deletemailbox imap_errors imap_expunge imap_fetch_overview imap_fetchbody imap_fetchheader imap_fetchstructure imap_get_quota imap_get_quotaroot imap_getacl imap_getmailboxes imap_getsubscribed imap_header imap_headerinfo imap_headers imap_last_error imap_list imap_listmailbox imap_listscan imap_listsubscribed imap_lsub imap_mail_compose imap_mail_copy imap_mail_move imap_mail imap_mailboxmsginfo imap_mime_header_decode imap_msgno imap_num_msg imap_num_recent imap_open imap_ping imap_qprint imap_renamemailbox imap_reopen imap_rfc822_parse_adrlist imap_rfc822_parse_headers imap_rfc822_write_address imap_scanmailbox imap_search imap_set_quota imap_setacl imap_setflag_full imap_sort imap_status imap_subscribe imap_thread imap_timeout imap_uid imap_undelete imap_unsubscribe imap_utf7_decode imap_utf7_encode imap_utf8 contained
                            syn keyword phpFunctions assert_options assert dl extension_loaded get_cfg_var get_current_user get_defined_constants get_extension_funcs get_include_path get_included_files get_loaded_extensions get_magic_quotes_gpc get_magic_quotes_runtime get_required_files getenv getlastmod getmygid getmyinode getmypid getmyuid getopt getrusage ini_alter ini_get_all ini_get ini_restore ini_set main memory_get_usage php_ini_scanned_files php_logo_guid php_sapi_name php_uname phpcredits phpinfo phpversion putenv restore_include_path set_include_path set_magic_quotes_runtime set_time_limit version_compare zend_logo_guid zend_version contained
                            syn keyword phpFunctions ingres_autocommit ingres_close ingres_commit ingres_connect ingres_fetch_array ingres_fetch_object ingres_fetch_row ingres_field_length ingres_field_name ingres_field_nullable ingres_field_precision ingres_field_scale ingres_field_type ingres_num_fields ingres_num_rows ingres_pconnect ingres_query ingres_rollback contained
                            syn keyword phpFunctions collator_asort collator_compare collator_create collator_get_attribute collator_get_error_code collator_get_error_message collator_get_locale collator_get_sort_key collator_get_strength collator_set_attribute collator_set_strength collator_sort collator_sort_with_sort_keys datefmt_create datefmt_format datefmt_format_object datefmt_get_calendar datefmt_get_calendar_object datefmt_get_datetype datefmt_get_error_code datefmt_get_error_message datefmt_get_locale datefmt_get_pattern datefmt_get_timetype datefmt_get_timezone datefmt_get_timezone_id datefmt_is_lenient datefmt_localtime datefmt_parse datefmt_set_calendar datefmt_set_lenient datefmt_set_pattern datefmt_set_timezone grapheme_extract grapheme_stripos grapheme_stristr grapheme_strlen grapheme_strpos grapheme_strripos grapheme_strrpos grapheme_strstr grapheme_substr idn_to_ascii idn_to_utf8 intl_error_name intl_get_error_code intl_get_error_message intl_is_failure intlcal_add intlcal_after intlcal_before intlcal_clear intlcal_cr
                            syn keyword phpFunctions ircg_channel_mode ircg_disconnect ircg_fetch_error_msg ircg_get_username ircg_html_encode ircg_ignore_add ircg_ignore_del ircg_is_conn_alive ircg_join ircg_kick ircg_lookup_format_messages ircg_msg ircg_nick ircg_nickname_escape ircg_nickname_unescape ircg_notice ircg_part ircg_pconnect ircg_register_format_messages ircg_set_current ircg_set_file ircg_set_on_die ircg_topic ircg_whois contained
                            syn keyword phpFunctions java_last_exception_clear java_last_exception_get contained
                            syn keyword phpFunctions json_decode json_encode json_last_error json_last_error_msg contained
                            syn keyword phpFunctions ldap_8859_to_t61 ldap_add ldap_bind ldap_close ldap_compare ldap_connect ldap_count_entries ldap_delete ldap_dn2ufn ldap_err2str ldap_errno ldap_error ldap_explode_dn ldap_first_attribute ldap_first_entry ldap_first_reference ldap_free_result ldap_get_attributes ldap_get_dn ldap_get_entries ldap_get_option ldap_get_values_len ldap_get_values ldap_list ldap_mod_add ldap_mod_del ldap_mod_replace ldap_modify ldap_next_attribute ldap_next_entry ldap_next_reference ldap_parse_reference ldap_parse_result ldap_read ldap_rename ldap_search ldap_set_option ldap_set_rebind_proc ldap_sort ldap_start_tls ldap_t61_to_8859 ldap_unbind contained
                            syn keyword phpFunctions libxml_clear_errors libxml_disable_entity_loader libxml_get_errors libxml_get_last_error libxml_set_external_entity_loader libxml_set_streams_context libxml_use_internal_errors contained
                            syn keyword phpFunctions lzf_compress lzf_decompress lzf_optimized_for contained
                            syn keyword phpFunctions ezmlm_hash mail contained
                            syn keyword phpFunctions mailparse_determine_best_xfer_encoding mailparse_msg_create mailparse_msg_extract_part_file mailparse_msg_extract_part mailparse_msg_free mailparse_msg_get_part_data mailparse_msg_get_part mailparse_msg_get_structure mailparse_msg_parse_file mailparse_msg_parse mailparse_rfc822_parse_addresses mailparse_stream_encode mailparse_uudecode_all contained
                            syn keyword phpFunctions abs acos acosh asin asinh atan2 atan atanh base_convert bindec ceil cos cosh decbin dechex decoct deg2rad exp expm1 floor fmod getrandmax hexdec hypot is_finite is_infinite is_nan lcg_value log10 log1p log max min mt_getrandmax mt_rand mt_srand octdec pi pow rad2deg rand round sin sinh sqrt srand tan tanh contained
                            syn keyword phpFunctions array_key_first array_key_last boolval cli_get_process_title cli_set_process_title convert_uudecode convert_uuencode debug_zval_dump error_clear_last error_get_last forward_static_call forward_static_call_array fputcsv get_headers gethostname getimagesizefromstring header_register_callback header_remove hex2bin hrtime htmlspecialchars_decode http_response_code image_type_to_extension inet_ntop inet_pton intdiv is_countable is_iterable lcfirst lchgrp lchown memory_get_peak_usage net_get_interfaces parse_ini_string password_algos password_get_info password_hash password_needs_rehash password_verify php_ini_loaded_file php_strip_whitespace quoted_printable_encode random_bytes random_int realpath_cache_get realpath_cache_size setrawcookie str_getcsv stream_bucket_append stream_bucket_make_writeable stream_bucket_new stream_bucket_prepend stream_context_get_default stream_context_get_params stream_context_set_default stream_filter_remove stream_is_local stream_isatty stream_resolve_includ
                             
                            syn keyword phpFunctions mb_convert_case mb_convert_encoding mb_convert_kana mb_convert_variables mb_decode_mimeheader mb_decode_numericentity mb_detect_encoding mb_detect_order mb_encode_mimeheader mb_encode_numericentity mb_ereg_match mb_ereg_replace mb_ereg_search_getpos mb_ereg_search_getregs mb_ereg_search_init mb_ereg_search_pos mb_ereg_search_regs mb_ereg_search_setpos mb_ereg_search mb_ereg mb_eregi_replace mb_eregi mb_get_info mb_http_input mb_http_output mb_internal_encoding mb_language mb_output_handler mb_parse_str mb_preferred_mime_name mb_regex_encoding mb_regex_set_options mb_send_mail mb_split mb_strcut mb_strimwidth mb_strlen mb_strpos mb_strrpos mb_strtolower mb_strtoupper mb_strwidth mb_substitute_character mb_substr_count mb_substr mb_check_encoding mb_chr mb_encoding_aliases mb_ereg_replace_callback mb_list_encodings mb_ord mb_scrub mb_str_split mb_stripos mb_stristr mb_strrchr mb_strrichr mb_strripos mb_strstr mbereg mbereg_match mbereg_replace mbereg_search mbereg_search_getpos mbereg_
                            syn keyword phpFunctions mcal_append_event mcal_close mcal_create_calendar mcal_date_compare mcal_date_valid mcal_day_of_week mcal_day_of_year mcal_days_in_month mcal_delete_calendar mcal_delete_event mcal_event_add_attribute mcal_event_init mcal_event_set_alarm mcal_event_set_category mcal_event_set_class mcal_event_set_description mcal_event_set_end mcal_event_set_recur_daily mcal_event_set_recur_monthly_mday mcal_event_set_recur_monthly_wday mcal_event_set_recur_none mcal_event_set_recur_weekly mcal_event_set_recur_yearly mcal_event_set_start mcal_event_set_title mcal_expunge mcal_fetch_current_stream_event mcal_fetch_event mcal_is_leap_year mcal_list_alarms mcal_list_events mcal_next_recurrence mcal_open mcal_popen mcal_rename_calendar mcal_reopen mcal_snooze mcal_store_event mcal_time_valid mcal_week_of_year contained
                            syn keyword phpFunctions mcrypt_cbc mcrypt_cfb mcrypt_create_iv mcrypt_decrypt mcrypt_ecb mcrypt_enc_get_algorithms_name mcrypt_enc_get_block_size mcrypt_enc_get_iv_size mcrypt_enc_get_key_size mcrypt_enc_get_modes_name mcrypt_enc_get_supported_key_sizes mcrypt_enc_is_block_algorithm_mode mcrypt_enc_is_block_algorithm mcrypt_enc_is_block_mode mcrypt_enc_self_test mcrypt_encrypt mcrypt_generic_deinit mcrypt_generic_end mcrypt_generic_init mcrypt_generic mcrypt_get_block_size mcrypt_get_cipher_name mcrypt_get_iv_size mcrypt_get_key_size mcrypt_list_algorithms mcrypt_list_modes mcrypt_module_close mcrypt_module_get_algo_block_size mcrypt_module_get_algo_key_size mcrypt_module_get_supported_key_sizes mcrypt_module_is_block_algorithm_mode mcrypt_module_is_block_algorithm mcrypt_module_is_block_mode mcrypt_module_open mcrypt_module_self_test mcrypt_ofb mdecrypt_generic contained
                            syn keyword phpFunctions mcve_adduser mcve_adduserarg mcve_bt mcve_checkstatus mcve_chkpwd mcve_chngpwd mcve_completeauthorizations mcve_connect mcve_connectionerror mcve_deleteresponse mcve_deletetrans mcve_deleteusersetup mcve_deluser mcve_destroyconn mcve_destroyengine mcve_disableuser mcve_edituser mcve_enableuser mcve_force mcve_getcell mcve_getcellbynum mcve_getcommadelimited mcve_getheader mcve_getuserarg mcve_getuserparam mcve_gft mcve_gl mcve_gut mcve_initconn mcve_initengine mcve_initusersetup mcve_iscommadelimited mcve_liststats mcve_listusers mcve_maxconntimeout mcve_monitor mcve_numcolumns mcve_numrows mcve_override mcve_parsecommadelimited mcve_ping mcve_preauth mcve_preauthcompletion mcve_qc mcve_responseparam mcve_return mcve_returncode mcve_returnstatus mcve_sale mcve_setblocking mcve_setdropfile mcve_setip mcve_setssl_files mcve_setssl mcve_settimeout mcve_settle mcve_text_avs mcve_text_code mcve_text_cv mcve_transactionauth mcve_transactionavs mcve_transactionbatch mcve_transactioncv mcve_
                            syn keyword phpFunctions mhash_count mhash_get_block_size mhash_get_hash_name mhash_keygen_s2k mhash contained
                            syn keyword phpFunctions mime_content_type finfo_buffer finfo_close finfo_file finfo_open finfo_set_flags contained
                            syn keyword phpFunctions ming_setcubicthreshold ming_setscale ming_useswfversion SWFAction SWFBitmap swfbutton_keypress SWFbutton SWFDisplayItem SWFFill SWFFont SWFGradient SWFMorph SWFMovie SWFShape SWFSprite SWFText SWFTextField contained
                            syn keyword phpMethods getHeight getWidth addAction addShape setAction setdown setHit setOver setUp addColor move moveTo multColor remove Rotate rotateTo scale scaleTo setDepth setName setRatio skewX skewXTo skewY skewYTo moveTo rotateTo scaleTo skewXTo skewYTo getwidth addEntry getshape1 getshape2 add nextframe output remove save setbackground setdimension setframes setrate streammp3 addFill drawCurve drawCurveTo drawLine drawLineTo movePen movePenTo setLeftFill setLine setRightFill add nextframe remove setframes addString getWidth moveTo setColor setFont setHeight setSpacing addstring align setbounds setcolor setFont setHeight setindentation setLeftMargin setLineSpacing setMargins setname setrightMargin contained
                            syn keyword phpFunctions connection_aborted connection_status connection_timeout constant define defined die eval exit get_browser highlight_file highlight_string ignore_user_abort pack show_source sleep uniqid unpack usleep contained
                            syn keyword phpFunctions udm_add_search_limit udm_alloc_agent udm_api_version udm_cat_list udm_cat_path udm_check_charset udm_check_stored udm_clear_search_limits udm_close_stored udm_crc32 udm_errno udm_error udm_find udm_free_agent udm_free_ispell_data udm_free_res udm_get_doc_count udm_get_res_field udm_get_res_param udm_load_ispell_data udm_open_stored udm_set_agent_param contained
                            syn keyword phpFunctions msession_connect msession_count msession_create msession_destroy msession_disconnect msession_find msession_get_array msession_get msession_getdata msession_inc msession_list msession_listvar msession_lock msession_plugin msession_randstr msession_set_array msession_set msession_setdata msession_timeout msession_uniq msession_unlock contained
                            syn keyword phpFunctions msql_affected_rows msql_close msql_connect msql_create_db msql_createdb msql_data_seek msql_dbname msql_drop_db msql_dropdb msql_error msql_fetch_array msql_fetch_field msql_fetch_object msql_fetch_row msql_field_seek msql_fieldflags msql_fieldlen msql_fieldname msql_fieldtable msql_fieldtype msql_free_result msql_freeresult msql_list_dbs msql_list_fields msql_list_tables msql_listdbs msql_listfields msql_listtables msql_num_fields msql_num_rows msql_numfields msql_numrows msql_pconnect msql_query msql_regcase msql_result msql_select_db msql_selectdb msql_tablename msql contained
                            syn keyword phpFunctions mssql_bind mssql_close mssql_connect mssql_data_seek mssql_execute mssql_fetch_array mssql_fetch_assoc mssql_fetch_batch mssql_fetch_field mssql_fetch_object mssql_fetch_row mssql_field_length mssql_field_name mssql_field_seek mssql_field_type mssql_free_result mssql_free_statement mssql_get_last_message mssql_guid_string mssql_init mssql_min_error_severity mssql_min_message_severity mssql_next_result mssql_num_fields mssql_num_rows mssql_pconnect mssql_query mssql_result mssql_rows_affected mssql_select_db contained
                            syn keyword phpFunctions muscat_close muscat_get muscat_give muscat_setup_net muscat_setup contained
                            syn keyword phpFunctions mysql_affected_rows mysql_change_user mysql_client_encoding mysql_close mysql_connect mysql_create_db mysql_data_seek mysql_db_name mysql_db_query mysql_drop_db mysql_errno mysql_error mysql_escape_string mysql_fetch_array mysql_fetch_assoc mysql_fetch_field mysql_fetch_lengths mysql_fetch_object mysql_fetch_row mysql_field_flags mysql_field_len mysql_field_name mysql_field_seek mysql_field_table mysql_field_type mysql_free_result mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql_insert_id mysql_list_dbs mysql_list_fields mysql_list_processes mysql_list_tables mysql_num_fields mysql_num_rows mysql_pconnect mysql_ping mysql_query mysql_real_escape_string mysql_result mysql_select_db mysql_stat mysql_tablename mysql_thread_id mysql_unbuffered_query contained
                            syn keyword phpFunctions mysqli_affected_rows mysqli_autocommit mysqli_bind_param mysqli_bind_result mysqli_change_user mysqli_character_set_name mysqli_close mysqli_commit mysqli_connect mysqli_data_seek mysqli_debug mysqli_disable_reads_from_master mysqli_disable_rpl_parse mysqli_dump_debug_info mysqli_enable_reads_from_master mysqli_enable_rpl_parse mysqli_errno mysqli_error mysqli_execute mysqli_fetch_array mysqli_fetch_assoc mysqli_fetch_field_direct mysqli_fetch_field mysqli_fetch_fields mysqli_fetch_lengths mysqli_fetch_object mysqli_fetch_row mysqli_fetch mysqli_field_count mysqli_field_seek mysqli_field_tell mysqli_free_result mysqli_get_client_info mysqli_get_host_info mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version mysqli_info mysqli_init mysqli_insert_id mysqli_kill mysqli_master_query mysqli_num_fields mysqli_num_rows mysqli_options mysqli_param_count mysqli_ping mysqli_prepare_result mysqli_prepare mysqli_profiler mysqli_query mysqli_read_query_result mysqli_real_connect 
                            syn keyword phpFunctions ncurses_addch ncurses_addchnstr ncurses_addchstr ncurses_addnstr ncurses_addstr ncurses_assume_default_colors ncurses_attroff ncurses_attron ncurses_attrset ncurses_baudrate ncurses_beep ncurses_bkgd ncurses_bkgdset ncurses_border ncurses_bottom_panel ncurses_can_change_color ncurses_cbreak ncurses_clear ncurses_clrtobot ncurses_clrtoeol ncurses_color_content ncurses_color_set ncurses_curs_set ncurses_def_prog_mode ncurses_def_shell_mode ncurses_define_key ncurses_del_panel ncurses_delay_output ncurses_delch ncurses_deleteln ncurses_delwin ncurses_doupdate ncurses_echo ncurses_echochar ncurses_end ncurses_erase ncurses_erasechar ncurses_filter ncurses_flash ncurses_flushinp ncurses_getch ncurses_getmaxyx ncurses_getmouse ncurses_getyx ncurses_halfdelay ncurses_has_colors ncurses_has_ic ncurses_has_il ncurses_has_key ncurses_hide_panel ncurses_hline ncurses_inch ncurses_init_color ncurses_init_pair ncurses_init ncurses_insch ncurses_insdelln ncurses_insertln ncurses_insstr ncurses_ins
                            syn keyword phpFunctions checkdnsrr closelog debugger_off debugger_on define_syslog_variables dns_check_record dns_get_mx dns_get_record fsockopen gethostbyaddr gethostbyname gethostbynamel getmxrr getprotobyname getprotobynumber getservbyname getservbyport ip2long long2ip openlog pfsockopen socket_get_status socket_set_blocking socket_set_timeout syslog contained
                            syn keyword phpFunctions yp_all yp_cat yp_err_string yp_errno yp_first yp_get_default_domain yp_master yp_match yp_next yp_order contained
                            syn keyword phpFunctions notes_body notes_copy_db notes_create_db notes_create_note notes_drop_db notes_find_note notes_header_info notes_list_msgs notes_mark_read notes_mark_unread notes_nav_create notes_search notes_unread notes_version contained
                            syn keyword phpFunctions nsapi_request_headers nsapi_response_headers nsapi_virtual contained
                            syn keyword phpFunctions aggregate_info aggregate_methods_by_list aggregate_methods_by_regexp aggregate_methods aggregate_properties_by_list aggregate_properties_by_regexp aggregate_properties aggregate aggregation_info deaggregate contained
                            syn keyword phpFunctions ocibindbyname ocicancel ocicloselob ocicollappend ocicollassign ocicollassignelem ocicollgetelem ocicollmax ocicollsize ocicolltrim ocicolumnisnull ocicolumnname ocicolumnprecision ocicolumnscale ocicolumnsize ocicolumntype ocicolumntyperaw ocicommit ocidefinebyname ocierror ociexecute ocifetch ocifetchinto ocifetchstatement ocifreecollection ocifreecursor ocifreedesc ocifreestatement ociinternaldebug ociloadlob ocilogoff ocilogon ocinewcollection ocinewcursor ocinewdescriptor ocinlogon ocinumcols ociparse ociplogon ociresult ocirollback ocirowcount ocisavelob ocisavelobfile ociserverversion ocisetprefetch ocistatementtype ociwritelobtofile ociwritetemporarylob contained
                            syn keyword phpFunctions odbc_autocommit odbc_binmode odbc_close_all odbc_close odbc_columnprivileges odbc_columns odbc_commit odbc_connect odbc_cursor odbc_data_source odbc_do odbc_error odbc_errormsg odbc_exec odbc_execute odbc_fetch_array odbc_fetch_into odbc_fetch_object odbc_fetch_row odbc_field_len odbc_field_name odbc_field_num odbc_field_precision odbc_field_scale odbc_field_type odbc_foreignkeys odbc_free_result odbc_gettypeinfo odbc_longreadlen odbc_next_result odbc_num_fields odbc_num_rows odbc_pconnect odbc_prepare odbc_primarykeys odbc_procedurecolumns odbc_procedures odbc_result_all odbc_result odbc_rollback odbc_setoption odbc_specialcolumns odbc_statistics odbc_tableprivileges odbc_tables contained
                            syn keyword phpFunctions opcache_reset opcache_invalidate opcache_compile_file opcache_is_script_cached opcache_get_configuration opcache_get_status contained
                            syn keyword phpFunctions openssl_cipher_iv_length openssl_cms_decrypt openssl_cms_encrypt openssl_cms_read openssl_cms_sign openssl_cms_verify openssl_csr_export_to_file openssl_csr_export openssl_csr_get_public_key openssl_csr_get_subject openssl_csr_new openssl_csr_sign openssl_decrypt openssl_dh_compute_key openssl_digest openssl_encrypt openssl_error_string openssl_free_key openssl_get_cert_locations openssl_get_cipher_methods openssl_get_md_methods openssl_get_privatekey openssl_get_publickey openssl_open openssl_pbkdf2 openssl_pkcs12_export_to_file openssl_pkcs12_export openssl_pkcs12_read openssl_pkcs7_decrypt openssl_pkcs7_encrypt openssl_pkcs7_sign openssl_pkcs7_verify openssl_pkey_export_to_file openssl_pkey_export openssl_pkey_free openssl_pkey_get_details openssl_pkey_get_private openssl_pkey_get_public openssl_pkey_new openssl_private_decrypt openssl_private_encrypt openssl_public_decrypt openssl_public_encrypt openssl_random_pseudo_bytes openssl_seal openssl_sign openssl_spki_export_challenge o
                            syn keyword phpFunctions ora_bind ora_close ora_columnname ora_columnsize ora_columntype ora_commit ora_commitoff ora_commiton ora_do ora_error ora_errorcode ora_exec ora_fetch_into ora_fetch ora_getcolumn ora_logoff ora_logon ora_numcols ora_numrows ora_open ora_parse ora_plogon ora_rollback contained
                            syn keyword phpFunctions flush ob_clean ob_end_clean ob_end_flush ob_flush ob_get_clean ob_get_contents ob_get_flush ob_get_length ob_get_level ob_get_status ob_gzhandler ob_implicit_flush ob_list_handlers ob_start output_add_rewrite_var output_reset_rewrite_vars contained
                            syn keyword phpFunctions overload contained
                            syn keyword phpFunctions ovrimos_close ovrimos_commit ovrimos_connect ovrimos_cursor ovrimos_exec ovrimos_execute ovrimos_fetch_into ovrimos_fetch_row ovrimos_field_len ovrimos_field_name ovrimos_field_num ovrimos_field_type ovrimos_free_result ovrimos_longreadlen ovrimos_num_fields ovrimos_num_rows ovrimos_prepare ovrimos_result_all ovrimos_result ovrimos_rollback contained
                            syn keyword phpFunctions pcntl_exec pcntl_fork pcntl_signal pcntl_waitpid pcntl_wexitstatus pcntl_wifexited pcntl_wifsignaled pcntl_wifstopped pcntl_wstopsig pcntl_wtermsig pcntl_alarm pcntl_async_signals pcntl_errno pcntl_get_last_error pcntl_getpriority pcntl_setpriority pcntl_signal_dispatch pcntl_signal_get_handler pcntl_sigprocmask pcntl_sigtimedwait pcntl_sigwaitinfo pcntl_strerror pcntl_unshare pcntl_wait pcntl_wifcontinued contained
                            syn keyword phpFunctions preg_filter preg_grep preg_last_error preg_last_error_msg preg_match_all preg_match preg_quote preg_replace_callback preg_replace_callback_array preg_replace preg_split contained
                            syn keyword phpFunctions pdo_drivers contained
                            syn keyword phpFunctions pdf_add_annotation pdf_add_bookmark pdf_add_launchlink pdf_add_locallink pdf_add_note pdf_add_outline pdf_add_pdflink pdf_add_thumbnail pdf_add_weblink pdf_arc pdf_arcn pdf_attach_file pdf_begin_page pdf_begin_pattern pdf_begin_template pdf_circle pdf_clip pdf_close_image pdf_close_pdi_page pdf_close_pdi pdf_close pdf_closepath_fill_stroke pdf_closepath_stroke pdf_closepath pdf_concat pdf_continue_text pdf_curveto pdf_delete pdf_end_page pdf_end_pattern pdf_end_template pdf_endpath pdf_fill_stroke pdf_fill pdf_findfont pdf_get_buffer pdf_get_font pdf_get_fontname pdf_get_fontsize pdf_get_image_height pdf_get_image_width pdf_get_majorversion pdf_get_minorversion pdf_get_parameter pdf_get_pdi_parameter pdf_get_pdi_value pdf_get_value pdf_initgraphics pdf_lineto pdf_makespotcolor pdf_moveto pdf_new pdf_open_CCITT pdf_open_file pdf_open_gif pdf_open_image_file pdf_open_image pdf_open_jpeg pdf_open_memory_image pdf_open_pdi_page pdf_open_pdi pdf_open_png pdf_open_tiff pdf_open pdf_place_i
                            syn keyword phpFunctions pfpro_cleanup pfpro_init pfpro_process_raw pfpro_process pfpro_version contained
                            syn keyword phpFunctions pg_affected_rows pg_cancel_query pg_client_encoding pg_close pg_connect pg_connection_busy pg_connection_reset pg_connection_status pg_convert pg_copy_from pg_copy_to pg_dbname pg_delete pg_end_copy pg_escape_bytea pg_escape_string pg_fetch_all pg_fetch_array pg_fetch_assoc pg_fetch_object pg_fetch_result pg_fetch_row pg_field_is_null pg_field_name pg_field_num pg_field_prtlen pg_field_size pg_field_type pg_free_result pg_get_notify pg_get_pid pg_get_result pg_host pg_insert pg_last_error pg_last_notice pg_last_oid pg_lo_close pg_lo_create pg_lo_export pg_lo_import pg_lo_open pg_lo_read_all pg_lo_read pg_lo_seek pg_lo_tell pg_lo_unlink pg_lo_write pg_meta_data pg_num_fields pg_num_rows pg_options pg_pconnect pg_ping pg_port pg_put_line pg_query pg_result_error pg_result_seek pg_result_status pg_select pg_send_query pg_set_client_encoding pg_trace pg_tty pg_unescape_bytea pg_untrace pg_update pg_clientencoding pg_cmdtuples pg_connect_poll pg_consume_input pg_errormessage pg_escape_ide
                            syn keyword phpFunctions posix_ctermid posix_get_last_error posix_getcwd posix_getegid posix_geteuid posix_getgid posix_getgrgid posix_getgrnam posix_getgroups posix_getlogin posix_getpgid posix_getpgrp posix_getpid posix_getppid posix_getpwnam posix_getpwuid posix_getrlimit posix_getsid posix_getuid posix_isatty posix_kill posix_mkfifo posix_setegid posix_seteuid posix_setgid posix_setpgid posix_setsid posix_setuid posix_strerror posix_times posix_ttyname posix_uname posix_access posix_errno posix_initgroups posix_mknod posix_setrlimit contained
                            syn keyword phpFunctions printer_abort printer_close printer_create_brush printer_create_dc printer_create_font printer_create_pen printer_delete_brush printer_delete_dc printer_delete_font printer_delete_pen printer_draw_bmp printer_draw_chord printer_draw_elipse printer_draw_line printer_draw_pie printer_draw_rectangle printer_draw_roundrect printer_draw_text printer_end_doc printer_end_page printer_get_option printer_list printer_logical_fontheight printer_open printer_select_brush printer_select_font printer_select_pen printer_set_option printer_start_doc printer_start_page printer_write contained
                            syn keyword phpFunctions pspell_add_to_personal pspell_add_to_session pspell_check pspell_clear_session pspell_config_create pspell_config_ignore pspell_config_mode pspell_config_personal pspell_config_repl pspell_config_runtogether pspell_config_save_repl pspell_new_config pspell_new_personal pspell_new pspell_save_wordlist pspell_store_replacement pspell_suggest pspell_config_data_dir pspell_config_dict_dir contained
                            syn keyword phpFunctions qdom_error qdom_tree contained
                            syn keyword phpFunctions readline_add_history readline_clear_history readline_completion_function readline_info readline_list_history readline_read_history readline_write_history readline readline_callback_handler_install readline_callback_handler_remove readline_callback_read_char readline_on_new_line readline_redisplay contained
                            syn keyword phpFunctions recode_file recode_string recode contained
                            syn keyword phpFunctions ereg_replace ereg eregi_replace eregi split spliti sql_regcase contained
                            syn keyword phpFunctions ftok msg_get_queue msg_queue_exists msg_receive msg_remove_queue msg_send msg_set_queue msg_stat_queue sem_acquire sem_get sem_release sem_remove shm_attach shm_detach shm_get_var shm_has_var shm_put_var shm_remove_var shm_remove contained
                            syn keyword phpFunctions sesam_affected_rows sesam_commit sesam_connect sesam_diagnostic sesam_disconnect sesam_errormsg sesam_execimm sesam_fetch_array sesam_fetch_result sesam_fetch_row sesam_field_array sesam_field_name sesam_free_result sesam_num_fields sesam_query sesam_rollback sesam_seek_row sesam_settransaction contained
                            syn keyword phpFunctions session_cache_expire session_cache_limiter session_decode session_destroy session_encode session_get_cookie_params session_id session_is_registered session_module_name session_name session_regenerate_id session_register session_save_path session_set_cookie_params session_set_save_handler session_start session_unregister session_unset session_write_close session_abort session_commit session_create_id session_gc session_register_shutdown session_reset session_status contained
                            syn keyword phpFunctions simplexml_import_dom simplexml_load_file simplexml_load_string contained
                            syn keyword phpFunctions shmop_close shmop_delete shmop_open shmop_read shmop_size shmop_write contained
                            syn keyword phpFunctions snmp_get_quick_print snmp_set_quick_print snmpget snmprealwalk snmpset snmpwalk snmpwalkoid contained
                            syn keyword phpFunctions is_soap_fault use_soap_error_handler contained
                            syn keyword phpFunctions socket_accept socket_bind socket_clear_error socket_close socket_connect socket_create_listen socket_create_pair socket_create socket_get_option socket_getpeername socket_getsockname socket_iovec_add socket_iovec_alloc socket_iovec_delete socket_iovec_fetch socket_iovec_free socket_iovec_set socket_last_error socket_listen socket_read socket_readv socket_recv socket_recvfrom socket_recvmsg socket_select socket_send socket_sendmsg socket_sendto socket_set_block socket_set_nonblock socket_set_option socket_shutdown socket_strerror socket_write socket_writev socket_addrinfo_bind socket_addrinfo_connect socket_addrinfo_explain socket_addrinfo_lookup socket_cmsg_space socket_export_stream socket_getopt socket_import_stream socket_setopt contained
                            syn keyword phpFunctions class_implements class_parents class_uses iterator_apply iterator_count iterator_to_array spl_autoload spl_autoload_call spl_autoload_extensions spl_autoload_functions spl_autoload_register spl_autoload_unregister spl_classes spl_object_hash spl_object_id contained
                            syn keyword phpFunctions sqlite_array_query sqlite_busy_timeout sqlite_changes sqlite_close sqlite_column sqlite_create_aggregate sqlite_create_function sqlite_current sqlite_error_string sqlite_escape_string sqlite_fetch_array sqlite_fetch_single sqlite_fetch_string sqlite_field_name sqlite_has_more sqlite_last_error sqlite_last_insert_rowid sqlite_libencoding sqlite_libversion sqlite_next sqlite_num_fields sqlite_num_rows sqlite_open sqlite_popen sqlite_query sqlite_rewind sqlite_seek sqlite_udf_decode_binary sqlite_udf_encode_binary sqlite_unbuffered_query contained
                            syn keyword phpFunctions stream_context_create stream_context_get_options stream_context_set_option stream_context_set_params stream_copy_to_stream stream_filter_append stream_filter_prepend stream_filter_register stream_get_contents stream_get_filters stream_get_line stream_get_meta_data stream_get_transports stream_get_wrappers stream_register_wrapper stream_select stream_set_blocking stream_set_timeout stream_set_write_buffer stream_socket_accept stream_socket_client stream_socket_get_name stream_socket_recvfrom stream_socket_sendto stream_socket_server stream_wrapper_register contained
                            syn keyword phpFunctions addcslashes addslashes bin2hex chop chr chunk_split convert_cyr_string count_chars crc32 crypt explode fprintf get_html_translation_table hebrev hebrevc html_entity_decode htmlentities htmlspecialchars implode join levenshtein localeconv ltrim md5_file md5 metaphone money_format nl_langinfo nl2br number_format ord parse_str print printf quoted_printable_decode quotemeta rtrim setlocale sha1_file sha1 similar_text soundex sprintf sscanf str_ireplace str_pad str_repeat str_replace str_rot13 str_shuffle str_split str_word_count strcasecmp strchr strcmp strcoll strcspn strip_tags stripcslashes stripos stripslashes stristr strlen strnatcasecmp strnatcmp strncasecmp strncmp strpos strrchr strrev strripos strrpos strspn strstr strtok strtolower strtoupper strtr substr_compare substr_count substr_replace substr trim ucfirst ucwords vprintf vsprintf wordwrap contained
                            syn keyword phpFunctions fdiv get_debug_type getdir str_contains str_ends_with str_starts_with
                            syn keyword phpFunctions swf_actiongeturl swf_actiongotoframe swf_actiongotolabel swf_actionnextframe swf_actionplay swf_actionprevframe swf_actionsettarget swf_actionstop swf_actiontogglequality swf_actionwaitforframe swf_addbuttonrecord swf_addcolor swf_closefile swf_definebitmap swf_definefont swf_defineline swf_definepoly swf_definerect swf_definetext swf_endbutton swf_enddoaction swf_endshape swf_endsymbol swf_fontsize swf_fontslant swf_fonttracking swf_getbitmapinfo swf_getfontinfo swf_getframe swf_labelframe swf_lookat swf_modifyobject swf_mulcolor swf_nextid swf_oncondition swf_openfile swf_ortho2 swf_ortho swf_perspective swf_placeobject swf_polarview swf_popmatrix swf_posround swf_pushmatrix swf_removeobject swf_rotate swf_scale swf_setfont swf_setframe swf_shapearc swf_shapecurveto3 swf_shapecurveto swf_shapefillbitmapclip swf_shapefillbitmaptile swf_shapefilloff swf_shapefillsolid swf_shapelinesolid swf_shapelineto swf_shapemoveto swf_showframe swf_startbutton swf_startdoaction swf_startshape swf
                            syn keyword phpFunctions sybase_affected_rows sybase_close sybase_connect sybase_data_seek sybase_deadlock_retry_count sybase_fetch_array sybase_fetch_assoc sybase_fetch_field sybase_fetch_object sybase_fetch_row sybase_field_seek sybase_free_result sybase_get_last_message sybase_min_client_severity sybase_min_error_severity sybase_min_message_severity sybase_min_server_severity sybase_num_fields sybase_num_rows sybase_pconnect sybase_query sybase_result sybase_select_db sybase_set_message_handler sybase_unbuffered_query contained
                            syn keyword phpFunctions tidy_access_count tidy_clean_repair tidy_config_count tidy_diagnose tidy_error_count tidy_get_body tidy_get_config tidy_get_error_buffer tidy_get_head tidy_get_html_ver tidy_get_html tidy_get_output tidy_get_release tidy_get_root tidy_get_status tidy_getopt tidy_is_xhtml tidy_load_config tidy_parse_file tidy_parse_string tidy_repair_file tidy_repair_string tidy_reset_config tidy_save_config tidy_set_encoding tidy_setopt tidy_warning_count tidy_is_xml tidy_get_opt_doc contained
                            syn keyword phpMethods attributes children get_attr get_nodes has_children has_siblings is_asp is_comment is_html is_jsp is_jste is_text is_xhtml is_xml next prev tidy_node contained
                            syn keyword phpFunctions token_get_all token_name contained
                            syn keyword phpFunctions base64_decode base64_encode get_meta_tags http_build_query parse_url rawurldecode rawurlencode urldecode urlencode contained
                            syn keyword phpFunctions doubleval empty floatval get_defined_vars get_resource_id get_resource_type gettype import_request_variables intval is_array is_bool is_callable is_double is_float is_int is_integer is_long is_null is_numeric is_object is_real is_resource is_scalar is_string isset print_r serialize settype strval unserialize unset var_dump var_export contained
                            syn keyword phpFunctions get_called_class property_exists interface_exists trait_exists class_alias get_mangled_object_vars set_exception_handler restore_exception_handler get_declared_traits get_declared_interfaces get_resources gc_mem_caches gc_collect_cycles gc_enabled gc_enable gc_disable gc_status contained
                            syn keyword phpFunctions vpopmail_add_alias_domain_ex vpopmail_add_alias_domain vpopmail_add_domain_ex vpopmail_add_domain vpopmail_add_user vpopmail_alias_add vpopmail_alias_del_domain vpopmail_alias_del vpopmail_alias_get_all vpopmail_alias_get vpopmail_auth_user vpopmail_del_domain_ex vpopmail_del_domain vpopmail_del_user vpopmail_error vpopmail_passwd vpopmail_set_user_quota contained
                            syn keyword phpFunctions w32api_deftype w32api_init_dtype w32api_invoke_function w32api_register_function w32api_set_call_method contained
                            syn keyword phpFunctions wddx_add_vars wddx_deserialize wddx_packet_end wddx_packet_start wddx_serialize_value wddx_serialize_vars contained
                            syn keyword phpFunctions utf8_decode utf8_encode xml_error_string xml_get_current_byte_index xml_get_current_column_number xml_get_current_line_number xml_get_error_code xml_parse_into_struct xml_parse xml_parser_create_ns xml_parser_create xml_parser_free xml_parser_get_option xml_parser_set_option xml_set_character_data_handler xml_set_default_handler xml_set_element_handler xml_set_end_namespace_decl_handler xml_set_external_entity_ref_handler xml_set_notation_decl_handler xml_set_object xml_set_processing_instruction_handler xml_set_start_namespace_decl_handler xml_set_unparsed_entity_decl_handler contained
                            syn keyword phpFunctions xmlrpc_decode_request xmlrpc_decode xmlrpc_encode_request xmlrpc_encode xmlrpc_get_type xmlrpc_parse_method_descriptions xmlrpc_server_add_introspection_data xmlrpc_server_call_method xmlrpc_server_create xmlrpc_server_destroy xmlrpc_server_register_introspection_callback xmlrpc_server_register_method xmlrpc_set_type xmlrpc_is_fault contained
                            syn keyword phpFunctions xmlwriter_end_attribute xmlwriter_end_cdata xmlwriter_end_comment xmlwriter_end_document xmlwriter_end_dtd xmlwriter_end_dtd_attlist xmlwriter_end_dtd_element xmlwriter_end_dtd_entity xmlwriter_end_element xmlwriter_end_pi xmlwriter_flush xmlwriter_full_end_element xmlwriter_open_memory xmlwriter_open_uri xmlwriter_output_memory xmlwriter_set_indent xmlwriter_set_indent_string xmlwriter_start_attribute xmlwriter_start_attribute_ns xmlwriter_start_cdata xmlwriter_start_comment xmlwriter_start_document xmlwriter_start_dtd xmlwriter_start_dtd_attlist xmlwriter_start_dtd_element xmlwriter_start_dtd_entity xmlwriter_start_element xmlwriter_start_element_ns xmlwriter_start_pi xmlwriter_text xmlwriter_write_attribute xmlwriter_write_attribute_ns xmlwriter_write_cdata xmlwriter_write_comment xmlwriter_write_dtd xmlwriter_write_dtd_attlist xmlwriter_write_dtd_element xmlwriter_write_dtd_entity xmlwriter_write_element xmlwriter_write_element_ns xmlwriter_write_pi xmlwriter_write_raw contained
                            syn keyword phpFunctions xslt_create xslt_errno xslt_error xslt_free xslt_output_process xslt_set_base xslt_set_encoding xslt_set_error_handler xslt_set_log xslt_set_sax_handler xslt_set_sax_handlers xslt_set_scheme_handler xslt_set_scheme_handlers contained
                            syn keyword phpFunctions yaz_addinfo yaz_ccl_conf yaz_ccl_parse yaz_close yaz_connect yaz_database yaz_element yaz_errno yaz_error yaz_es_result yaz_get_option yaz_hits yaz_itemorder yaz_present yaz_range yaz_record yaz_scan_result yaz_scan yaz_schema yaz_search yaz_set_option yaz_sort yaz_syntax yaz_wait contained
                            syn keyword phpFunctions zip_close zip_entry_close zip_entry_compressedsize zip_entry_compressionmethod zip_entry_filesize zip_entry_name zip_entry_open zip_entry_read zip_open zip_read contained
                            syn keyword phpFunctions gzclose gzcompress gzdeflate gzencode gzeof gzfile gzgetc gzgets gzgetss gzinflate gzopen gzpassthru gzputs gzread gzrewind gzseek gztell gzuncompress gzwrite readgzfile zlib_get_coding_type gzdecode zlib_encode zlib_decode deflate_init deflate_add inflate_init inflate_add inflate_get_status inflate_get_read_len contained
                            
                            if exists( "php_baselib" )
                              syn keyword phpMethods query next_record num_rows affected_rows nf f p np num_fields haltmsg seek link_id query_id metadata table_names nextid connect halt free register unregister is_registered delete url purl self_url pself_url hidden_session add_query padd_query reimport_get_vars reimport_post_vars reimport_cookie_vars set_container set_tokenname release_token put_headers get_id get_id put_id freeze thaw gc reimport_any_vars start url purl login_if is_authenticated auth_preauth auth_loginform auth_validatelogin auth_refreshlogin auth_registerform auth_doregister start check have_perm permsum perm_invalid contained
                              syn keyword phpFunctions page_open page_close sess_load sess_save contained
                            endif
                            
                            " Conditional
                            syn keyword phpConditional declare else enddeclare endswitch elseif endif if switch match contained
                            
                            " Repeat
                            syn keyword phpRepeat as do endfor endforeach endwhile for foreach while contained
                            
                            " Label
                            syn keyword phpLabel case default switch contained
                            
                            " Statement
                            syn keyword phpStatement return break continue exit goto yield contained
                            
                            " Keyword
                            syn keyword phpKeyword var const contained
                            
                            " Type
                            syn keyword phpType void bool boolean int integer real double float string array object NULL callable iterable mixed contained
                            
                            " Structure
                            syn keyword phpStructure namespace extends implements instanceof parent self contained
                            
                            " Operator
                            syn match phpOperator "[-=+%^&|*!.~?:]" contained display
                            syn match phpOperator "[-+*/%^&|.]=" contained display
                            syn match phpOperator "/[^*/]"me=e-1 contained display
                            syn match phpOperator "\$" contained display
                            syn match phpOperator "&&\|\<and\>" contained display
                            syn match phpOperator "||\|\<x\=or\>" contained display
                            syn match phpRelation "[!=<>]=" contained display
                            syn match phpRelation "[<>]" contained display
                            syn match phpRelation "<=>" contained display
                            " PHP 8.0 adds the nullsafe operator ?-> for property access and method calls.
                            syn match phpMemberSelector "?\?->" contained display
                            syn match phpVarSelector "\$" contained display
                            
                            " Identifier
                            syn match phpIdentifier "$\h\w*" contained contains=phpEnvVar,phpIntVar,phpVarSelector display
                            syn match phpIdentifierSimply "${\h\w*}" contains=phpOperator,phpParent contained display
                            syn region phpIdentifierComplex matchgroup=phpParent start="{\$"rs=e-1 end="}" contains=phpIdentifier,phpMemberSelector,phpVarSelector,phpIdentifierComplexP contained extend
                            syn region phpIdentifierComplexP matchgroup=phpParent start="\[" end="]" contains=@phpClInside contained
                            
                            " Interpolated indentifiers (inside strings)
                              syn match phpBrackets "[][}{]" contained display
                              " errors
                                syn match phpInterpSimpleError "\[[^]]*\]" contained display " fallback (if nothing else matches)
                                syn match phpInterpSimpleError "?\?->[^a-zA-Z_]" contained display
                                " make sure these stay above the correct DollarCurlies so they don't take priority
                                syn match phpInterpBogusDollarCurley "${[^}]*}" contained display " fallback (if nothing else matches)
                              syn match phpInterpSimpleBracketsInner "\w\+" contained
                              syn match phpInterpSimpleBracketsInner "\$\h\w*" contained
                              syn match phpInterpSimpleBrackets "\[\$\?\h\w*]" contained contains=phpBrackets,phpInterpSimpleBracketsInner
                              " -0x1 and -123 refer to the string offsets '-0x1' and '-123' of array keys
                              " TODO: Support [1_2], [-0b1_10_1], etc (also literal strings).
                              syn match phpInterpSimpleBrackets "\[-\?\d\+]" contained contains=phpBrackets,phpInterpSimpleBracketsInner
                              syn match phpInterpSimpleBrackets "\[-\?0[xX]\x\+]" contained contains=phpBrackets,phpInterpSimpleBracketsInner
                              syn match phpInterpSimpleBrackets "\[-\?0[bB][01]\+]" contained contains=phpBrackets,phpInterpSimpleBracketsInner
                              syn match phpInterpSimple "\$\h\w*\(\[[^]]*\]\|?\?->\h\w*\)\?" contained contains=phpInterpSimpleBrackets,phpIdentifier,phpInterpSimpleError,phpMethods,phpMemberSelector display
                              syn match phpInterpVarname "\h\w*" contained
                              syn match phpInterpMethodName "\h\w*" contained " default color
                              syn match phpInterpSimpleCurly "\${\h\w*}" contains=phpInterpVarname contained extend
                              syn region phpInterpDollarCurley1Helper matchgroup=phpParent start="{" end="\[" contains=phpInterpVarname contained
                              syn region phpInterpDollarCurly1 matchgroup=phpParent start="\${\h\w*\["rs=s+1 end="]}" contains=phpInterpDollarCurley1Helper,@phpClConst contained extend
                            
                              syn match phpInterpDollarCurley2Helper "{\h\w*?\?->" contains=phpBrackets,phpInterpVarname,phpMemberSelector contained
                            
                              syn region phpInterpDollarCurly2 matchgroup=phpParent start="\${\h\w*?\?->"rs=s+1 end="}" contains=phpInterpDollarCurley2Helper,phpInterpMethodName contained
                            
                              syn match phpInterpBogusDollarCurley "${\h\w*?\?->}" contained display
                              syn match phpInterpBogusDollarCurley "${\h\w*\[]}" contained display
                            
                              syn region phpInterpComplex matchgroup=phpParent start="{\$"rs=e-1 end="}" contains=phpIdentifier,phpMemberSelector,phpVarSelector,phpIdentifierComplexP contained extend
                              syn region phpIdentifierComplexP matchgroup=phpParent start="\[" end="]" contains=@phpClInside contained
                              " define a cluster to get all interpolation syntaxes for double-quoted strings
                              syn cluster phpInterpDouble contains=phpInterpSimple,phpInterpSimpleCurly,phpInterpDollarCurly1,phpInterpDollarCurly2,phpInterpBogusDollarCurley,phpInterpComplex
                            
                            " Methods
                            syn match phpMethodsVar "?\?->\h\w*" contained contains=phpMethods,phpMemberSelector display
                            
                            " Include
                            syn keyword phpInclude include require include_once require_once use contained
                            
                            " Define
                            syn keyword phpDefine new clone contained
                            
                            " Boolean
                            syn keyword phpBoolean true false contained
                            
                            " Float
                            " Refer to: https://www.php.net/manual/en/language.types.float.php
                            syn match phpFloat "\%(\w\|\.\)\@<!\%(\d_\?\|\.\)*\d\%(\d\|_\|\.\)*\%([eE][+-]\=\%(\d\|_\|\.\)\+\)\=\%(\w\|\.\)\@!" contained contains=phpFloatError display
                            syn match phpFloatError "\%([eE.][0-9._+-]*\.\|__\|_\(\>\|[eE]\)\|\(\>\|[eE]\)_\)" contained display
                            
                            " Number
                            syn match phpNumber "\%(\.\)\@<!\<\%([1-9]\d*\|0\|0[xX]\(\x_\?\)*\x\)\>\%(\.\)\@!" contained display
                            syn match phpNumber "\%(\.\)\@<!\<0\d\+\>\%(\.\)\@!" contained contains=phpOctalError display
                            syn match phpBinaryError "[2-9]" contained display
                            syn match phpNumber "\%(\.\)\@<!\<0[bB]\(\d_\?\)*\d\>\%(\.\)\@!" contained contains=phpBinaryError display
                            
                            " Backslash escapes
                            syn case match
                            " for double quotes and heredoc
                            syn match phpBackslashSequences "\\[fnrtv\\\"$]" contained display
                            syn match phpBackslashSequences "\\\d\{1,3}" contained contains=phpOctalError display
                            syn match phpBackslashSequences "\\x\x\{1,2}" contained display
                            " additional sequence for double quotes only
                            syn match phpBackslashDoubleQuote "\\[\"]" contained display
                            " for single quotes only
                            syn match phpBackslashSingleQuote "\\[\\']" contained display
                            syn case ignore
                            
                            
                            " Error
                            syn match phpOctalError "[89]" contained display
                            if exists("php_parent_error_close")
                              syn match phpParentError "[)\]}]" contained display
                            endif
                            
                            " Todo
                            syn keyword phpTodo todo fixme xxx contained
                            
                            " Comment
                            if exists("php_parent_error_open")
                              syn region phpComment start="/\*" end="\*/" contained contains=phpTodo,@Spell
                            else
                              syn region phpComment start="/\*" end="\*/" contained contains=phpTodo,@Spell extend
                            endif
                            syn match phpComment "#.\{-}\(?>\|$\)\@=" contained contains=phpTodo,@Spell
                            syn match phpComment "//.\{-}\(?>\|$\)\@=" contained contains=phpTodo,@Spell
                            
                            " String
                            if exists("php_parent_error_open")
                              syn region phpStringDouble matchgroup=phpStringDouble start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=@phpAddStrings,phpBackslashSequences,phpBackslashDoubleQuote,@phpInterpDouble,@Spell contained keepend
                              syn region phpBacktick matchgroup=phpBacktick start=+`+ skip=+\\\\\|\\"+ end=+`+ contains=@phpAddStrings,phpIdentifier,phpBackslashSequences,phpIdentifierSimply,phpIdentifierComplex contained keepend
                              syn region phpStringSingle matchgroup=phpStringSingle start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=@phpAddStrings,phpBackslashSingleQuote,@Spell contained keepend
                            else
                              syn region phpStringDouble matchgroup=phpStringDouble start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=@phpAddStrings,phpBackslashSequences,phpBackslashDoubleQuote,@phpInterpDouble,@Spell contained extend keepend
                              syn region phpBacktick matchgroup=phpBacktick start=+`+ skip=+\\\\\|\\"+ end=+`+ contains=@phpAddStrings,phpIdentifier,phpBackslashSequences,phpIdentifierSimply,phpIdentifierComplex contained extend keepend
                              syn region phpStringSingle matchgroup=phpStringSingle start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=@phpAddStrings,phpBackslashSingleQuote,@Spell contained keepend extend
                            endif
                            
                            " HereDoc and NowDoc
                            syn case match
                            
                            " HereDoc
                            syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\(\"\=\)\z(\I\i*\)\2$" end="^\s*\z1\>" contained contains=phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpBackslashSequences,phpMethodsVar,@Spell keepend extend
                            " including HTML,JavaScript,SQL even if not enabled via options
                            syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\(\"\=\)\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)\2$" end="^\s*\z1\>" contained contains=@htmlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpBackslashSequences,phpMethodsVar,@Spell keepend extend
                            syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\(\"\=\)\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)\2$" end="^\s*\z1\>" contained contains=@sqlTop,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpBackslashSequences,phpMethodsVar,@Spell keepend extend
                            syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\(\"\=\)\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)\2$" end="^\s*\z1\>" contained contains=@htmlJavascript,phpIdentifierSimply,phpIdentifier,phpIdentifierComplex,phpBackslashSequences,phpMethodsVar,@Spell keepend extend
                            
                            " NowDoc
                            syn region phpNowDoc matchgroup=Delimiter start="\(<<<\)\@<='\z(\I\i*\)'$" end="^\s*\z1\>" contained contains=@Spell keepend extend
                            " including HTML,JavaScript,SQL even if not enabled via options
                            syn region phpNowDoc matchgroup=Delimiter start="\(<<<\)\@<='\z(\(\I\i*\)\=\(html\)\c\(\i*\)\)'$" end="^\s*\z1\>" contained contains=@htmlTop,@Spell keepend extend
                            syn region phpNowDoc matchgroup=Delimiter start="\(<<<\)\@<='\z(\(\I\i*\)\=\(sql\)\c\(\i*\)\)'$" end="^\s*\z1\>" contained contains=@sqlTop,@Spell keepend extend
                            syn region phpNowDoc matchgroup=Delimiter start="\(<<<\)\@<='\z(\(\I\i*\)\=\(javascript\)\c\(\i*\)\)'$" end="^\s*\z1\>" contained contains=@htmlJavascript,@Spell keepend extend
                            syn case ignore
                            
                            " Parent
                            if exists("php_parent_error_close") || exists("php_parent_error_open")
                              syn match phpParent "[{}]" contained
                              syn region phpParent matchgroup=Delimiter start="(" end=")" contained contains=@phpClInside transparent
                              syn region phpParent matchgroup=Delimiter start="#\?\[" end="\]" contained contains=@phpClInside transparent
                              if !exists("php_parent_error_close")
                                syn match phpParent "[\])]" contained
                              endif
                            else
                              syn match phpParent "[({[\]})]" contained
                              syn match phpParent "#\[" contained
                            endif
                            
                            syn cluster phpClConst contains=phpFunctions,phpIdentifier,phpConditional,phpRepeat,phpStatement,phpOperator,phpRelation,phpStringSingle,phpStringDouble,phpBacktick,phpNumber,phpFloat,phpKeyword,phpType,phpBoolean,phpStructure,phpMethodsVar,phpConstant,phpCoreConstant,phpException
                            syn cluster phpClInside contains=@phpClConst,phpComment,phpLabel,phpParent,phpParentError,phpInclude,phpHereDoc,phpNowDoc
                            syn cluster phpClFunction contains=@phpClInside,phpDefine,phpParentError,phpStorageClass
                            syn cluster phpClTop contains=@phpClFunction,phpFoldFunction,phpFoldClass,phpFoldInterface,phpFoldTry,phpFoldCatch
                            
                            " Php Region
                            if exists("php_parent_error_open")
                              if exists("php_noShortTags")
                                syn region phpRegion matchgroup=Delimiter start="<?php" end="?>" contains=@phpClTop
                              else
                                syn region phpRegion matchgroup=Delimiter start="<?\(php\)\=" end="?>" contains=@phpClTop
                              endif
                              syn region phpRegionSc matchgroup=Delimiter start=+<script language="php">+ end=+</script>+ contains=@phpClTop
                              if exists("php_asp_tags")
                                syn region phpRegionAsp matchgroup=Delimiter start="<%\(=\)\=" end="%>" contains=@phpClTop
                              endif
                            else
                              if exists("php_noShortTags")
                                syn region phpRegion matchgroup=Delimiter start="<?php" end="?>" contains=@phpClTop keepend
                              else
                                syn region phpRegion matchgroup=Delimiter start="<?\(php\)\=" end="?>" contains=@phpClTop keepend
                              endif
                              syn region phpRegionSc matchgroup=Delimiter start=+<script language="php">+ end=+</script>+ contains=@phpClTop keepend
                              if exists("php_asp_tags")
                                syn region phpRegionAsp matchgroup=Delimiter start="<%\(=\)\=" end="%>" contains=@phpClTop keepend
                              endif
                            endif
                            
                            " Fold
                            if exists("php_folding") && php_folding==1
                            " match one line constructs here and skip them at folding
                              syn keyword phpSCKeyword abstract final private protected public static contained
                              syn keyword phpFCKeyword function contained
                              syn keyword phpDefine fn contained
                              syn keyword phpStorageClass global contained
                              syn match phpDefine "\(\s\|^\)\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\(\s\+.*[;}]\)\@=" contained contains=phpSCKeyword
                              syn match phpStructure "\(\s\|^\)\(abstract\s\+\|final\s\+\)*\(trait\|class\)\(\s\+.*}\)\@=" contained
                              syn match phpStructure "\(\s\|^\)interface\(\s\+.*}\)\@=" contained
                              syn match phpException "\(\s\|^\)try\(\s\+.*}\)\@=" contained
                              syn match phpException "\(\s\|^\)catch\(\s\+.*}\)\@=" contained
                              syn match phpException "\(\s\|^\)finally\(\s\+.*}\)\@=" contained
                            
                              setlocal foldmethod=syntax
                              syn region phpFoldHtmlInside matchgroup=Delimiter start="?>" end="<?\(php\)\=" contained transparent contains=@htmlTop
                              syn region phpFoldFunction matchgroup=Storageclass start="^\z(\s*\)\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\s\([^};]*$\)\@="rs=e-9 matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldHtmlInside,phpFCKeyword contained transparent fold extend
                              syn region phpFoldFunction matchgroup=Define start="^function\s\([^};]*$\)\@=" matchgroup=Delimiter end="^}" contains=@phpClFunction,phpFoldHtmlInside contained transparent fold extend
                              syn region phpFoldClass matchgroup=Structure start="^\z(\s*\)\(abstract\s\+\|final\s\+\)*\(trait\|class\)\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction,phpSCKeyword contained transparent fold extend
                              syn region phpFoldInterface matchgroup=Structure start="^\z(\s*\)interface\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction contained transparent fold extend
                              syn region phpFoldCatch matchgroup=Exception start="^\z(\s*\)catch\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction contained transparent fold extend
                              syn region phpFoldTry matchgroup=Exception start="^\z(\s*\)try\s\+\([^}]*$\)\@=" matchgroup=Delimiter end="^\z1}" contains=@phpClFunction,phpFoldFunction contained transparent fold extend
                            else
                              syn keyword phpDefine function fn contained
                              syn keyword phpStructure abstract class trait interface contained
                              syn keyword phpException catch throw try finally contained
                              syn keyword phpStorageClass final global private protected public static contained
                              if exists("php_folding") && php_folding==2
                                setlocal foldmethod=syntax
                                syn region phpFoldHtmlInside matchgroup=Delimiter start="?>" end="<?\(php\)\=" contained transparent contains=@htmlTop
                                syn region phpParent matchgroup=Delimiter start="{" end="}" contained contains=@phpClFunction,phpFoldHtmlInside transparent fold
                              endif
                            endif
                            
                            " ================================================================
                            " Peter Hodge - June 9, 2006
                            " Some of these changes (highlighting isset/unset/echo etc) are not so
                            " critical, but they make things more colourful. :-)
                            
                            " different syntax highlighting for 'echo', 'print', 'switch', 'die' and 'list' keywords
                            " to better indicate what they are.
                            syntax keyword phpDefine echo print contained
                            syntax keyword phpStructure list contained
                            syntax keyword phpConditional switch contained
                            syntax keyword phpStatement die contained
                            
                            " Highlighting for PHP5's user-definable magic class methods
                            syntax keyword phpSpecialFunction containedin=ALLBUT,phpComment,phpStringDouble,phpStringSingle,phpIdentifier
                              \ __construct __destruct __call __callStatic __get __set __isset __unset __sleep __wakeup __toString __invoke __set_state __clone __debugInfo
                            " Highlighting for __autoload slightly different from line above
                            syntax keyword phpSpecialFunction containedin=ALLBUT,phpComment,phpStringDouble,phpStringSingle,phpIdentifier,phpMethodsVar
                              \ __autoload
                            hi def link phpSpecialFunction phpOperator
                            
                            " Highlighting for PHP5's built-in classes
                            " Note: Some of the names have inconsistent cases. 
                            " Those are probably the actual name in reflection and should not be changed in
                            " this file.
                            " (CURLFile and CurlShareHandle, XMLReader and XmlParser, etc)
                            syntax keyword phpClasses containedin=ALLBUT,phpComment,phpStringDouble,phpStringSingle,phpIdentifier,phpMethodsVar
                              \ stdClass __PHP_Incomplete_Class php_user_filter AssertionError Directory ArrayObject
                              \ Exception ErrorException LogicException BadFunctionCallException BadMethodCallException DomainException
                              \ ArgumentCountError ArithmeticError ClosedGeneratorException Closure CompileError DivisionByZeroError Generator ParseError TypeError WeakReference
                              \ RecursiveIteratorIterator IteratorIterator FilterIterator RecursiveFilterIterator ParentIterator LimitIterator
                              \ CachingIterator RecursiveCachingIterator NoRewindIterator AppendIterator InfiniteIterator EmptyIterator
                              \ ArrayIterator RecursiveArrayIterator DirectoryIterator RecursiveDirectoryIterator
                              \ CallbackFilterIterator FilesystemIterator GlobIterator MultipleIterator RecursiveCallbackFilterIterator 
                              \ RecursiveRegexIterator RecursiveTreeIterator RegexIterator SplDoublyLinkedList 
                              \ SplFixedArray SplHeap SplMaxHeap SplMinHeap SplPriorityQueue SplQueue SplStack
                              \ InvalidArgumentException LengthException OutOfRangeException RuntimeException OutOfBoundsException
                              \ Attribute InternalIterator Stringable UnhandledMatchError ValueError WeakMap
                              \ OverflowException RangeException UnderflowException UnexpectedValueException
                              \ PDO PDOException PDOStatement PDORow
                              \ Reflection ReflectionFunction ReflectionParameter ReflectionMethod ReflectionClass
                              \ ReflectionObject ReflectionProperty ReflectionExtension ReflectionException
                              \ ReflectionClassConstant ReflectionFunctionAbstract ReflectionGenerator ReflectionNamedType 
                              \ ReflectionReference ReflectionType ReflectionZendExtension
                              \ ReflectionAttribute ReflectionUnionType
                              \ SplFileInfo SplFileObject SplTempFileObject SplObjectStorage
                              \ XMLWriter LibXMLError XMLReader SimpleXMLElement SimpleXMLIterator
                              \ XmlParser
                              \ DeflateContext InflateContext
                              \ DOMException DOMStringList DOMNameList DOMDomError DOMErrorHandler
                              \ DOMImplementation DOMImplementationList DOMImplementationSource
                              \ DOMNode DOMNameSpaceNode DOMDocumentFragment DOMDocument DOMNodeList DOMNamedNodeMap
                              \ DOMCharacterData DOMAttr DOMElement DOMText DOMComment DOMTypeinfo DOMUserDataHandler
                              \ DOMLocator DOMConfiguration DOMCdataSection DOMDocumentType DOMNotation DOMEntity
                              \ DOMEntityReference DOMProcessingInstruction DOMStringExtend DOMXPath
                              \ DOMChildNode DOMParentNode
                              \ EnchantBroker EnchantDictionary 
                              \ GdImage
                              \ OpenSSLAsymmetricKey OpenSSLCertificate OpenSSLCertificateSigningRequest
                              \ Shmop
                              \ AddressInfo Socket
                              \ SysvMessageQueue SysvSemaphore SysvSharedMemory
                              \ PhpToken
                              \ APCIterator APCuIterator
                              \ CURLFile CurlHandle CurlMultiHandle CurlShareHandle
                              \ DateInterval DatePeriod DateTime DateTimeImmutable DateTimeZone
                              \ finfo
                              \ GMP
                              \ Collator IntlBreakIterator IntlCalendar IntlChar IntlCodePointBreakIterator IntlDateFormatter IntlException IntlGregorianCalendar IntlIterator IntlPartsIterator IntlRuleBasedBreakIterator IntlTimeZone Locale MessageFormatter Normalizer NumberFormatter ResourceBundle Spoofchecker Transliterator UConverter
                              \ FFI CData CType ParserException
                              \ HashContext
                              \ JsonException
                              \ Memcached MemcachedException
                              \ mysqli mysqli_driver mysqli_result mysqli_sql_exception mysqli_stmt mysqli_warning
                              \ SessionHandler
                              \ SoapClient SoapFault SoapHeader SoapParam SoapServer SoapVar
                              \ SQLite3 SQLite3Result SQLite3Stmt
                              \ tidy tidyNode
                              \ XSLTProcessor ZipArchive
                              \ Phar PharData PharException PharFileInfo
                            
                            hi def link phpClasses phpFunctions
                            
                            " Highlighting for PHP's built-in interfaces
                            syntax keyword phpInterfaces containedin=ALLBUT,phpComment,phpStringDouble,phpStringSingle,phpIdentifier,phpMethodsVar
                              \ Iterator IteratorAggregate RecursiveIterator OuterIterator SeekableIterator
                              \ Traversable ArrayAccess Serializable Countable SplObserver SplSubject Reflector
                              \ Throwable DateTimeInterface JsonSerializable SessionHandlerInterface SessionIdInterface SessionUpdateTimestampHandlerInterface
                            
                            hi def link phpInterfaces phpConstant
                            
                            " option defaults:
                            if ! exists('php_special_functions')
                              let php_special_functions = 1
                            endif
                            if ! exists('php_alt_comparisons')
                              let php_alt_comparisons = 1
                            endif
                            if ! exists('php_alt_assignByReference')
                              let php_alt_assignByReference = 1
                            endif
                            
                            if php_special_functions
                              " Highlighting for PHP built-in functions which exhibit special behaviours
                              " - isset()/unset()/empty() are not real functions.
                              " - compact()/extract() directly manipulate variables in the local scope where
                              "   regular functions would not be able to.
                              " - eval() is the token 'make_your_code_twice_as_complex()' function for PHP.
                              " - user_error()/trigger_error() can be overloaded by set_error_handler and also
                              "   have the capacity to terminate your script when type is E_USER_ERROR.
                              " - match(){} is not a function
                              syntax keyword phpSpecialFunction containedin=ALLBUT,phpComment,phpStringDouble,phpStringSingle
                              \ user_error trigger_error isset unset eval extract compact empty
                            endif
                            
                            if php_alt_assignByReference
                              " special highlighting for '=&' operator
                              syntax match phpAssignByRef /=\s*&/ containedin=ALLBUT,phpComment,phpStringDouble,phpStringSingle
                                hi def link phpAssignByRef Type
                            endif
                            
                            if php_alt_comparisons
                              " highlight comparison operators differently
                              syntax match phpComparison "\v[=!]\=\=?" contained containedin=phpRegion
                              syntax match phpComparison "\v[=<>-]@<![<>]\=?[<>]@!" contained containedin=phpRegion
                              syntax match phpComparison "<=>" contained containedin=phpRegion
                            
                              " highlight the 'instanceof' operator as a comparison operator rather than a structure
                              syntax case ignore
                              syntax keyword phpComparison instanceof contained containedin=phpRegion
                            
                              hi def link phpComparison Statement
                            endif
                            
                            " ================================================================
                            
                            " Sync
                            if php_sync_method==-1
                              if exists("php_noShortTags")
                                syn sync match phpRegionSync grouphere phpRegion "^\s*<?php\s*$"
                              else
                                syn sync match phpRegionSync grouphere phpRegion "^\s*<?\(php\)\=\s*$"
                              endif
                              syn sync match phpRegionSync grouphere phpRegionSc +^\s*<script language="php">\s*$+
                              if exists("php_asp_tags")
                                syn sync match phpRegionSync grouphere phpRegionAsp "^\s*<%\(=\)\=\s*$"
                              endif
                              syn sync match phpRegionSync grouphere NONE "^\s*?>\s*$"
                              syn sync match phpRegionSync grouphere NONE "^\s*%>\s*$"
                              syn sync match phpRegionSync grouphere phpRegion "function\s.*(.*\$"
                              "syn sync match phpRegionSync grouphere NONE "/\i*>\s*$"
                            elseif php_sync_method>0
                              exec "syn sync minlines=" . php_sync_method
                            else
                              exec "syn sync fromstart"
                            endif
                            
                            syntax match phpDocCustomTags "@[a-zA-Z]*\(\s\+\|\n\|\r\)" containedin=phpComment
                            syntax region phpDocTags start="{@\(example\|id\|internal\|inheritdoc\|link\|source\|toc\|tutorial\)" end="}" containedin=phpComment
                            syntax match phpDocTags "@\(abstract\|access\|author\|category\|copyright\|deprecated\|example\|final\|global\|ignore\|internal\|license\|link\|method\|name\|package\|param\|property\|return\|see\|since\|static\|staticvar\|subpackage\|tutorial\|uses\|var\|version\|contributor\|modified\|filename\|description\|filesource\|throws\)\(\s\+\)\?" containedin=phpComment
                            syntax match phpDocTodo "@\(todo\|fixme\|xxx\)\(\s\+\)\?" containedin=phpComment
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
                            hi def link phpConstant Constant
                            hi def link phpCoreConstant Constant
                            hi def link phpComment Comment
                            hi def link phpDocTags PreProc
                            hi def link phpDocCustomTags Type
                            hi def link phpException Exception
                            hi def link phpBoolean Boolean
                            hi def link phpStorageClass StorageClass
                            hi def link phpSCKeyword StorageClass
                            hi def link phpFCKeyword Define
                            hi def link phpStructure Structure
                            hi def link phpStringSingle String
                            hi def link phpStringDouble String
                            hi def link phpBacktick String
                            hi def link phpNumber Number
                            hi def link phpFloat Float
                            hi def link phpMethods Function
                            hi def link phpFunctions Function
                            hi def link phpBaselib Function
                            hi def link phpRepeat Repeat
                            hi def link phpConditional Conditional
                            hi def link phpLabel Label
                            hi def link phpStatement Statement
                            hi def link phpKeyword Statement
                            hi def link phpType Type
                            hi def link phpInclude Include
                            hi def link phpDefine Define
                            hi def link phpBackslashSequences SpecialChar
                            hi def link phpBackslashDoubleQuote SpecialChar
                            hi def link phpBackslashSingleQuote SpecialChar
                            hi def link phpParent Delimiter
                            hi def link phpBrackets Delimiter
                            hi def link phpIdentifierConst Delimiter
                            hi def link phpParentError Error
                            hi def link phpOctalError Error
                            hi def link phpBinaryError Error
                            hi def link phpFloatError Error
                            hi def link phpInterpSimpleError Error
                            hi def link phpInterpBogusDollarCurley Error
                            hi def link phpInterpDollarCurly1 Error
                            hi def link phpInterpDollarCurly2 Error
                            hi def link phpInterpSimpleBracketsInner String
                            hi def link phpInterpSimpleCurly Delimiter
                            hi def link phpInterpVarname Identifier
                            hi def link phpTodo Todo
                            hi def link phpDocTodo Todo
                            hi def link phpMemberSelector Structure
                            if exists("php_oldStyle")
                              hi def phpIntVar guifg=Red ctermfg=DarkRed
                              hi def phpEnvVar guifg=Red ctermfg=DarkRed
                              hi def phpOperator guifg=SeaGreen ctermfg=DarkGreen
                              hi def phpVarSelector guifg=SeaGreen ctermfg=DarkGreen
                              hi def phpRelation guifg=SeaGreen ctermfg=DarkGreen
                              hi def phpIdentifier guifg=DarkGray ctermfg=Brown
                              hi def phpIdentifierSimply guifg=DarkGray ctermfg=Brown
                            else
                              hi def link phpIntVar Identifier
                              hi def link phpEnvVar Identifier
                              hi def link phpOperator Operator
                              hi def link phpVarSelector Operator
                              hi def link phpRelation Operator
                              hi def link phpIdentifier Identifier
                              hi def link phpIdentifierSimply Identifier
                            endif
                            
                            
                            let b:current_syntax = "php"
                            
                            if main_syntax == 'php'
                              unlet main_syntax
                            endif
                            
                            " put cpoptions back the way we found it
                            let &cpo = s:cpo_save
                            unlet s:cpo_save
                            
                            " vim: ts=8 sts=2 sw=2 expandtab

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\after\syntax\php\graphql.vim
Sourced 3 times
Total time:   0.009040
 Self time:   0.005913

count  total (s)   self (s)
    3   0.000433   0.000300 if polyglot#init#is_disabled(expand('<sfile>:p'), 'graphql', 'after/syntax/php/graphql.vim')
                              finish
    3              0.000004 endif
                            
                            " Copyright (c) 2016-2021 Jon Parise <jon@indelible.org>
                            "
                            " Permission is hereby granted, free of charge, to any person obtaining a copy
                            " of this software and associated documentation files (the "Software"), to
                            " deal in the Software without restriction, including without limitation the
                            " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
                            " sell copies of the Software, and to permit persons to whom the Software is
                            " furnished to do so, subject to the following conditions:
                            "
                            " The above copyright notice and this permission notice shall be included in
                            " all copies or substantial portions of the Software.
                            "
                            " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
                            " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
                            " IN THE SOFTWARE.
                            "
                            " Language: GraphQL
                            " Maintainer: Jon Parise <jon@indelible.org>
                            
    3              0.000017 if exists('b:current_syntax')
    3              0.000018   let s:current_syntax = b:current_syntax
    3              0.000010   unlet b:current_syntax
    3              0.000004 endif
                            
    3              0.000013 let b:graphql_nested_syntax = 1
    3   0.007909   0.004915 syn include @GraphQLSyntax syntax/graphql.vim
    3              0.000021 unlet b:graphql_nested_syntax
                            
    3              0.000026 if exists('s:current_syntax')
    3              0.000015   let b:current_syntax = s:current_syntax
    3              0.000004 endif
                            
    3              0.000189 syn region phpHereDoc matchgroup=Delimiter start="\(<<<\)\@<=\(\"\=\)\z(\(\I\i*\)\=\(gql\)\c\(\i*\)\)\2$" end="^\s*\z1\>" contained contains=@GraphQLSyntax,phpIdentifier,phpIdentifierSimply,phpIdentifierComplex,phpBackslashSequences,phpMethodsVar,@Spell keepend extend
    3              0.000150 syntax region phpNowDoc matchgroup=Delimiter start="\(<<<\)\@<='\z(\(\I\i*\)\=\(gql\)\c\(\i*\)\)'$" end="^\s*\z1\>" contained contains=@GraphQLSyntax,@Spell keepend extend

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\syntax\graphql.vim
Sourced 3 times
Total time:   0.002809
 Self time:   0.002683

count  total (s)   self (s)
    3   0.000426   0.000300 if polyglot#init#is_disabled(expand('<sfile>:p'), 'graphql', 'syntax/graphql.vim')
                              finish
    3              0.000004 endif
                            
                            " Copyright (c) 2016-2021 Jon Parise <jon@indelible.org>
                            "
                            " Permission is hereby granted, free of charge, to any person obtaining a copy
                            " of this software and associated documentation files (the "Software"), to
                            " deal in the Software without restriction, including without limitation the
                            " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
                            " sell copies of the Software, and to permit persons to whom the Software is
                            " furnished to do so, subject to the following conditions:
                            "
                            " The above copyright notice and this permission notice shall be included in
                            " all copies or substantial portions of the Software.
                            "
                            " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
                            " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
                            " IN THE SOFTWARE.
                            "
                            " Language: GraphQL
                            " Maintainer: Jon Parise <jon@indelible.org>
                            
    3              0.000015 if exists('b:current_syntax')
                              finish
    3              0.000003 endif
                            
    3              0.000011 syn case match
                            
    3              0.000051 syn match graphqlComment    "#.*$" contains=@Spell
                            
    3              0.000026 syn match graphqlOperator   "=" display
    3              0.000019 syn match graphqlOperator   "!" display
    3              0.000015 syn match graphqlOperator   "|" display
    3              0.000020 syn match graphqlOperator   "&" display
    3              0.000018 syn match graphqlOperator   "\M..." display
                            
    3              0.000018 syn keyword graphqlBoolean  true false
    3              0.000014 syn keyword graphqlNull     null
    3              0.000066 syn match   graphqlNumber   "-\=\<\%(0\|[1-9]\d*\)\%(\.\d\+\)\=\%([eE][-+]\=\d\+\)\=\>" display
    3              0.000052 syn region  graphqlString   start=+"+  skip=+\\\\\|\\"+  end=+"\|$+
    3              0.000592 syn region  graphqlString   start=+"""+ skip=+\\"""+ end=+"""+
                            
    3              0.000031 syn keyword graphqlKeyword on nextgroup=graphqlType,graphqlDirectiveLocation skipwhite
                            
    3              0.000028 syn keyword graphqlStructure enum scalar type union nextgroup=graphqlType skipwhite
    3              0.000024 syn keyword graphqlStructure input interface subscription nextgroup=graphqlType skipwhite
    3              0.000018 syn keyword graphqlStructure implements nextgroup=graphqlType skipwhite
    3              0.000023 syn keyword graphqlStructure query mutation fragment nextgroup=graphqlName skipwhite
    3              0.000018 syn keyword graphqlStructure directive nextgroup=graphqlDirective skipwhite
    3              0.000020 syn keyword graphqlStructure extend nextgroup=graphqlStructure skipwhite
    3              0.000015 syn keyword graphqlStructure schema nextgroup=graphqlFold skipwhite
                            
    3              0.000032 syn match graphqlDirective  "\<@\h\w*\>"   display
    3              0.000026 syn match graphqlVariable   "\<\$\h\w*\>"  display
    3              0.000022 syn match graphqlName       "\<\h\w*\>"    display
    3              0.000022 syn match graphqlType       "\<_*\u\w*\>"  display
                            
                            " https://graphql.github.io/graphql-spec/June2018/#ExecutableDirectiveLocation
    3              0.000019 syn keyword graphqlDirectiveLocation QUERY MUTATION SUBSCRIPTION FIELD
    3              0.000015 syn keyword graphqlDirectiveLocation FRAGMENT_DEFINITION FRAGMENT_SPREAD
    3              0.000013 syn keyword graphqlDirectiveLocation INLINE_FRAGMENT
                            " https://graphql.github.io/graphql-spec/June2018/#TypeSystemDirectiveLocation
    3              0.000018 syn keyword graphqlDirectiveLocation SCHEMA SCALAR OBJECT FIELD_DEFINITION
    3              0.000016 syn keyword graphqlDirectiveLocation ARGUMENT_DEFINITION INTERFACE UNION
    3              0.000015 syn keyword graphqlDirectiveLocation ENUM ENUM_VALUE INPUT_OBJECT
    3              0.000011 syn keyword graphqlDirectiveLocation INPUT_FIELD_DEFINITION
                            
    3              0.000013 syn keyword graphqlMetaFields __schema __type __typename
                            
    3              0.000045 syn region  graphqlFold matchgroup=graphqlBraces start="{" end="}" transparent fold contains=ALLBUT,graphqlStructure
    3              0.000042 syn region  graphqlList matchgroup=graphqlBraces start="\[" end="]" transparent contains=ALLBUT,graphqlDirective,graphqlStructure
                            
    3              0.000065 hi def link graphqlComment          Comment
    3              0.000038 hi def link graphqlOperator         Operator
                            
    3              0.000034 hi def link graphqlBraces           Delimiter
                            
    3              0.000032 hi def link graphqlBoolean          Boolean
    3              0.000030 hi def link graphqlNull             Keyword
    3              0.000034 hi def link graphqlNumber           Number
    3              0.000033 hi def link graphqlString           String
                            
    3              0.000039 hi def link graphqlDirective        PreProc
    3              0.000032 hi def link graphqlDirectiveLocation Special
    3              0.000032 hi def link graphqlName             Identifier
    3              0.000033 hi def link graphqlMetaFields       Special
    3              0.000029 hi def link graphqlKeyword          Keyword
    3              0.000034 hi def link graphqlStructure        Structure
    3              0.000033 hi def link graphqlType             Type
    3              0.000031 hi def link graphqlVariable         Identifier
                            
    3              0.000026 if !get(b:, 'graphql_nested_syntax')
                                syn sync minlines=500
    3              0.000004 endif
                            
    3              0.000062 let b:current_syntax = 'graphql'

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\syntax\json.vim
Sourced 2 times
Total time:   0.030651
 Self time:   0.029101

count  total (s)   self (s)
    2   0.000311   0.000217 if polyglot#init#is_disabled(expand('<sfile>:p'), 'json', 'syntax/json.vim')
                              finish
    2              0.000003 endif
                            
                            " Vim syntax file
                            " Language:	JSON
                            " Maintainer:	Eli Parra <eli@elzr.com> https://github.com/elzr/vim-json
                            " Last Change:	2014-12-20 Load ftplugin/json.vim
                            
                            " Reload the definition of g:vim_json_syntax_conceal
                            " see https://github.com/elzr/vim-json/issues/42
    2   0.028079   0.026623 runtime! ftplugin/json.vim
                            
    2              0.000026 if !exists("main_syntax")
    2              0.000007   if version < 600
                                syntax clear
    2              0.000011   elseif exists("b:current_syntax")
                                finish
    2              0.000003   endif
    2              0.000016   let main_syntax = 'json'
    2              0.000003 endif
                            
    2              0.000062 syntax match   jsonNoise           /\%(:\|,\)/
                            
                            " NOTE that for the concealing to work your conceallevel should be set to 2
                            
                            " Syntax: Strings
                            " Separated into a match and region because a region by itself is always greedy
    2              0.000090 syn match  jsonStringMatch /"\([^"]\|\\\"\)\+"\ze[[:blank:]\r\n]*[,}\]]/ contains=jsonString
    2              0.000030 if has('conceal') && g:vim_json_syntax_conceal == 1
                            	syn region  jsonString oneline matchgroup=jsonQuote start=/"/  skip=/\\\\\|\\"/  end=/"/ concealends contains=jsonEscape contained
    2              0.000006 else
    2              0.000052 	syn region  jsonString oneline matchgroup=jsonQuote start=/"/  skip=/\\\\\|\\"/  end=/"/ contains=jsonEscape contained
    2              0.000003 endif
                            
                            " Syntax: JSON does not allow strings with single quotes, unlike JavaScript.
    2              0.000033 syn region  jsonStringSQError oneline  start=+'+  skip=+\\\\\|\\"+  end=+'+
                            
                            " Syntax: JSON Keywords
                            " Separated into a match and region because a region by itself is always greedy
    2              0.000064 syn match  jsonKeywordMatch /"\([^"]\|\\\"\)\+"[[:blank:]\r\n]*\:/ contains=jsonKeyword
    2              0.000026 if has('conceal') && g:vim_json_syntax_conceal == 1
                               syn region  jsonKeyword matchgroup=jsonQuote start=/"/  end=/"\ze[[:blank:]\r\n]*\:/ concealends contains=jsonEscape contained
    2              0.000005 else
    2              0.000067    syn region  jsonKeyword matchgroup=jsonQuote start=/"/  end=/"\ze[[:blank:]\r\n]*\:/ contains=jsonEscape contained
    2              0.000003 endif
                            
                            " Syntax: Escape sequences
    2              0.000018 syn match   jsonEscape    "\\["\\/bfnrt]" contained
    2              0.000018 syn match   jsonEscape    "\\u\x\{4}" contained
                            
                            " Syntax: Numbers
    2              0.000049 syn match   jsonNumber    "-\=\<\%(0\|[1-9]\d*\)\%(\.\d\+\)\=\%([eE][-+]\=\d\+\)\=\>\ze[[:blank:]\r\n]*[,}\]]"
                            
                            " ERROR WARNINGS **********************************************
    2              0.000019 if (!exists("g:vim_json_warnings") || g:vim_json_warnings==1)
                            	" Syntax: Strings should always be enclosed with quotes.
    2              0.000029 	syn match   jsonNoQuotesError  "\<[[:alpha:]][[:alnum:]]*\>"
    2              0.000024 	syn match   jsonTripleQuotesError  /"""/
                            
                            	" Syntax: An integer part of 0 followed by other digits is not allowed.
    2              0.000024 	syn match   jsonNumError  "-\=\<0\d\.\d*\>"
                            
                            	" Syntax: Decimals smaller than one should begin with 0 (so .1 should be 0.1).
    2              0.000023 	syn match   jsonNumError  "\:\@<=[[:blank:]\r\n]*\zs\.\d\+"
                            
                            	" Syntax: No comments in JSON, see http://stackoverflow.com/questions/244777/can-i-comment-a-json-file
    2              0.000022 	syn match   jsonCommentError  "//.*"
    2              0.000020 	syn match   jsonCommentError  "\(/\*\)\|\(\*/\)"
                            
                            	" Syntax: No semicolons in JSON
    2              0.000020 	syn match   jsonSemicolonError  ";"
                            
                            	" Syntax: No trailing comma after the last element of arrays or objects
    2              0.000024 	syn match   jsonTrailingCommaError  ",\_s*[}\]]"
                            
                            	" Syntax: Watch out for missing commas between elements
    2              0.000034   syn match   jsonMissingCommaError /\("\|\]\|\d\)\zs\_s\+\ze"/
    2              0.000017   syn match   jsonMissingCommaError /\(\]\|\}\)\_s\+\ze"/ "arrays/objects as values
    2              0.000055   if (expand('%:e') !=? 'jsonl')
    2              0.000013     syn match   jsonMissingCommaError /}\_s\+\ze{/ "objects as elements in an array
    2              0.000004   endif
    2              0.000017   syn match   jsonMissingCommaError /\(true\|false\)\_s\+\ze"/ "true/false as value
    2              0.000003 endif
                            
                            " ********************************************** END OF ERROR WARNINGS
                            " Allowances for JSONP: function call at the beginning of the file,
                            " parenthesis and semicolon at the end.
                            " Function name validation based on
                            " http://stackoverflow.com/questions/2008279/validate-a-javascript-function-name/2008444#2008444
    2              0.000035 syn match  jsonPadding "\%^[[:blank:]\r\n]*[_$[:alpha:]][_$[:alnum:]]*[[:blank:]\r\n]*("
    2              0.000014 syn match  jsonPadding ");[[:blank:]\r\n]*\%$"
                            
                            " Syntax: Boolean
    2              0.000031 syn match  jsonBoolean /\(true\|false\)\(\_s\+\ze"\)\@!/
                            
                            " Syntax: Null
    2              0.000021 syn keyword  jsonNull      null
                            
                            " Syntax: Braces
    2              0.000060 syn region  jsonFold matchgroup=jsonBraces start="{" end=/}\(\_s\+\ze\("\|{\)\)\@!/ transparent fold
    2              0.000038 syn region  jsonFold matchgroup=jsonBraces start="\[" end=/]\(\_s\+\ze"\)\@!/ transparent fold
                            
                            " Define the default highlighting.
    2              0.000013 if version >= 508 || !exists("did_json_syn_inits")
    2              0.000032   hi def link jsonPadding		Operator
    2              0.000031   hi def link jsonString		String
    2              0.000028   hi def link jsonTest			Label
    2              0.000021   hi def link jsonEscape		Special
    2              0.000020   hi def link jsonNumber		Number
    2              0.000029   hi def link jsonBraces		Delimiter
    2              0.000018   hi def link jsonNull			Function
    2              0.000018   hi def link jsonBoolean		Boolean
    2              0.000025   hi def link jsonKeyword		Label
                            
    2              0.000016 	if (!exists("g:vim_json_warnings") || g:vim_json_warnings==1)
    2              0.000021 		hi def link jsonNumError					Error
    2              0.000020 		hi def link jsonCommentError				Error
    2              0.000020 		hi def link jsonSemicolonError			Error
    2              0.000020 		hi def link jsonTrailingCommaError		Error
    2              0.000019 		hi def link jsonMissingCommaError		Error
    2              0.000020 		hi def link jsonStringSQError				Error
    2              0.000020 		hi def link jsonNoQuotesError				Error
    2              0.000019 		hi def link jsonTripleQuotesError		Error
    2              0.000003   endif
    2              0.000022   hi def link jsonQuote			Quote
    2              0.000008   hi def link jsonNoise			Noise
    2              0.000002 endif
                            
    2              0.000010 let b:current_syntax = "json"
    2              0.000008 if main_syntax == 'json'
    2              0.000012   unlet main_syntax
    2              0.000002 endif
                            
                            " Vim settings
                            " vim: ts=8 fdm=marker
                            
                            " MIT License
                            " Copyright (c) 2013, Jeroen Ruigrok van der Werven, Eli Parra
                            "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
                            "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
                            "THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                            "See https://twitter.com/elzr/status/294964017926119424

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\ftplugin\json.vim
Sourced 3 times
Total time:   0.000903
 Self time:   0.000776

count  total (s)   self (s)
    3   0.000437   0.000309 if polyglot#init#is_disabled(expand('<sfile>:p'), 'json', 'ftplugin/json.vim')
                              finish
    3              0.000004 endif
                            
                            " Vim syntax file
                            " Language:	JSON
                            " Maintainer:	Eli Parra <eli@elzr.com> https://github.com/elzr/vim-json
                            " Last Change:	2014-05-20 added warning toggle
                            
                            "uncomment to enable folding of `{...}` and `[...]` blocks
                            "setlocal foldmethod=syntax
                            
                            "conceal by default
    3              0.000023 if !exists("g:vim_json_syntax_conceal")
                            	let g:vim_json_syntax_conceal = 1
    3              0.000003 end
                            
                            "have warnings by default
    3              0.000013 if !exists("g:vim_json_warnings")
    1              0.000007 	let g:vim_json_warnings = 1
    3              0.000004 end
                            
                            "set concealcursor blank by default
                            "this should turn off the concealing in the current line (where the cursor is at),
                            "on all modes (normal, visual, insert)
    3              0.000017 if !exists("g:vim_json_syntax_concealcursor")
    1              0.000007 	let g:vim_json_syntax_concealcursor = ""
    3              0.000003 end
                            
    3              0.000028 if has('conceal')
    3              0.000011 	if (g:vim_json_syntax_conceal == 1)
                            		"level 2 means concealed text gets completely hidden unless a
                            		"replacement is defined (none is defined by us)
                            		setlocal conceallevel=2
                            		let &l:concealcursor = g:vim_json_syntax_concealcursor
    3              0.000006 	else
                            		"level 0 means text is shown normally = no concealing
    3              0.000038 		setlocal conceallevel=0
    3              0.000006 	endif
                            	"maybe g:vim_json_syntax_conceal could be settable to 0,1,2 to map
                            	"directly to vim's conceallevels? unsure if anyone cares
    3              0.000057 endif

SCRIPT  C:\Neovim\share\nvim\runtime\ftplugin\json.vim
Sourced 3 times
Total time:   0.000356
 Self time:   0.000356

count  total (s)   self (s)
                            " Vim filetype plugin
                            " Language:		JSON
                            " Maintainer:		David Barnett <daviebdawg+vim@gmail.com>
                            " Last Change:		2014 Jul 16
                            
    3              0.000037 if exists('b:did_ftplugin')
                              finish
    3              0.000005 endif
    3              0.000016 let b:did_ftplugin = 1
                            
    3              0.000013 let b:undo_ftplugin = 'setlocal formatoptions< comments< commentstring<'
                            
    3              0.000033 setlocal formatoptions-=t
                            
                            " JSON has no comments.
    3              0.000019 setlocal comments=
    3              0.000061 setlocal commentstring=

SCRIPT  C:\Neovim\share\nvim\runtime\syntax\json.vim
Sourced 2 times
Total time:   0.000157
 Self time:   0.000157

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	JSON
                            " Maintainer:	vacancy
                            " Previous Maintainer:	Eli Parra <eli@elzr.com>
                            " Last Change:	2019 Sep 17
                            " Version:      0.12
                            
    2              0.000028 if !exists("main_syntax")
                              " quit when a syntax file was already loaded
    2              0.000012   if exists("b:current_syntax")
    2              0.000006     finish
                              endif
                              let main_syntax = 'json'
                            endif
                            
                            syntax match   jsonNoise           /\%(:\|,\)/
                            
                            " NOTE that for the concealing to work your conceallevel should be set to 2
                            
                            " Syntax: JSON Keywords
                            " Separated into a match and region because a region by itself is always greedy
                            syn match  jsonKeywordMatch /"\([^"]\|\\\"\)\+"[[:blank:]\r\n]*\:/ contains=jsonKeyword
                            if has('conceal') && (!exists("g:vim_json_conceal") || g:vim_json_conceal==1)
                               syn region  jsonKeyword matchgroup=jsonQuote start=/"/  end=/"\ze[[:blank:]\r\n]*\:/ concealends contained
                            else
                               syn region  jsonKeyword matchgroup=jsonQuote start=/"/  end=/"\ze[[:blank:]\r\n]*\:/ contained
                            endif
                            
                            " Syntax: Strings
                            " Separated into a match and region because a region by itself is always greedy
                            " Needs to come after keywords or else a json encoded string will break the
                            " syntax
                            syn match  jsonStringMatch /"\([^"]\|\\\"\)\+"\ze[[:blank:]\r\n]*[,}\]]/ contains=jsonString
                            if has('conceal') && (!exists("g:vim_json_conceal") || g:vim_json_conceal==1)
                            	syn region  jsonString oneline matchgroup=jsonQuote start=/"/  skip=/\\\\\|\\"/  end=/"/ concealends contains=jsonEscape contained
                            else
                            	syn region  jsonString oneline matchgroup=jsonQuote start=/"/  skip=/\\\\\|\\"/  end=/"/ contains=jsonEscape contained
                            endif
                            
                            " Syntax: JSON does not allow strings with single quotes, unlike JavaScript.
                            syn region  jsonStringSQError oneline  start=+'+  skip=+\\\\\|\\"+  end=+'+
                            
                            
                            " Syntax: Escape sequences
                            syn match   jsonEscape    "\\["\\/bfnrt]" contained
                            syn match   jsonEscape    "\\u\x\{4}" contained
                            
                            " Syntax: Numbers
                            syn match   jsonNumber    "-\=\<\%(0\|[1-9]\d*\)\%(\.\d\+\)\=\%([eE][-+]\=\d\+\)\=\>\ze[[:blank:]\r\n]*[,}\]]"
                            
                            " ERROR WARNINGS **********************************************
                            if (!exists("g:vim_json_warnings") || g:vim_json_warnings==1)
                            	" Syntax: Strings should always be enclosed with quotes.
                            	syn match   jsonNoQuotesError  "\<[[:alpha:]][[:alnum:]]*\>"
                            	syn match   jsonTripleQuotesError  /"""/
                            
                            	" Syntax: An integer part of 0 followed by other digits is not allowed.
                            	syn match   jsonNumError  "-\=\<0\d\.\d*\>"
                            
                            	" Syntax: Decimals smaller than one should begin with 0 (so .1 should be 0.1).
                            	syn match   jsonNumError  "\:\@<=[[:blank:]\r\n]*\zs\.\d\+"
                            
                            	" Syntax: No comments in JSON, see http://stackoverflow.com/questions/244777/can-i-comment-a-json-file
                            	syn match   jsonCommentError  "//.*"
                            	syn match   jsonCommentError  "\(/\*\)\|\(\*/\)"
                            
                            	" Syntax: No semicolons in JSON
                            	syn match   jsonSemicolonError  ";"
                            
                            	" Syntax: No trailing comma after the last element of arrays or objects
                            	syn match   jsonTrailingCommaError  ",\_s*[}\]]"
                            
                            	" Syntax: Watch out for missing commas between elements
                            	syn match   jsonMissingCommaError /\("\|\]\|\d\)\zs\_s\+\ze"/
                            	syn match   jsonMissingCommaError /\(\]\|\}\)\_s\+\ze"/ "arrays/objects as values
                            	syn match   jsonMissingCommaError /}\_s\+\ze{/ "objects as elements in an array
                            	syn match   jsonMissingCommaError /\(true\|false\)\_s\+\ze"/ "true/false as value
                            endif
                            
                            " ********************************************** END OF ERROR WARNINGS
                            " Allowances for JSONP: function call at the beginning of the file,
                            " parenthesis and semicolon at the end.
                            " Function name validation based on
                            " http://stackoverflow.com/questions/2008279/validate-a-javascript-function-name/2008444#2008444
                            syn match  jsonPadding "\%^[[:blank:]\r\n]*[_$[:alpha:]][_$[:alnum:]]*[[:blank:]\r\n]*("
                            syn match  jsonPadding ");[[:blank:]\r\n]*\%$"
                            
                            " Syntax: Boolean
                            syn match  jsonBoolean /\(true\|false\)\(\_s\+\ze"\)\@!/
                            
                            " Syntax: Null
                            syn keyword  jsonNull      null
                            
                            " Syntax: Braces
                            syn region  jsonFold matchgroup=jsonBraces start="{" end=/}\(\_s\+\ze\("\|{\)\)\@!/ transparent fold
                            syn region  jsonFold matchgroup=jsonBraces start="\[" end=/]\(\_s\+\ze"\)\@!/ transparent fold
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            hi def link jsonPadding         Operator
                            hi def link jsonString          String
                            hi def link jsonTest          Label
                            hi def link jsonEscape          Special
                            hi def link jsonNumber          Number
                            hi def link jsonBraces          Delimiter
                            hi def link jsonNull            Function
                            hi def link jsonBoolean         Boolean
                            hi def link jsonKeyword         Label
                            
                            if (!exists("g:vim_json_warnings") || g:vim_json_warnings==1)
                            hi def link jsonNumError        Error
                            hi def link jsonCommentError    Error
                            hi def link jsonSemicolonError  Error
                            hi def link jsonTrailingCommaError     Error
                            hi def link jsonMissingCommaError      Error
                            hi def link jsonStringSQError        	Error
                            hi def link jsonNoQuotesError        	Error
                            hi def link jsonTripleQuotesError     	Error
                            endif
                            hi def link jsonQuote           Quote
                            hi def link jsonNoise           Noise
                            
                            let b:current_syntax = "json"
                            if main_syntax == 'json'
                              unlet main_syntax
                            endif
                            
                            " Vim settings
                            " vim: ts=8 fdm=marker
                            
                            " MIT License
                            " Copyright (c) 2013, Jeroen Ruigrok van der Werven, Eli Parra
                            "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
                            "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
                            "THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                            "See https://twitter.com/elzr/status/294964017926119424

SCRIPT  c:\vim\.vim\plugged\vim-polyglot\indent\json.vim
Sourced 1 time
Total time:   0.000602
 Self time:   0.000554

count  total (s)   self (s)
    1   0.000208   0.000159 if polyglot#init#is_disabled(expand('<sfile>:p'), 'json', 'indent/json.vim')
                              finish
    1              0.000001 endif
                            
                            " Vim indent file
                            " Language:		JSON
                            " Mantainer:		Eli Parra <eli@elzr.com> https://github.com/elzr/vim-json
                            " Last Change:          2014-05-13: merged Fix for square bracket matching by Jakar 
                            "   https://github.com/jakar/vim-json/commit/20b650e22aa750c4ab6a66aa646bdd95d7cd548a#diff-e81fc111b2052e306d126bd9989f7b7c
                            " Original Author:	Rogerz Zhang <rogerz.zhang at gmail.com> http://github.com/rogerz/vim-json
                            " Acknowledgement:      Based off of vim-javascript maintained by Darrick Wiebe 
                            "                       http://www.vim.org/scripts/script.php?script_id=2765
                            
                            " 0. Initialization {{{1
                            " =================
                            
                            " Only load this indent file when no other was loaded.
    1              0.000005 if exists("b:did_indent")
                              finish
    1              0.000001 endif
    1              0.000004 let b:did_indent = 1
                            
    1              0.000014 setlocal nosmartindent
                            
                            " Now, set up our indentation expression and keys that trigger it.
    1              0.000009 setlocal indentexpr=GetJSONIndent()
    1              0.000006 setlocal indentkeys=0{,0},0),0[,0],!^F,o,O,e
                            
                            " Only define the function once.
    1              0.000005 if exists("*GetJSONIndent")
                              finish
    1              0.000001 endif
                            
    1              0.000010 let s:cpo_save = &cpo
    1              0.000008 set cpo&vim
                            
                            " 1. Variables {{{1
                            " ============
                            
    1              0.000004 let s:line_term = '\s*\%(\%(\/\/\).*\)\=$'
                            " Regex that defines blocks.
    1              0.000007 let s:block_regex = '\%({\)\s*\%(|\%([*@]\=\h\w*,\=\s*\)\%(,\s*[*@]\=\h\w*\)*|\)\=' . s:line_term
                            
                            " 2. Auxiliary Functions {{{1
                            " ======================
                            
                            " Check if the character at lnum:col is inside a string.
    1              0.000007 function s:IsInString(lnum, col)
                              return synIDattr(synID(a:lnum, a:col, 1), 'name') == "jsonString"
                            endfunction
                            
                            " Find line above 'lnum' that isn't empty, or in a string.
    1              0.000004 function s:PrevNonBlankNonString(lnum)
                              let lnum = prevnonblank(a:lnum)
                              while lnum > 0
                                " If the line isn't empty or in a string, end search.
                                let line = getline(lnum)
                                if !(s:IsInString(lnum, 1) && s:IsInString(lnum, strlen(line)))
                                  break
                                endif
                                let lnum = prevnonblank(lnum - 1)
                              endwhile
                              return lnum
                            endfunction
                            
                            " Check if line 'lnum' has more opening brackets than closing ones.
    1              0.000003 function s:LineHasOpeningBrackets(lnum)
                              let open_0 = 0
                              let open_2 = 0
                              let open_4 = 0
                              let line = getline(a:lnum)
                              let pos = match(line, '[][(){}]', 0)
                              while pos != -1
                                let idx = stridx('(){}[]', line[pos])
                                if idx % 2 == 0
                                  let open_{idx} = open_{idx} + 1
                                else
                                  let open_{idx - 1} = open_{idx - 1} - 1
                                endif
                                let pos = match(line, '[][(){}]', pos + 1)
                              endwhile
                              return (open_0 > 0) . (open_2 > 0) . (open_4 > 0)
                            endfunction
                            
    1              0.000003 function s:Match(lnum, regex)
                              let col = match(getline(a:lnum), a:regex) + 1
                              return col > 0 && !s:IsInString(a:lnum, col) ? col : 0
                            endfunction
                            
                            " 3. GetJSONIndent Function {{{1
                            " =========================
                            
    1              0.000002 function GetJSONIndent()
                              " 3.1. Setup {{{2
                              " ----------
                            
                              " Set up variables for restoring position in file.  Could use v:lnum here.
                              let vcol = col('.')
                            
                              " 3.2. Work on the current line {{{2
                              " -----------------------------
                            
                              " Get the current line.
                              let line = getline(v:lnum)
                              let ind = -1
                            
                              " If we got a closing bracket on an empty line, find its match and indent
                              " according to it.
                              let col = matchend(line, '^\s*[]}]')
                            
                              if col > 0 && !s:IsInString(v:lnum, col)
                                call cursor(v:lnum, col)
                                let bs = strpart('{}[]', stridx('}]', line[col - 1]) * 2, 2)
                            
                                let pairstart = escape(bs[0], '[')
                                let pairend = escape(bs[1], ']')
                                let pairline = searchpair(pairstart, '', pairend, 'bW')
                            
                                if pairline > 0 
                                  let ind = indent(pairline)
                                else
                                  let ind = virtcol('.') - 1
                                endif
                            
                                return ind
                              endif
                            
                              " If we are in a multi-line string, don't do anything to it.
                              if s:IsInString(v:lnum, matchend(line, '^\s*') + 1)
                                return indent('.')
                              endif
                            
                              " 3.3. Work on the previous line. {{{2
                              " -------------------------------
                            
                              let lnum = prevnonblank(v:lnum - 1)
                            
                              if lnum == 0
                                return 0
                              endif
                            
                              " Set up variables for current line.
                              let line = getline(lnum)
                              let ind = indent(lnum)
                            
                              " If the previous line ended with a block opening, add a level of indent.
                              " if s:Match(lnum, s:block_regex)
                              "   if exists('*shiftwidth')
                              "     return indent(lnum) + shiftwidth()
                              "   else
                              "     return indent(lnum) + &sw
                              "   endif
                              " endif
                            
                              " If the previous line contained an opening bracket, and we are still in it,
                              " add indent depending on the bracket type.
                              if line =~ '[[({]'
                                let counts = s:LineHasOpeningBrackets(lnum)
                                if counts[0] == '1' || counts[1] == '1' || counts[2] == '1'
                                  if exists('*shiftwidth')
                                    return ind + shiftwidth()
                                  else
                                    return ind + &sw
                                  endif
                                else
                                  call cursor(v:lnum, vcol)
                                end
                              endif
                            
                              " }}}2
                            
                              return ind
                            endfunction
                            
                            " }}}1
                            
    1              0.000011 let &cpo = s:cpo_save
    1              0.000004 unlet s:cpo_save
                            
                            " vim:set sw=2 sts=2 ts=8 noet:
                            

SCRIPT  C:\Neovim\share\nvim\runtime\indent\json.vim
Sourced 1 time
Total time:   0.000099
 Self time:   0.000099

count  total (s)   self (s)
                            " Vim indent file
                            " Language:		JSON
                            " Mantainer:		Eli Parra <eli@elzr.com> https://github.com/elzr/vim-json
                            " Last Change:          2020 Aug 30
                            "   https://github.com/jakar/vim-json/commit/20b650e22aa750c4ab6a66aa646bdd95d7cd548a#diff-e81fc111b2052e306d126bd9989f7b7c
                            " Original Author:	Rogerz Zhang <rogerz.zhang at gmail.com> http://github.com/rogerz/vim-json
                            " Acknowledgement:      Based off of vim-javascript maintained by Darrick Wiebe 
                            "                       http://www.vim.org/scripts/script.php?script_id=2765
                            
                            " 0. Initialization {{{1
                            " =================
                            
                            " Only load this indent file when no other was loaded.
    1              0.000018 if exists("b:did_indent")
    1              0.000003   finish
                            endif
                            let b:did_indent = 1
                            
                            setlocal nosmartindent
                            
                            " Now, set up our indentation expression and keys that trigger it.
                            setlocal indentexpr=GetJSONIndent(v:lnum)
                            setlocal indentkeys=0{,0},0),0[,0],!^F,o,O,e
                            
                            " Only define the function once.
                            if exists("*GetJSONIndent")
                              finish
                            endif
                            
                            let s:cpo_save = &cpo
                            set cpo&vim
                            
                            " 1. Variables {{{1
                            " ============
                            
                            let s:line_term = '\s*\%(\%(\/\/\).*\)\=$'
                            " Regex that defines blocks.
                            let s:block_regex = '\%({\)\s*\%(|\%([*@]\=\h\w*,\=\s*\)\%(,\s*[*@]\=\h\w*\)*|\)\=' . s:line_term
                            
                            " 2. Auxiliary Functions {{{1
                            " ======================
                            
                            " Check if the character at lnum:col is inside a string.
                            function s:IsInString(lnum, col)
                              return synIDattr(synID(a:lnum, a:col, 1), 'name') == 'jsonString'
                            endfunction
                            
                            " Find line above 'lnum' that isn't empty, or in a string.
                            function s:PrevNonBlankNonString(lnum)
                              let lnum = prevnonblank(a:lnum)
                              while lnum > 0
                                " If the line isn't empty or in a string, end search.
                                let line = getline(lnum)
                                if !(s:IsInString(lnum, 1) && s:IsInString(lnum, strlen(line)))
                                  break
                                endif
                                let lnum = prevnonblank(lnum - 1)
                              endwhile
                              return lnum
                            endfunction
                            
                            " Check if line 'lnum' has more opening brackets than closing ones.
                            function s:LineHasOpeningBrackets(lnum)
                              let open_0 = 0
                              let open_2 = 0
                              let open_4 = 0
                              let line = getline(a:lnum)
                              let pos = match(line, '[][(){}]', 0)
                              while pos != -1
                                let idx = stridx('(){}[]', line[pos])
                                if idx % 2 == 0
                                  let open_{idx} = open_{idx} + 1
                                else
                                  let open_{idx - 1} = open_{idx - 1} - 1
                                endif
                                let pos = match(line, '[][(){}]', pos + 1)
                              endwhile
                              return (open_0 > 0) . (open_2 > 0) . (open_4 > 0)
                            endfunction
                            
                            function s:Match(lnum, regex)
                              let col = match(getline(a:lnum), a:regex) + 1
                              return col > 0 && !s:IsInString(a:lnum, col) ? col : 0
                            endfunction
                            
                            " 3. GetJSONIndent Function {{{1
                            " =========================
                            
                            function GetJSONIndent(...)
                              " 3.1. Setup {{{2
                              " ----------
                              " For the current line, use the first argument if given, else v:lnum
                              let clnum = a:0 ? a:1 : v:lnum
                            
                              " Set up variables for restoring position in file.  Could use clnum here.
                              let vcol = col('.')
                            
                              " 3.2. Work on the current line {{{2
                              " -----------------------------
                            
                              " Get the current line.
                              let line = getline(clnum)
                              let ind = -1
                            
                              " If we got a closing bracket on an empty line, find its match and indent
                              " according to it.
                              let col = matchend(line, '^\s*[]}]')
                            
                              if col > 0 && !s:IsInString(clnum, col)
                                call cursor(clnum, col)
                                let bs = strpart('{}[]', stridx('}]', line[col - 1]) * 2, 2)
                            
                                let pairstart = escape(bs[0], '[')
                                let pairend = escape(bs[1], ']')
                                let pairline = searchpair(pairstart, '', pairend, 'bW')
                            
                                if pairline > 0 
                                  let ind = indent(pairline)
                                else
                                  let ind = virtcol('.') - 1
                                endif
                            
                                return ind
                              endif
                            
                              " If we are in a multi-line string, don't do anything to it.
                              if s:IsInString(clnum, matchend(line, '^\s*') + 1)
                                return indent('.')
                              endif
                            
                              " 3.3. Work on the previous line. {{{2
                              " -------------------------------
                            
                              let lnum = prevnonblank(clnum - 1)
                            
                              if lnum == 0
                                return 0
                              endif
                            
                              " Set up variables for current line.
                              let line = getline(lnum)
                              let ind = indent(lnum)
                            
                              " If the previous line ended with a block opening, add a level of indent.
                              " if s:Match(lnum, s:block_regex)
                                " return indent(lnum) + shiftwidth()
                              " endif
                            
                              " If the previous line contained an opening bracket, and we are still in it,
                              " add indent depending on the bracket type.
                              if line =~ '[[({]'
                                let counts = s:LineHasOpeningBrackets(lnum)
                                if counts[0] == '1' || counts[1] == '1' || counts[2] == '1'
                                  return ind + shiftwidth()
                                else
                                  call cursor(clnum, vcol)
                                end
                              endif
                            
                              " }}}2
                            
                              return ind
                            endfunction
                            
                            " }}}1
                            
                            let &cpo = s:cpo_save
                            unlet s:cpo_save
                            
                            " vim:set sw=2 sts=2 ts=8 noet:

SCRIPT  c:\vim\.vim\plugged\vim-airline\autoload\airline\async.vim
Sourced 1 time
Total time:   0.000766
 Self time:   0.000766

count  total (s)   self (s)
                            " MIT License. Copyright (c) 2013-2021 Christian Brabandt et al.
                            " vim: et ts=2 sts=2 sw=2
                            
    1              0.000008 scriptencoding utf-8
                            
    1              0.000012 let s:untracked_jobs = {}
    1              0.000003 let s:mq_jobs        = {}
    1              0.000003 let s:po_jobs        = {}
    1              0.000003 let s:clean_jobs     = {}
                            
                            " Generic functions handling on exit event of the various async functions
    1              0.000010 function! s:untracked_output(dict, buf)
                              if a:buf =~? ('^'. a:dict.cfg['untracked_mark'])
                                let a:dict.cfg.untracked[a:dict.file] = get(g:, 'airline#extensions#branch#notexists', g:airline_symbols.notexists)
                              else
                                let a:dict.cfg.untracked[a:dict.file] = ''
                              endif
                            endfunction
                            
                            " also called from branch extension (for non-async vims)
    1              0.000004 function! airline#async#mq_output(buf, file)
                              let buf=a:buf
                              if !empty(a:buf)
                                if a:buf =~# 'no patches applied' ||
                                  \ a:buf =~# "unknown command 'qtop'" ||
                                  \ a:buf =~# "abort"
                                  let buf = ''
                                elseif exists("b:mq") && b:mq isnot# buf
                                  " make sure, statusline is updated
                                  unlet! b:airline_head
                                endif
                                let b:mq = buf
                              endif
                              if has_key(s:mq_jobs, a:file)
                                call remove(s:mq_jobs, a:file)
                              endif
                            endfunction
                            
    1              0.000004 function! s:po_output(buf, file)
                              if !empty(a:buf)
                                let b:airline_po_stats = printf("%s", a:buf)
                              else
                                let b:airline_po_stats = ''
                              endif
                              if has_key(s:po_jobs, a:file)
                                call remove(s:po_jobs, a:file)
                              endif
                            endfunction
                            
    1              0.000003 function! s:valid_dir(dir)
                              if empty(a:dir) || !isdirectory(a:dir)
                                return getcwd()
                              endif
                              return a:dir
                            endfunction
                            
    1              0.000004 function! airline#async#vcs_untracked(config, file, vcs)
                              if g:airline#init#vim_async
                                " Vim 8 with async support
                                noa call airline#async#vim_vcs_untracked(a:config, a:file)
                              else
                                " nvim async or vim without job-feature
                                noa call airline#async#nvim_vcs_untracked(a:config, a:file, a:vcs)
                              endif
                            endfunction
                            
    1              0.000004 function! s:set_clean_variables(file, vcs, val)
                              let var=getbufvar(fnameescape(a:file), 'buffer_vcs_config', {})
                              if has_key(var, a:vcs) && has_key(var[a:vcs], 'dirty') &&
                                    \ type(getbufvar(fnameescape(a:file), 'buffer_vcs_config')) == type({})
                                let var[a:vcs].dirty=a:val
                                try
                                  call setbufvar(fnameescape(a:file), 'buffer_vcs_config', var)
                                  unlet! b:airline_head
                                catch
                                endtry
                              endif
                            endfunction
                            
    1              0.000004 function! s:set_clean_jobs_variable(vcs, file, id)
                              if !has_key(s:clean_jobs, a:vcs)
                                let s:clean_jobs[a:vcs] = {}
                              endif
                              let s:clean_jobs[a:vcs][a:file]=a:id
                            endfunction
                            
    1              0.000003 function! s:on_exit_clean(...) dict abort
                              let buf=self.buf
                              call s:set_clean_variables(self.file, self.vcs, !empty(buf))
                              if has_key(get(s:clean_jobs, self.vcs, {}), self.file)
                                call remove(s:clean_jobs[self.vcs], self.file)
                              endif
                            endfunction
                            
    1              0.000003 function! airline#async#vcs_clean(cmd, file, vcs)
                              if g:airline#init#vim_async
                                " Vim 8 with async support
                                noa call airline#async#vim_vcs_clean(a:cmd, a:file, a:vcs)
                              elseif has("nvim")
                                " nvim async
                                noa call airline#async#nvim_vcs_clean(a:cmd, a:file, a:vcs)
                              else
                                " Vim pre 8 using system()
                                call airline#async#vim7_vcs_clean(a:cmd, a:file, a:vcs)
                              endif
                            endfunction
                            
    1              0.000034 if v:version >= 800 && has("job")
                              " Vim 8.0 with Job feature
                              " TODO: Check if we need the cwd option for the job_start() functions
                              "       (only works starting with Vim 8.0.0902)
                            
                              function! s:on_stdout(channel, msg) dict abort
                                let self.buf .= a:msg
                              endfunction
                            
                              function! s:on_exit_mq(channel) dict abort
                                call airline#async#mq_output(self.buf, self.file)
                              endfunction
                            
                              function! s:on_exit_untracked(channel) dict abort
                                call s:untracked_output(self, self.buf)
                                if has_key(s:untracked_jobs, self.file)
                                  call remove(s:untracked_jobs, self.file)
                                endif
                              endfunction
                            
                              function! s:on_exit_po(channel) dict abort
                                call s:po_output(self.buf, self.file)
                                call airline#extensions#po#shorten()
                              endfunction
                            
                              function! airline#async#get_mq_async(cmd, file)
                                if g:airline#init#is_windows && &shell =~ 'cmd\|powershell'
                                  let cmd = a:cmd
                                else
                                  let cmd = [&shell, &shellcmdflag, a:cmd]
                                endif
                            
                                let options = {'cmd': a:cmd, 'buf': '', 'file': a:file}
                                if has_key(s:mq_jobs, a:file)
                                  if job_status(get(s:mq_jobs, a:file)) == 'run'
                                    return
                                  elseif has_key(s:mq_jobs, a:file)
                                    call remove(s:mq_jobs, a:file)
                                  endif
                                endif
                                let id = job_start(cmd, {
                                      \ 'err_io':   'out',
                                      \ 'out_cb':   function('s:on_stdout', options),
                                      \ 'close_cb': function('s:on_exit_mq', options)})
                                let s:mq_jobs[a:file] = id
                              endfunction
                            
                              function! airline#async#get_msgfmt_stat(cmd, file)
                                if !executable('msgfmt')
                                  " no msgfmt
                                  return
                                endif
                                if g:airline#init#is_windows
                                  let cmd = 'cmd /C ' . a:cmd. shellescape(a:file)
                                else
                                  let cmd = ['sh', '-c', a:cmd. shellescape(a:file)]
                                endif
                            
                                let options = {'buf': '', 'file': a:file}
                                if has_key(s:po_jobs, a:file)
                                  if job_status(get(s:po_jobs, a:file)) == 'run'
                                    return
                                  elseif has_key(s:po_jobs, a:file)
                                    call remove(s:po_jobs, a:file)
                                  endif
                                endif
                                let id = job_start(cmd, {
                                      \ 'err_io':   'out',
                                      \ 'out_cb':   function('s:on_stdout', options),
                                      \ 'close_cb': function('s:on_exit_po', options)})
                                let s:po_jobs[a:file] = id
                              endfunction
                            
                              function! airline#async#vim_vcs_clean(cmd, file, vcs)
                                if g:airline#init#is_windows && &shell =~ 'cmd\|powershell'
                                  let cmd = a:cmd
                                else
                                  let cmd = [&shell, &shellcmdflag, a:cmd]
                                endif
                            
                                let options = {'buf': '', 'vcs': a:vcs, 'file': a:file}
                                let jobs = get(s:clean_jobs, a:vcs, {})
                                if has_key(jobs, a:file)
                                  if job_status(get(jobs, a:file)) == 'run'
                                    return
                                  elseif has_key(jobs, a:file)
                                    " still running
                                    return
                                    " jobs dict should be cleaned on exit, so not needed here
                                    " call remove(jobs, a:file)
                                  endif
                                endif
                                let id = job_start(cmd, {
                                      \ 'err_io':   'null',
                                      \ 'out_cb':   function('s:on_stdout', options),
                                      \ 'close_cb': function('s:on_exit_clean', options)})
                                call s:set_clean_jobs_variable(a:vcs, a:file, id)
                              endfunction
                            
                              function! airline#async#vim_vcs_untracked(config, file)
                                if g:airline#init#is_windows && &shell =~ 'cmd\|powershell'
                                  let cmd = a:config['cmd'] . shellescape(a:file)
                                else
                                  let cmd = [&shell, &shellcmdflag, a:config['cmd'] . shellescape(a:file)]
                                endif
                            
                                let options = {'cfg': a:config, 'buf': '', 'file': a:file}
                                if has_key(s:untracked_jobs, a:file)
                                  if job_status(get(s:untracked_jobs, a:file)) == 'run'
                                    return
                                  elseif has_key(s:untracked_jobs, a:file)
                                    call remove(s:untracked_jobs, a:file)
                                  endif
                                endif
                                let id = job_start(cmd, {
                                      \ 'err_io':   'out',
                                      \ 'out_cb':   function('s:on_stdout', options),
                                      \ 'close_cb': function('s:on_exit_untracked', options)})
                                let s:untracked_jobs[a:file] = id
                              endfunction
                            
    1              0.000023 elseif has("nvim")
                              " NVim specific functions
                            
    1              0.000005   function! s:nvim_output_handler(job_id, data, event) dict
                                if a:event == 'stdout' || a:event == 'stderr'
                                  let self.buf .=  join(a:data)
                                endif
                              endfunction
                            
    1              0.000004   function! s:nvim_untracked_job_handler(job_id, data, event) dict
                                if a:event == 'exit'
                                  call s:untracked_output(self, self.buf)
                                  if has_key(s:untracked_jobs, self.file)
                                    call remove(s:untracked_jobs, self.file)
                                  endif
                                endif
                              endfunction
                            
    1              0.000003   function! s:nvim_mq_job_handler(job_id, data, event) dict
                                if a:event == 'exit'
                                  call airline#async#mq_output(self.buf, self.file)
                                endif
                              endfunction
                            
    1              0.000003   function! s:nvim_po_job_handler(job_id, data, event) dict
                                if a:event == 'exit'
                                  call s:po_output(self.buf, self.file)
                                  call airline#extensions#po#shorten()
                                endif
                              endfunction
                            
    1              0.000004   function! airline#async#nvim_get_mq_async(cmd, file)
                                let config = {
                                \ 'buf': '',
                                \ 'file': a:file,
                                \ 'cwd': s:valid_dir(fnamemodify(a:file, ':p:h')),
                                \ 'on_stdout': function('s:nvim_output_handler'),
                                \ 'on_stderr': function('s:nvim_output_handler'),
                                \ 'on_exit': function('s:nvim_mq_job_handler')
                                \ }
                                if g:airline#init#is_windows && &shell =~ 'cmd\|powershell'
                                  let cmd = a:cmd
                                else
                                  let cmd = [&shell, &shellcmdflag, a:cmd]
                                endif
                            
                                if has_key(s:mq_jobs, a:file)
                                  call remove(s:mq_jobs, a:file)
                                endif
                                let id = jobstart(cmd, config)
                                let s:mq_jobs[a:file] = id
                              endfunction
                            
    1              0.000004   function! airline#async#nvim_get_msgfmt_stat(cmd, file)
                                let config = {
                                \ 'buf': '',
                                \ 'file': a:file,
                                \ 'cwd': s:valid_dir(fnamemodify(a:file, ':p:h')),
                                \ 'on_stdout': function('s:nvim_output_handler'),
                                \ 'on_stderr': function('s:nvim_output_handler'),
                                \ 'on_exit': function('s:nvim_po_job_handler')
                                \ }
                                if g:airline#init#is_windows && &shell =~ 'cmd\|powershell'
                                  " no msgfmt on windows?
                                  return
                                else
                                  let cmd = [&shell, &shellcmdflag, a:cmd. shellescape(a:file)]
                                endif
                            
                                if has_key(s:po_jobs, a:file)
                                  call remove(s:po_jobs, a:file)
                                endif
                                let id = jobstart(cmd, config)
                                let s:po_jobs[a:file] = id
                              endfunction
                            
    1              0.000004   function! airline#async#nvim_vcs_clean(cmd, file, vcs)
                                let config = {
                                \ 'buf': '',
                                \ 'vcs': a:vcs,
                                \ 'file': a:file,
                                \ 'cwd': s:valid_dir(fnamemodify(a:file, ':p:h')),
                                \ 'on_stdout': function('s:nvim_output_handler'),
                                \ 'on_stderr': function('s:nvim_output_handler'),
                                \ 'on_exit': function('s:on_exit_clean')}
                                if g:airline#init#is_windows && &shell =~ 'cmd\|powershell'
                                  let cmd = a:cmd
                                else
                                  let cmd = [&shell, &shellcmdflag, a:cmd]
                                endif
                            
                                if !has_key(s:clean_jobs, a:vcs)
                                  let s:clean_jobs[a:vcs] = {}
                                endif
                                if has_key(s:clean_jobs[a:vcs], a:file)
                                  " still running
                                  return
                                  " jobs dict should be cleaned on exit, so not needed here
                                  " call remove(s:clean_jobs[a:vcs], a:file)
                                endif
                                let id = jobstart(cmd, config)
                                call s:set_clean_jobs_variable(a:vcs, a:file, id)
                              endfunction
                            
    1              0.000002 endif
                            
                            " Should work in either Vim pre 8 or Nvim
    1              0.000009 function! airline#async#nvim_vcs_untracked(cfg, file, vcs)
                              let cmd = a:cfg.cmd . shellescape(a:file)
                              let id = -1
                              let config = {
                              \ 'buf': '',
                              \ 'vcs': a:vcs,
                              \ 'cfg': a:cfg,
                              \ 'file': a:file,
                              \ 'cwd': s:valid_dir(fnamemodify(a:file, ':p:h'))
                              \ }
                              if has("nvim")
                                call extend(config, {
                                \ 'on_stdout': function('s:nvim_output_handler'),
                                \ 'on_exit': function('s:nvim_untracked_job_handler')})
                                if has_key(s:untracked_jobs, config.file)
                                  " still running
                                  return
                                endif
                                try
                                let id = jobstart(cmd, config)
                                catch
                                  " catch-all, jobstart() failed, fall back to system()
                                  let id=-1
                                endtry
                                let s:untracked_jobs[a:file] = id
                              endif
                              " vim without job feature or nvim jobstart failed
                              if id < 1
                                let output=system(cmd)
                                call s:untracked_output(config, output)
                                call airline#extensions#branch#update_untracked_config(a:file, a:vcs)
                              endif
                            endfunction
                            
    1              0.000004 function! airline#async#vim7_vcs_clean(cmd, file, vcs)
                              " Vim pre 8, fallback using system()
                              " don't want to to see error messages
                              if g:airline#init#is_windows && &shell =~ 'cmd'
                                let cmd = a:cmd .' 2>nul'
                              elseif g:airline#init#is_windows && &shell =~ 'powerline'
                                let cmd = a:cmd .' 2> $null'
                              else
                                let cmd = a:cmd .' 2>/dev/null'
                              endif
                              let output=system(cmd)
                              call s:set_clean_variables(a:file, a:vcs, !empty(output))
                            endfunction

SCRIPT  c:\vim\.vim\plugged\vim-fugitive\autoload\fugitive.vim
Sourced 1 time
Total time:   0.020092
 Self time:   0.017983

count  total (s)   self (s)
                            " Location:     autoload/fugitive.vim
                            " Maintainer:   Tim Pope <http://tpo.pe/>
                            
    1              0.000022 if exists('g:autoloaded_fugitive')
                              finish
    1              0.000003 endif
    1              0.000015 let g:autoloaded_fugitive = 1
                            
                            " Section: Utility
                            
    1              0.000014 function! s:function(name) abort
                              return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '.*\zs<SNR>\d\+_'),''))
                            endfunction
                            
    1              0.000008 function! s:sub(str,pat,rep) abort
                              return substitute(a:str,'\v\C'.a:pat,a:rep,'')
                            endfunction
                            
    1              0.000006 function! s:gsub(str,pat,rep) abort
                              return substitute(a:str,'\v\C'.a:pat,a:rep,'g')
                            endfunction
                            
    1              0.000005 function! s:Uniq(list) abort
                              let i = 0
                              let seen = {}
                              while i < len(a:list)
                                let str = string(a:list[i])
                                if has_key(seen, str)
                                  call remove(a:list, i)
                                else
                                  let seen[str] = 1
                                  let i += 1
                                endif
                              endwhile
                              return a:list
                            endfunction
                            
    1              0.000005 function! s:winshell() abort
                              return has('win32') && &shellcmdflag !~# '^-'
                            endfunction
                            
    1              0.000006 function! s:WinShellEsc(arg) abort
                              if type(a:arg) == type([])
                                return join(map(copy(a:arg), 's:shellesc(v:val)'))
                              elseif a:arg =~# '^[A-Za-z0-9_/:.-]\+$'
                                return a:arg
                              else
                                return '"' . s:gsub(s:gsub(a:arg, '"', '""'), '\%', '"%"') . '"'
                              endif
                            endfunction
                            
    1              0.000005 function! s:shellesc(arg) abort
                              if type(a:arg) == type([])
                                return join(map(copy(a:arg), 's:shellesc(v:val)'))
                              elseif a:arg =~# '^[A-Za-z0-9_/:.-]\+$'
                                return a:arg
                              elseif s:winshell()
                                return '"' . s:gsub(s:gsub(a:arg, '"', '""'), '\%', '"%"') . '"'
                              else
                                return shellescape(a:arg)
                              endif
                            endfunction
                            
    1              0.000012 let s:fnameescape = " \t\n*?[{`$\\%#'\"|!<"
    1              0.000006 function! s:fnameescape(file) abort
                              if type(a:file) == type([])
                                return join(map(copy(a:file), 's:fnameescape(v:val)'))
                              elseif exists('*fnameescape')
                                return fnameescape(a:file)
                              else
                                return escape(a:file, s:fnameescape)
                              endif
                            endfunction
                            
    1              0.000006 function! s:throw(string) abort
                              throw 'fugitive: '.a:string
                            endfunction
                            
    1              0.000005 function! s:VersionCheck() abort
                              if v:version < 704
                                return 'return ' . string('echoerr "fugitive: Vim 7.4 or newer required"')
                              elseif empty(fugitive#GitVersion())
                                return 'return ' . string('echoerr "fugitive: cannot execute Git"')
                              elseif !fugitive#GitVersion(1, 8, 5)
                                return 'return ' . string('echoerr "fugitive: Git 1.8.5 or newer required"')
                              else
                                return ''
                              endif
                            endfunction
                            
    1              0.000005 function! s:DirCheck(...) abort
                              let vcheck = s:VersionCheck()
                              if !empty(vcheck)
                                return vcheck
                              elseif !empty(a:0 ? s:Dir(a:1) : s:Dir())
                                return ''
                              elseif empty(bufname(''))
                                return 'return ' . string('echoerr "fugitive: working directory does not belong to a Git repository"')
                              else
                                return 'return ' . string('echoerr "fugitive: file does not belong to a Git repository"')
                              endif
                            endfunction
                            
    1              0.000006 function! s:Mods(mods, ...) abort
                              let mods = substitute(a:mods, '\C<mods>', '', '')
                              let mods = mods =~# '\S$' ? mods . ' ' : mods
                              if a:0 && mods !~# '\<\%(aboveleft\|belowright\|leftabove\|rightbelow\|topleft\|botright\|tab\)\>'
                                let mods = a:1 . ' ' . mods
                              endif
                              return substitute(mods, '\s\+', ' ', 'g')
                            endfunction
                            
    1              0.000013 if exists('+shellslash')
    1              0.000005   function! s:Slash(path) abort
                                return tr(a:path, '\', '/')
                              endfunction
                            else
                              function! s:Slash(path) abort
                                return a:path
                              endfunction
    1              0.000002 endif
                            
    1              0.000005 function! s:Resolve(path) abort
                              let path = resolve(a:path)
                              if has('win32')
                                let path = FugitiveVimPath(fnamemodify(fnamemodify(path, ':h'), ':p') . fnamemodify(path, ':t'))
                              endif
                              return path
                            endfunction
                            
    1              0.000006 function! s:FileIgnoreCase(for_completion) abort
                              return (exists('+fileignorecase') && &fileignorecase)
                                    \ || (a:for_completion && exists('+wildignorecase') && &wildignorecase)
                            endfunction
                            
    1              0.000005 function! s:cpath(path, ...) abort
                              if s:FileIgnoreCase(0)
                                let path = FugitiveVimPath(tolower(a:path))
                              else
                                let path = FugitiveVimPath(a:path)
                              endif
                              return a:0 ? path ==# s:cpath(a:1) : path
                            endfunction
                            
    1              0.000027 let s:executables = {}
                            
    1              0.000007 function! s:executable(binary) abort
                              if !has_key(s:executables, a:binary)
                                let s:executables[a:binary] = executable(a:binary)
                              endif
                              return s:executables[a:binary]
                            endfunction
                            
    1              0.000011 if !exists('s:temp_scripts')
    1              0.000007   let s:temp_scripts = {}
    1              0.000003 endif
    1              0.000024 function! s:TempScript(...) abort
                              let body = join(a:000, "\n")
                              if !has_key(s:temp_scripts, body)
                                let s:temp_scripts[body] = tempname() . '.sh'
                              endif
                              let temp = s:temp_scripts[body]
                              if !filereadable(temp)
                                call writefile(['#!/bin/sh'] + a:000, temp)
                              endif
                              return FugitiveGitPath(temp)
                            endfunction
                            
    1              0.000007 function! s:DoAutocmd(cmd) abort
                              if v:version >= 704 || (v:version == 703 && has('patch442'))
                                return 'doautocmd <nomodeline>' . a:cmd
                              elseif &modelines > 0
                                return 'try|set modelines=0|doautocmd ' . a:cmd . '|finally|set modelines=' . &modelines . '|endtry'
                              else
                                return 'doautocmd ' . a:cmd
                              endif
                            endfunction
                            
    1              0.000010 let s:nowait = v:version >= 704 ? '<nowait>' : ''
                            
    1              0.000006 function! s:Map(mode, lhs, rhs, ...) abort
                              for mode in split(a:mode, '\zs')
                                let flags = (a:0 ? a:1 : '') . (a:rhs =~# '<Plug>' ? '' : '<script>')
                                let head = a:lhs
                                let tail = ''
                                let keys = get(g:, mode.'remap', {})
                                if type(keys) == type([])
                                  return
                                endif
                                while !empty(head)
                                  if has_key(keys, head)
                                    let head = keys[head]
                                    if empty(head)
                                      return
                                    endif
                                    break
                                  endif
                                  let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
                                  let head = substitute(head, '<[^<>]*>$\|.$', '', '')
                                endwhile
                                if flags !~# '<unique>' || empty(mapcheck(head.tail, mode))
                                  exe mode.'map <buffer>' s:nowait flags head.tail a:rhs
                                  if a:0 > 1
                                    let b:undo_ftplugin = get(b:, 'undo_ftplugin', 'exe') .
                                          \ '|sil! exe "' . mode . 'unmap <buffer> ' . head.tail . '"'
                                  endif
                                endif
                              endfor
                            endfunction
                            
    1              0.000005 function! fugitive#Autowrite() abort
                              if &autowrite || &autowriteall
                                try
                                  if &confirm
                                    let reconfirm = 1
                                    setglobal noconfirm
                                  endif
                                  silent! wall
                                finally
                                  if exists('reconfirm')
                                    setglobal confirm
                                  endif
                                endtry
                              endif
                              return ''
                            endfunction
                            
                            " Section: Git
                            
    1              0.000004 function! s:GitCmd() abort
                              if !exists('g:fugitive_git_executable')
                                return ['git']
                              elseif type(g:fugitive_git_executable) == type([])
                                return g:fugitive_git_executable
                              else
                                let dquote = '"\%([^"]\|""\|\\"\)*"\|'
                                let string = g:fugitive_git_executable
                                let list = []
                                if string =~# '^\w\+='
                                  call add(list, 'env')
                                endif
                                while string =~# '\S'
                                  let arg = matchstr(string, '^\s*\%(' . dquote . '''[^'']*''\|\\.\|[^[:space:] |]\)\+')
                                  let string = strpart(string, len(arg))
                                  let arg = substitute(arg, '^\s\+', '', '')
                                  let arg = substitute(arg,
                                        \ '\(' . dquote . '''\%(''''\|[^'']\)*''\|\\[' . s:fnameescape . ']\|^\\[>+-]\|!\d*\)\|' . s:expand,
                                        \ '\=submatch(0)[0] ==# "\\" ? submatch(0)[1] : submatch(0)[1:-2]', 'g')
                                  call add(list, arg)
                                endwhile
                                return list
                              endif
                            endfunction
                            
    1              0.000004 function! s:GitShellCmd() abort
                              if !exists('g:fugitive_git_executable')
                                return 'git'
                              elseif type(g:fugitive_git_executable) == type([])
                                return s:shellesc(g:fugitive_git_executable)
                              else
                                return g:fugitive_git_executable
                              endif
                            endfunction
                            
    1              0.000005 function! s:UserCommandCwd(dir) abort
                              let tree = s:Tree(a:dir)
                              return len(tree) ? FugitiveVimPath(tree) : getcwd()
                            endfunction
                            
    1              0.000004 function! s:UserCommandList(...) abort
                              if !fugitive#GitVersion(1, 8, 5)
                                throw 'fugitive: Git 1.8.5 or higher required'
                              endif
                              if !exists('g:fugitive_git_command')
                                let git = s:GitCmd()
                              elseif type(g:fugitive_git_command) == type([])
                                let git = g:fugitive_git_command
                              else
                                let git = split(g:fugitive_git_command, '\s\+')
                              endif
                              let flags = []
                              if a:0 && type(a:1) == type({})
                                let git = copy(get(a:1, 'git', git))
                                let flags = get(a:1, 'flags', flags)
                                let dir = a:1.dir
                              elseif a:0
                                let dir = a:1
                              else
                                let dir = ''
                              endif
                              if len(dir)
                                let tree = s:Tree(dir)
                                if empty(tree)
                                  call add(git, '--git-dir=' . FugitiveGitPath(dir))
                                elseif len(tree) && s:cpath(tree) !=# s:cpath(getcwd())
                                  call extend(git, ['-C', FugitiveGitPath(tree)])
                                endif
                              endif
                              return git + flags
                            endfunction
                            
    1              0.000006 function! s:UserCommand(...) abort
                              return s:shellesc(call('s:UserCommandList', a:0 ? [a:1] : []) + (a:0 ? a:2 : []))
                            endfunction
                            
    1              0.000007 let s:git_versions = {}
    1              0.000004 function! fugitive#GitVersion(...) abort
                              let git = s:GitShellCmd()
                              if !has_key(s:git_versions, git)
                                let s:git_versions[git] = matchstr(s:SystemError(git.' --version')[0], '\d[^[:space:]]\+')
                              endif
                              if !a:0
                                return s:git_versions[git]
                              endif
                              let components = split(s:git_versions[git], '\D\+')
                              if empty(components)
                                return -1
                              endif
                              for i in range(len(a:000))
                                if a:000[i] > +get(components, i)
                                  return 0
                                elseif a:000[i] < +get(components, i)
                                  return 1
                                endif
                              endfor
                              return a:000[i] ==# get(components, i)
                            endfunction
                            
    1              0.000006 let s:commondirs = {}
    1              0.000005 function! fugitive#CommonDir(dir) abort
                              if empty(a:dir)
                                return ''
                              endif
                              if !has_key(s:commondirs, a:dir)
                                if getfsize(a:dir . '/HEAD') < 10
                                  let s:commondirs[a:dir] = ''
                                elseif filereadable(a:dir . '/commondir')
                                  let cdir = get(readfile(a:dir . '/commondir', 1), 0, '')
                                  if cdir =~# '^/\|^\a:/'
                                    let s:commondirs[a:dir] = s:Slash(FugitiveVimPath(cdir))
                                  else
                                    let s:commondirs[a:dir] = simplify(a:dir . '/' . cdir)
                                  endif
                                else
                                  let s:commondirs[a:dir] = a:dir
                                endif
                              endif
                              return s:commondirs[a:dir]
                            endfunction
                            
    1              0.000005 function! s:Dir(...) abort
                              return a:0 ? FugitiveGitDir(a:1) : FugitiveGitDir()
                            endfunction
                            
    1              0.000004 function! s:Tree(...) abort
                              return a:0 ? FugitiveWorkTree(a:1) : FugitiveWorkTree()
                            endfunction
                            
    1              0.000005 function! s:HasOpt(args, ...) abort
                              let args = a:args[0 : index(a:args, '--')]
                              let opts = copy(a:000)
                              if type(opts[0]) == type([])
                                if empty(args) || index(opts[0], args[0]) == -1
                                  return 0
                                endif
                                call remove(opts, 0)
                              endif
                              for opt in opts
                                if index(args, opt) != -1
                                  return 1
                                endif
                              endfor
                            endfunction
                            
    1              0.000006 function! s:PreparePathArgs(cmd, dir, literal) abort
                              if a:literal
                                call insert(a:cmd, '--literal-pathspecs')
                              endif
                              let split = index(a:cmd, '--')
                              for i in range(split < 0 ? len(a:cmd) : split)
                                if type(a:cmd[i]) == type(0)
                                  let a:cmd[i] = fugitive#Path(bufname(a:cmd[i]), './', a:dir)
                                endif
                              endfor
                              if split < 0
                                return a:cmd
                              endif
                              for i in range(split + 1, len(a:cmd) - 1)
                                if type(a:cmd[i]) == type(0)
                                  let a:cmd[i] = fugitive#Path(bufname(a:cmd[i]), './', a:dir)
                                elseif a:literal
                                  let a:cmd[i] = fugitive#Path(a:cmd[i], './', a:dir)
                                endif
                              endfor
                              return a:cmd
                            endfunction
                            
    1              0.000023 let s:prepare_env = {
                                  \ 'sequence.editor': 'GIT_SEQUENCE_EDITOR',
                                  \ 'core.editor': 'GIT_EDITOR',
                                  \ 'core.askpass': 'GIT_ASKPASS',
                                  \ }
    1              0.000005 function! fugitive#PrepareDirEnvGitArgv(...) abort
                              if !fugitive#GitVersion(1, 8, 5)
                                throw 'fugitive: Git 1.8.5 or higher required'
                              endif
                              let git = s:GitCmd()
                              if a:0 && type(a:1) ==# type([])
                                let cmd = a:000[1:-1] + a:1
                              else
                                let cmd = copy(a:000)
                              endif
                              let env = {}
                              let i = 0
                              while i < len(cmd)
                                if type(cmd[i]) == type({})
                                  if has_key(cmd[i], 'dir')
                                    let dir = cmd[i].dir
                                  endif
                                  if has_key(cmd[i], 'git')
                                    let git = cmd[i].git
                                  endif
                                  call remove(cmd, i)
                                elseif cmd[i] =~# '^$\|[\/.]' && cmd[i] !~# '^-'
                                  let dir = remove(cmd, i)
                                elseif cmd[i] =~# '^--git-dir='
                                  let dir = remove(cmd, i)[10:-1]
                                elseif type(cmd[i]) ==# type(0)
                                  let dir = s:Dir(remove(cmd, i))
                                elseif cmd[i] ==# '-c' && len(cmd) > i + 1
                                  let key = matchstr(cmd[i+1], '^[^=]*')
                                  if has_key(s:prepare_env, tolower(key)) || key !~# '\.'
                                    let var = get(s:prepare_env, tolower(key), key)
                                    let val = matchstr(cmd[i+1], '=\zs.*')
                                    let env[var] = val
                                  endif
                                  if cmd[i+1] =~# '\.'
                                    let i += 2
                                  else
                                    call remove(cmd, i, i + 1)
                                  endif
                                elseif cmd[i] =~# '^--.*pathspecs$'
                                  let explicit_pathspec_option = 1
                                  let i += 1
                                elseif cmd[i] !~# '^-'
                                  break
                                else
                                  let i += 1
                                endif
                              endwhile
                              if !exists('dir')
                                let dir = s:Dir()
                              endif
                              call s:PreparePathArgs(cmd, dir, !exists('explicit_pathspec_option'))
                              return [dir, env, git, cmd]
                            endfunction
                            
    1              0.000007 function! s:BuildEnvPrefix(env) abort
                              let pre = ''
                              let env = items(a:env)
                              if empty(env)
                                return ''
                              elseif &shellcmdflag =~# '-Command'
                                return join(map(env, '"$Env:" . v:val[0] . " = ''" . substitute(v:val[1], "''", "''''", "g") . "''; "'), '')
                              elseif s:winshell()
                                return join(map(env, '"set " . substitute(join(v:val, "="), "[&|<>^]", "^^^&", "g") . "& "'), '')
                              else
                                return 'env ' . s:shellesc(map(env, 'join(v:val, "=")')) . ' '
                              endif
                            endfunction
                            
    1              0.000006 function! s:JobOpts(cmd, env) abort
                              if empty(a:env)
                                return [a:cmd, {}]
                              elseif has('patch-8.2.0239') || has('nvim-0.5.1') || has('patch-8.1.0902') && !has('nvim') && (!has('win32') || empty(filter(keys(a:env), 'exists("$" . v:val)')))
                                return [a:cmd, {'env': a:env}]
                              endif
                              let envlist = map(items(a:env), 'join(v:val, "=")')
                              if !has('win32')
                                return [['env'] + envlist + a:cmd, {}]
                              else
                                let pre = join(map(envlist, '"set " . substitute(v:val, "[&|<>^]", "^^^&", "g") . "& "'), '')
                                if len(a:cmd) == 3 && a:cmd[0] ==# 'cmd.exe' && a:cmd[1] ==# '/c'
                                  return [a:cmd[0:1] + [pre . a:cmd[2]], {}]
                                else
                                  return [['cmd.exe', '/c', pre . s:WinShellEsc(a:cmd)], {}]
                                endif
                              endif
                            endfunction
                            
    1              0.000007 function! s:BuildShell(dir, env, git, args) abort
                              let cmd = copy(a:args)
                              let tree = s:Tree(a:dir)
                              let pre = s:BuildEnvPrefix(a:env)
                              if empty(tree) || index(cmd, '--') == len(cmd) - 1
                                call insert(cmd, '--git-dir=' . FugitiveGitPath(a:dir))
                              else
                                call extend(cmd, ['-C', FugitiveGitPath(tree)], 'keep')
                              endif
                              return pre . join(map(a:git + cmd, 's:shellesc(v:val)'))
                            endfunction
                            
    1              0.000006 function! fugitive#Prepare(...) abort
                              let [dir, env, git, argv] = call('fugitive#PrepareDirEnvGitArgv', a:000)
                              return s:BuildShell(dir, env, git, argv)
                            endfunction
                            
    1              0.000005 function! s:SystemError(cmd, ...) abort
                              try
                                if &shellredir ==# '>' && &shell =~# 'sh\|cmd'
                                  let shellredir = &shellredir
                                  if &shell =~# 'csh'
                                    set shellredir=>&
                                  else
                                    set shellredir=>%s\ 2>&1
                                  endif
                                endif
                                if exists('+guioptions') && &guioptions =~# '!'
                                  let guioptions = &guioptions
                                  set guioptions-=!
                                endif
                                let out = call('system', [type(a:cmd) ==# type([]) ? fugitive#Prepare(a:cmd) : a:cmd] + a:000)
                                return [out, v:shell_error]
                              catch /^Vim\%((\a\+)\)\=:E484:/
                                let opts = ['shell', 'shellcmdflag', 'shellredir', 'shellquote', 'shellxquote', 'shellxescape', 'shellslash']
                                call filter(opts, 'exists("+".v:val) && !empty(eval("&".v:val))')
                                call map(opts, 'v:val."=".eval("&".v:val)')
                                call s:throw('failed to run `' . a:cmd . '` with ' . join(opts, ' '))
                              finally
                                if exists('shellredir')
                                  let &shellredir = shellredir
                                endif
                                if exists('guioptions')
                                  let &guioptions = guioptions
                                endif
                              endtry
                            endfunction
                            
    1              0.000005 function! s:ChompError(...) abort
                              let [out, exec_error] = s:SystemError(call('fugitive#Prepare', a:000))
                              return [s:sub(out, '\n$', ''), exec_error]
                            endfunction
                            
    1              0.000005 function! s:ChompDefault(default, ...) abort
                              let [out, exec_error] = call('s:ChompError', a:000)
                              return exec_error ? a:default : out
                            endfunction
                            
    1              0.000004 function! s:LinesError(...) abort
                              let [out, exec_error] = call('s:ChompError', a:000)
                              return [len(out) && !exec_error ? split(out, "\n", 1) : [], exec_error]
                            endfunction
                            
    1              0.000005 function! s:NullError(...) abort
                              let [out, exec_error] = s:SystemError(call('fugitive#Prepare', a:000))
                              return [exec_error ? [] : split(out, "\1"), exec_error ? substitute(out, "\n$", "", "") : '', exec_error]
                            endfunction
                            
    1              0.000010 function! s:TreeChomp(...) abort
                              let cmd = call('fugitive#Prepare', a:000)
                              let [out, exec_error] = s:SystemError(cmd)
                              let out = s:sub(out, '\n$', '')
                              if !exec_error
                                return out
                              endif
                              throw 'fugitive: error running `' . cmd . '`: ' . out
                            endfunction
                            
    1              0.000002 function! s:EchoExec(...) abort
                              if s:RunJobs()
                                return 'Git ' . s:fnameescape(a:000)
                              else
                                echo call('s:ChompError', a:000)[0]
                                call fugitive#ReloadStatus(-1, 1)
                                return 'checktime'
                              endif
                            endfunction
                            
    1              0.000006 let s:head_cache = {}
                            
    1              0.000002 function! fugitive#Head(...) abort
                              let dir = a:0 > 1 ? a:2 : s:Dir()
                              if empty(dir)
                                return ''
                              endif
                              let file = fugitive#Find('.git/HEAD', dir)
                              let ftime = getftime(file)
                              if ftime == -1
                                return ''
                              elseif ftime != get(s:head_cache, dir, [-1])[0]
                                let s:head_cache[dir] = [ftime, readfile(file)[0]]
                              endif
                              let head = s:head_cache[dir][1]
                              if head =~# '^ref: '
                                return substitute(head, '\C^ref: \%(refs/\%(heads/\|remotes/\|tags/\)\=\)\=', '', '')
                              elseif head =~# '^\x\{40,\}$'
                                let len = a:0 ? a:1 : 0
                                return len < 0 ? head : len ? head[0:len-1] : ''
                              else
                                return ''
                              endif
                            endfunction
                            
    1              0.000004 function! fugitive#RevParse(rev, ...) abort
                              let [hash, exec_error] = s:ChompError([a:0 ? a:1 : s:Dir(), 'rev-parse', '--verify', a:rev, '--'])
                              if !exec_error && hash =~# '^\x\{40,\}$'
                                return hash
                              endif
                              throw 'fugitive: rev-parse '.a:rev.': '.hash
                            endfunction
                            
    1              0.000004 function! s:ConfigTimestamps(dir, dict) abort
                              let files = ['/etc/gitconfig', '~/.gitconfig',
                                    \ len($XDG_CONFIG_HOME) ? $XDG_CONFIG_HOME . '/git/config' : '~/.config/git/config']
                              if len(a:dir)
                                call add(files, fugitive#Find('.git/config', a:dir))
                              endif
                              call extend(files, get(a:dict, 'include.path', []))
                              return join(map(files, 'getftime(expand(v:val))'), ',')
                            endfunction
                            
    1              0.000005 let s:config = {}
    1              0.000004 function! fugitive#Config(...) abort
                              let dir = s:Dir()
                              let name = ''
                              let default = get(a:, 3, '')
                              if a:0 >= 2 && type(a:2) == type({})
                                let name = substitute(a:1, '^[^.]\+\|[^.]\+$', '\L&', 'g')
                                return len(a:1) ? get(get(a:2, name, []), 0, default) : a:2
                              elseif a:0 >= 2
                                let dir = a:2
                                let name = a:1
                              elseif a:0 == 1 && type(a:1) == type({})
                                return a:1
                              elseif a:0 == 1 && a:1 =~# '^[[:alnum:]-]\+\.'
                                let name = a:1
                              elseif a:0 == 1
                                let dir = a:1
                              endif
                              let name = substitute(name, '^[^.]\+\|[^.]\+$', '\L&', 'g')
                              let dir_key = len(dir) ? dir : '_'
                              if has_key(s:config, dir_key) && s:config[dir_key][0] ==# s:ConfigTimestamps(dir, s:config[dir_key][1])
                                let dict = s:config[dir_key][1]
                              else
                                let dict = {}
                                let [lines, message, exec_error] = s:NullError([dir, 'config', '--list', '-z'])
                                if exec_error
                                  return {}
                                endif
                                for line in lines
                                  let key = matchstr(line, "^[^\n]*")
                                  if !has_key(dict, key)
                                    let dict[key] = []
                                  endif
                                  if len(key) ==# len(line)
                                    call add(dict[key], 1)
                                  else
                                    call add(dict[key], strpart(line, len(key) + 1))
                                  endif
                                endfor
                                let s:config[dir_key] = [s:ConfigTimestamps(dir, dict), dict]
                                lockvar! dict
                              endif
                              return len(name) ? get(get(dict, name, []), 0, default) : dict
                            endfunction
                            
    1              0.000006 function! s:Remote(dir) abort
                              let head = FugitiveHead(0, a:dir)
                              let remote = len(head) ? FugitiveConfigGet('branch.' . head . '.remote', a:dir) : ''
                              let i = 10
                              while remote ==# '.' && i > 0
                                let head = matchstr(FugitiveConfigGet('branch.' . head . '.merge', a:dir), 'refs/heads/\zs.*')
                                let remote = len(head) ? FugitiveConfigGet('branch.' . head . '.remote', a:dir) : ''
                                let i -= 1
                              endwhile
                              return remote =~# '^\.\=$' ? 'origin' : remote
                            endfunction
                            
    1              0.000007 unlet! s:ssh_aliases
    1              0.000004 function! fugitive#SshHostAlias(...) abort
                              if !exists('s:ssh_aliases')
                                let s:ssh_aliases = {}
                                if filereadable(expand('~/.ssh/config'))
                                  let hosts = []
                                  for line in readfile(expand('~/.ssh/config'))
                                    let key = matchstr(line, '^\s*\zs\w\+\ze\s')
                                    let value = matchstr(line, '^\s*\w\+\s\+\zs.*\S')
                                    if key ==? 'host'
                                      let hosts = split(value, '\s\+')
                                    elseif key ==? 'hostname'
                                      for host in hosts
                                        if !has_key(s:ssh_aliases, host)
                                          let s:ssh_aliases[host] = tolower(value)
                                        endif
                                      endfor
                                    endif
                                  endfor
                                endif
                              endif
                              if a:0
                                return get(s:ssh_aliases, a:1, a:1)
                              else
                                return s:ssh_aliases
                              endif
                            endfunction
                            
    1              0.000012 let s:redirects = {}
                            
    1              0.000006 function! fugitive#ResolveRemote(remote) abort
                              if a:remote =~# '^https\=://' && s:executable('curl')
                                if !has_key(s:redirects, a:remote)
                                  let s:redirects[a:remote] = matchstr(s:SystemError(
                                        \ 'curl --disable --silent --max-time 5 -I ' .
                                        \ s:shellesc(a:remote . '/info/refs?service=git-upload-pack'))[0],
                                        \ 'Location: \zs\S\+\ze/info/refs?')
                                endif
                                if len(s:redirects[a:remote])
                                  return s:redirects[a:remote]
                                endif
                              endif
                              return substitute(a:remote,
                                    \ '^ssh://\%([^@:/]\+@\)\=\zs[^/:]\+\|^\%([^@:/]\+@\)\=\zs[^/:]\+\ze:/\@!',
                                    \ '\=fugitive#SshHostAlias(submatch(0))', '')
                            endfunction
                            
    1              0.000004 function! fugitive#RemoteUrl(...) abort
                              let dir = a:0 > 1 ? a:2 : s:Dir()
                              let url = !a:0 || a:1 =~# '^\.\=$' ? s:Remote(dir) : a:1
                              if url !~# ':\|^/\|^\.\.\=/'
                                if !fugitive#GitVersion(2, 7)
                                  let url = FugitiveConfigGet('remote.' . url . '.url')
                                else
                                  let url = s:ChompDefault('', [dir, 'remote', 'get-url', url, '--'])
                                endif
                              endif
                              if !get(a:, 3, 0)
                                let url = fugitive#ResolveRemote(url)
                              endif
                              return url
                            endfunction
                            
                            " Section: Quickfix
                            
    1              0.000007 function! s:QuickfixGet(nr, ...) abort
                              if a:nr < 0
                                return call('getqflist', a:000)
                              else
                                return call('getloclist', [a:nr] + a:000)
                              endif
                            endfunction
                            
    1              0.000005 function! s:QuickfixSet(nr, ...) abort
                              if a:nr < 0
                                return call('setqflist', a:000)
                              else
                                return call('setloclist', [a:nr] + a:000)
                              endif
                            endfunction
                            
    1              0.000006 function! s:QuickfixCreate(nr, opts) abort
                              if has('patch-7.4.2200')
                                call s:QuickfixSet(a:nr, [], ' ', a:opts)
                              else
                                call s:QuickfixSet(a:nr, [], ' ')
                              endif
                            endfunction
                            
    1              0.000010 function! s:QuickfixStream(nr, event, title, cmd, first, mods, callback, ...) abort
                              let mods = s:Mods(a:mods)
                              let opts = {'title': a:title, 'context': {'items': []}}
                              call s:QuickfixCreate(a:nr, opts)
                              let event = (a:nr < 0 ? 'c' : 'l') . 'fugitive-' . a:event
                              silent exe s:DoAutocmd('QuickFixCmdPre ' . event)
                              let winnr = winnr()
                              exe a:nr < 0 ? 'copen' : 'lopen'
                              if winnr != winnr()
                                wincmd p
                              endif
                            
                              let buffer = []
                              let lines = split(s:SystemError(s:shellesc(a:cmd))[0], "\n")
                              for line in lines
                                call extend(buffer, call(a:callback, a:000 + [line]))
                                if len(buffer) >= 20
                                  let contexts = map(copy(buffer), 'get(v:val, "context", {})')
                                  lockvar contexts
                                  call extend(opts.context.items, contexts)
                                  unlet contexts
                                  call s:QuickfixSet(a:nr, remove(buffer, 0, -1), 'a')
                                  if mods !~# '\<silent\>'
                                    redraw
                                  endif
                                endif
                              endfor
                              call extend(buffer, call(a:callback, a:000 + [0]))
                              call extend(opts.context.items, map(copy(buffer), 'get(v:val, "context", {})'))
                              lockvar opts.context.items
                              call s:QuickfixSet(a:nr, buffer, 'a')
                            
                              silent exe s:DoAutocmd('QuickFixCmdPost ' . event)
                              if a:first && len(s:QuickfixGet(a:nr))
                                call s:BlurStatus()
                                return mods . (a:nr < 0 ? 'cfirst' : 'lfirst')
                              else
                                return 'exe'
                              endif
                            endfunction
                            
    1              0.000004 function! fugitive#Cwindow() abort
                              if &buftype == 'quickfix'
                                cwindow
                              else
                                botright cwindow
                                if &buftype == 'quickfix'
                                  wincmd p
                                endif
                              endif
                            endfunction
                            
                            " Section: Repository Object
                            
    1              0.000007 function! s:add_methods(namespace, method_names) abort
                              for name in a:method_names
                                let s:{a:namespace}_prototype[name] = s:function('s:'.a:namespace.'_'.name)
                              endfor
                            endfunction
                            
    1              0.000007 let s:repo_prototype = {}
    1              0.000005 let s:repos = {}
                            
    1              0.000026 function! fugitive#repo(...) abort
                              let dir = a:0 ? s:Dir(a:1) : (len(s:Dir()) ? s:Dir() : FugitiveExtractGitDir(expand('%:p')))
                              if dir !=# ''
                                if has_key(s:repos, dir)
                                  let repo = get(s:repos, dir)
                                else
                                  let repo = {'git_dir': dir}
                                  let s:repos[dir] = repo
                                endif
                                return extend(repo, s:repo_prototype, 'keep')
                              endif
                              call s:throw('not a Git repository')
                            endfunction
                            
    1              0.000006 function! s:repo_dir(...) dict abort
                              return join([self.git_dir]+a:000,'/')
                            endfunction
                            
    1              0.000005 function! s:repo_tree(...) dict abort
                              let dir = s:Tree(self.git_dir)
                              if dir ==# ''
                                call s:throw('no work tree')
                              else
                                return join([dir]+a:000,'/')
                              endif
                            endfunction
                            
    1              0.000004 function! s:repo_bare() dict abort
                              if self.dir() =~# '/\.git$'
                                return 0
                              else
                                return s:Tree(self.git_dir) ==# ''
                              endif
                            endfunction
                            
    1              0.000005 function! s:repo_find(object) dict abort
                              return fugitive#Find(a:object, self.git_dir)
                            endfunction
                            
    1              0.000006 function! s:repo_translate(rev) dict abort
                              return s:Slash(fugitive#Find(substitute(a:rev, '^/', ':(top)', ''), self.git_dir))
                            endfunction
                            
    1              0.000004 function! s:repo_head(...) dict abort
                              return fugitive#Head(a:0 ? a:1 : 0, self.git_dir)
                            endfunction
                            
    1   0.000735   0.000043 call s:add_methods('repo',['dir','tree','bare','find','translate','head'])
                            
    1              0.000011 function! s:repo_prepare(...) dict abort
                              return call('fugitive#Prepare', [self.git_dir] + a:000)
                            endfunction
                            
    1              0.000006 function! s:repo_git_command(...) dict abort
                              let git = s:GitShellCmd() . ' --git-dir='.s:shellesc(self.git_dir)
                              return git.join(map(copy(a:000),'" ".s:shellesc(v:val)'),'')
                            endfunction
                            
    1              0.000006 function! s:repo_git_chomp(...) dict abort
                              return s:sub(system(FugitivePrepare(a:000, self.git_dir)), '\n$', '')
                            endfunction
                            
    1              0.000005 function! s:repo_git_chomp_in_tree(...) dict abort
                              return call(self.git_chomp, a:000, self)
                            endfunction
                            
    1              0.000006 function! s:repo_rev_parse(rev) dict abort
                              return fugitive#RevParse(a:rev, self.git_dir)
                            endfunction
                            
    1   0.000558   0.000033 call s:add_methods('repo',['prepare','git_command','git_chomp','git_chomp_in_tree','rev_parse'])
                            
    1              0.000010 function! s:repo_superglob(base) dict abort
                              return map(fugitive#CompleteObject(a:base, self.git_dir), 'substitute(v:val, ''\\\(.\)'', ''\1'', "g")')
                            endfunction
                            
    1   0.000119   0.000024 call s:add_methods('repo',['superglob'])
                            
    1              0.000005 function! s:repo_config(name) dict abort
                              return FugitiveConfigGet(a:name, self.git_dir)
                            endfunction
                            
    1              0.000003 function! s:repo_user() dict abort
                              let username = self.config('user.name')
                              let useremail = self.config('user.email')
                              return username.' <'.useremail.'>'
                            endfunction
                            
    1   0.000133   0.000014 call s:add_methods('repo',['config', 'user'])
                            
                            " Section: File API
                            
    1              0.000004 function! s:DirCommitFile(path) abort
                              let vals = matchlist(s:Slash(a:path), '\c^fugitive:\%(//\)\=\(.\{-\}\)\%(//\|::\)\(\x\{40,\}\|[0-3]\)\(/.*\)\=$')
                              if empty(vals)
                                return ['', '', '']
                              endif
                              return vals[1:3]
                            endfunction
                            
    1              0.000003 function! s:DirRev(url) abort
                              let [dir, commit, file] = s:DirCommitFile(a:url)
                              return [dir, (commit =~# '^.$' ? ':' : '') . commit . substitute(file, '^/', ':', '')]
                            endfunction
                            
    1              0.000007 let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']
    1              0.000003 function! s:MergeHead(...) abort
                              let dir = fugitive#Find('.git/', a:0 ? a:1 : s:Dir())
                              for head in s:merge_heads
                                if filereadable(dir . head)
                                  return head
                                endif
                              endfor
                              return ''
                            endfunction
                            
    1              0.000003 function! s:Owner(path, ...) abort
                              let dir = a:0 ? a:1 : s:Dir()
                              if empty(dir)
                                return ''
                              endif
                              let actualdir = fugitive#Find('.git/', dir)
                              let [pdir, commit, file] = s:DirCommitFile(a:path)
                              if s:cpath(dir, pdir)
                                if commit =~# '^\x\{40,\}$'
                                  return commit
                                elseif commit ==# '2'
                                  return '@'
                                elseif commit ==# '0'
                                  return ''
                                endif
                                let merge_head = s:MergeHead(dir)
                                if empty(merge_head)
                                  return ''
                                endif
                                if commit ==# '3'
                                  return merge_head
                                elseif commit ==# '1'
                                  return s:TreeChomp('merge-base', 'HEAD', merge_head, '--')
                                endif
                              endif
                              let path = fnamemodify(a:path, ':p')
                              if s:cpath(actualdir, strpart(path, 0, len(actualdir))) && a:path =~# 'HEAD$'
                                return strpart(path, len(actualdir))
                              endif
                              let refs = fugitive#Find('.git/refs', dir)
                              if s:cpath(refs . '/', path[0 : len(refs)]) && path !~# '[\/]$'
                                return strpart(path, len(refs) - 4)
                              endif
                              return ''
                            endfunction
                            
    1              0.000006 function! fugitive#Real(url) abort
                              if empty(a:url)
                                return ''
                              endif
                              let [dir, commit, file] = s:DirCommitFile(a:url)
                              if len(dir)
                                let tree = s:Tree(dir)
                                return FugitiveVimPath((len(tree) ? tree : dir) . file)
                              endif
                              let pre = substitute(matchstr(a:url, '^\a\a\+\ze:'), '^.', '\u&', '')
                              if len(pre) && pre !=? 'fugitive' && exists('*' . pre . 'Real')
                                let url = {pre}Real(a:url)
                              else
                                let url = fnamemodify(a:url, ':p' . (a:url =~# '[\/]$' ? '' : ':s?[\/]$??'))
                              endif
                              return FugitiveVimPath(empty(url) ? a:url : url)
                            endfunction
                            
    1              0.000005 function! fugitive#Path(url, ...) abort
                              if empty(a:url)
                                return ''
                              endif
                              let dir = a:0 > 1 ? a:2 : s:Dir()
                              let tree = s:Tree(dir)
                              if !a:0
                                return fugitive#Real(a:url)
                              elseif a:1 =~# '\.$'
                                let path = s:Slash(fugitive#Real(a:url))
                                let cwd = getcwd()
                                let lead = ''
                                while s:cpath(tree . '/', (cwd . '/')[0 : len(tree)])
                                  if s:cpath(cwd . '/', path[0 : len(cwd)])
                                    if strpart(path, len(cwd) + 1) =~# '^\.git\%(/\|$\)'
                                      break
                                    endif
                                    return a:1[0:-2] . (empty(lead) ? './' : lead) . strpart(path, len(cwd) + 1)
                                  endif
                                  let cwd = fnamemodify(cwd, ':h')
                                  let lead .= '../'
                                endwhile
                                return a:1[0:-2] . path
                              endif
                              let url = a:url
                              let temp_state = s:TempState(url)
                              if has_key(temp_state, 'origin_bufnr')
                                let url = bufname(temp_state.origin_bufnr)
                              endif
                              let url = s:Slash(fnamemodify(url, ':p'))
                              if url =~# '/$' && s:Slash(a:url) !~# '/$'
                                let url = url[0:-2]
                              endif
                              let [argdir, commit, file] = s:DirCommitFile(a:url)
                              if len(argdir) && s:cpath(argdir) !=# s:cpath(dir)
                                let file = ''
                              elseif len(dir) && s:cpath(url[0 : len(dir)]) ==# s:cpath(dir . '/')
                                let file = '/.git'.url[strlen(dir) : -1]
                              elseif len(tree) && s:cpath(url[0 : len(tree)]) ==# s:cpath(tree . '/')
                                let file = url[len(tree) : -1]
                              elseif s:cpath(url) ==# s:cpath(tree)
                                let file = '/'
                              endif
                              if empty(file) && a:1 =~# '^$\|^[.:]/$'
                                return FugitiveGitPath(fugitive#Real(a:url))
                              endif
                              return substitute(file, '^/', a:1, '')
                            endfunction
                            
    1              0.000004 function! s:Relative(...) abort
                              return fugitive#Path(@%, a:0 ? a:1 : ':(top)', a:0 > 1 ? a:2 : s:Dir())
                            endfunction
                            
    1              0.000003 function! fugitive#Find(object, ...) abort
                              if type(a:object) == type(0)
                                let name = bufname(a:object)
                                return FugitiveVimPath(name =~# '^$\|^/\|^\a\+:' ? name : getcwd() . '/' . name)
                              elseif a:object =~# '^[~$]'
                                let prefix = matchstr(a:object, '^[~$]\i*')
                                let owner = expand(prefix)
                                return FugitiveVimPath((len(owner) ? owner : prefix) . strpart(a:object, len(prefix)))
                              endif
                              let rev = s:Slash(a:object)
                              if rev =~# '^$\|^/\|^\%(\a\a\+:\).*\%(//\|::\)' . (has('win32') ? '\|^\a:/' : '')
                                return FugitiveVimPath(a:object)
                              elseif rev =~# '^\.\.\=\%(/\|$\)'
                                return FugitiveVimPath(simplify(getcwd() . '/' . a:object))
                              endif
                              let dir = a:0 ? a:1 : s:Dir()
                              if empty(dir)
                                let file = matchstr(a:object, '^\%(:\d:\|[^:]*:\)\zs\%(\.\.\=$\|\.\.\=/.*\|/.*\|\w:/.*\)')
                                let dir = FugitiveExtractGitDir(file)
                                if empty(dir)
                                  return ''
                                endif
                              endif
                              let tree = s:Tree(dir)
                              let base = len(tree) ? tree : 'fugitive://' . dir . '//0'
                              if rev ==# '.git'
                                let f = len(tree) ? tree . '/.git' : dir
                              elseif rev =~# '^\.git/'
                                let f = substitute(rev, '^\.git', '', '')
                                let cdir = fugitive#CommonDir(dir)
                                if f =~# '^/\.\./\.\.\%(/\|$\)'
                                  let f = simplify(len(tree) ? tree . f[3:-1] : dir . f)
                                elseif f =~# '^/\.\.\%(/\|$\)'
                                  let f = base . f[3:-1]
                                elseif cdir !=# dir && (
                                      \ f =~# '^/\%(config\|hooks\|info\|logs/refs\|objects\|refs\|worktrees\)\%(/\|$\)' ||
                                      \ f !~# '^/\%(index$\|index\.lock$\|\w*MSG$\|\w*HEAD$\|logs/\w*HEAD$\|logs$\|rebase-\w\+\)\%(/\|$\)' &&
                                      \ getftime(FugitiveVimPath(dir . f)) < 0 && getftime(FugitiveVimPath(cdir . f)) >= 0)
                                  let f = simplify(cdir . f)
                                else
                                  let f = simplify(dir . f)
                                endif
                              elseif rev ==# ':/'
                                let f = tree
                              elseif rev =~# '^\.\%(/\|$\)'
                                let f = base . rev[1:-1]
                              elseif rev =~# '^::\%(/\|\a\+\:\)'
                                let f = rev[2:-1]
                              elseif rev =~# '^::\.\.\=\%(/\|$\)'
                                let f = simplify(getcwd() . '/' . rev[2:-1])
                              elseif rev =~# '^::'
                                let f = base . '/' . rev[2:-1]
                              elseif rev =~# '^:\%([0-3]:\)\=\.\.\=\%(/\|$\)\|^:[0-3]:\%(/\|\a\+:\)'
                                let f = rev =~# '^:\%([0-3]:\)\=\.' ? simplify(getcwd() . '/' . matchstr(rev, '\..*')) : rev[3:-1]
                                if s:cpath(base . '/', (f . '/')[0 : len(base)])
                                  let f = 'fugitive://' . dir . '//' . +matchstr(rev, '^:\zs\d\ze:') . '/' . strpart(f, len(base) + 1)
                                else
                                  let altdir = FugitiveExtractGitDir(f)
                                  if len(altdir) && !s:cpath(dir, altdir)
                                    return fugitive#Find(a:object, altdir)
                                  endif
                                endif
                              elseif rev =~# '^:[0-3]:'
                                let f = 'fugitive://' . dir . '//' . rev[1] . '/' . rev[3:-1]
                              elseif rev ==# ':'
                                if $GIT_INDEX_FILE =~# '/[^/]*index[^/]*\.lock$' && s:cpath(fnamemodify($GIT_INDEX_FILE,':p')[0:strlen(dir)]) ==# s:cpath(dir . '/') && filereadable($GIT_INDEX_FILE)
                                  let f = fnamemodify($GIT_INDEX_FILE, ':p')
                                else
                                  let f = fugitive#Find('.git/index', dir)
                                endif
                              elseif rev =~# '^:(\%(top\|top,literal\|literal,top\|literal\))'
                                let f = matchstr(rev, ')\zs.*')
                                if f=~# '^\.\.\=\%(/\|$\)'
                                  let f = simplify(getcwd() . '/' . f)
                                elseif f !~# '^/\|^\%(\a\a\+:\).*\%(//\|::\)' . (has('win32') ? '\|^\a:/' : '')
                                  let f = base . '/' . f
                                endif
                              elseif rev =~# '^:/\@!'
                                let f = 'fugitive://' . dir . '//0/' . rev[1:-1]
                              else
                                if !exists('f')
                                  let commit = matchstr(rev, '^\%([^:.-]\|\.\.[^/:]\)[^:]*\|^:.*')
                                  let file = substitute(matchstr(rev, '^\%([^:.-]\|\.\.[^/:]\)[^:]*\zs:.*'), '^:', '/', '')
                                  if file =~# '^/\.\.\=\%(/\|$\)\|^//\|^/\a\+:'
                                    let file = file =~# '^/\.' ? simplify(getcwd() . file) : file[1:-1]
                                    if s:cpath(base . '/', (file . '/')[0 : len(base)])
                                      let file = '/' . strpart(file, len(base) + 1)
                                    else
                                      let altdir = FugitiveExtractGitDir(file)
                                      if len(altdir) && !s:cpath(dir, altdir)
                                        return fugitive#Find(a:object, altdir)
                                      endif
                                      return file
                                    endif
                                  endif
                                  let commits = split(commit, '\.\.\.-\@!', 1)
                                  if len(commits) == 2
                                    call map(commits, 'empty(v:val) ? "@" : v:val')
                                    let commit = matchstr(s:ChompDefault('', [dir, 'merge-base'] + commits + ['--']), '\<[0-9a-f]\{40,\}\>')
                                  endif
                                  if commit !~# '^[0-9a-f]\{40,\}$\|^$'
                                    let commit = matchstr(s:ChompDefault('', [dir, 'rev-parse', '--verify', commit . (len(file) ? '^{}' : ''), '--']), '\<[0-9a-f]\{40,\}\>')
                                    if empty(commit) && len(file)
                                      let commit = repeat('0', 40)
                                    endif
                                  endif
                                  if len(commit)
                                    let f = 'fugitive://' . dir . '//' . commit . file
                                  else
                                    let f = base . '/' . substitute(rev, '^:/:\=\|^[^:]\+:', '', '')
                                  endif
                                endif
                              endif
                              return FugitiveVimPath(f)
                            endfunction
                            
    1              0.000004 function! s:Generate(object, ...) abort
                              let dir = a:0 ? a:1 : s:Dir()
                              let f = fugitive#Find(a:object, dir)
                              if !empty(f)
                                return f
                              elseif a:object ==# ':/'
                                return len(dir) ? FugitiveVimPath('fugitive://' . dir . '//0') : '.'
                              endif
                              let file = matchstr(a:object, '^\%(:\d:\|[^:]*:\)\zs.*')
                              return fnamemodify(FugitiveVimPath(len(file) ? file : a:object), ':p')
                            endfunction
                            
    1              0.000003 function! s:DotRelative(path, ...) abort
                              let cwd = a:0 ? a:1 : getcwd()
                              let path = substitute(a:path, '^[~$]\i*', '\=expand(submatch(0))', '')
                              if len(cwd) && s:cpath(cwd . '/', (path . '/')[0 : len(cwd)])
                                return '.' . strpart(path, len(cwd))
                              endif
                              return a:path
                            endfunction
                            
    1              0.000002 function! fugitive#Object(...) abort
                              let dir = a:0 > 1 ? a:2 : s:Dir()
                              let [fdir, rev] = s:DirRev(a:0 ? a:1 : @%)
                              if s:cpath(dir) !=# s:cpath(fdir)
                                let rev = ''
                              endif
                              let tree = s:Tree(dir)
                              let full = a:0 ? a:1 : s:BufName('%')
                              let full = fnamemodify(full, ':p' . (s:Slash(full) =~# '/$' ? '' : ':s?/$??'))
                              if empty(rev) && empty(tree)
                                return FugitiveGitPath(full)
                              elseif empty(rev)
                                let rev = fugitive#Path(full, './', dir)
                                if rev =~# '^\./.git\%(/\|$\)'
                                  return FugitiveGitPath(full)
                                endif
                              endif
                              if rev !~# '^\.\%(/\|$\)' || s:cpath(getcwd(), tree)
                                return rev
                              else
                                return FugitiveGitPath(tree . rev[1:-1])
                              endif
                            endfunction
                            
    1              0.000047 let s:var = '\%(<\%(cword\|cWORD\|cexpr\|cfile\|sfile\|slnum\|afile\|abuf\|amatch' . (has('clientserver') ? '\|client' : '') . '\)>\|%\|#<\=\d\+\|##\=\)'
    1              0.000006 let s:flag = '\%(:[p8~.htre]\|:g\=s\(.\).\{-\}\1.\{-\}\1\)'
    1              0.000008 let s:expand = '\%(\(' . s:var . '\)\(' . s:flag . '*\)\(:S\)\=\)'
                            
    1              0.000004 function! s:BufName(var) abort
                              if a:var ==# '%'
                                return bufname(get(s:TempState(), 'origin_bufnr', ''))
                              elseif a:var =~# '^#\d*$'
                                let nr = get(s:TempState(bufname(+a:var[1:-1])), 'origin_bufnr', '')
                                return bufname(nr ? nr : +a:var[1:-1])
                              else
                                return expand(a:var)
                              endif
                            endfunction
                            
    1              0.000003 function! s:ExpandVarLegacy(str) abort
                              if get(g:, 'fugitive_legacy_quoting', 1)
                                return substitute(a:str, '\\\ze[%#!]', '', 'g')
                              else
                                return a:str
                              endif
                            endfunction
                            
    1              0.000005 function! s:ExpandVar(other, var, flags, esc, ...) abort
                              let cwd = a:0 ? a:1 : getcwd()
                              if a:other =~# '^\'
                                return a:other[1:-1]
                              elseif a:other =~# '^'''
                                return s:ExpandVarLegacy(substitute(a:other[1:-2], "''", "'", "g"))
                              elseif a:other =~# '^"'
                                return s:ExpandVarLegacy(substitute(a:other[1:-2], '""', '"', "g"))
                              elseif a:other =~# '^!'
                                let buffer = s:BufName(len(a:other) > 1 ? '#'. a:other[1:-1] : '%')
                                let owner = s:Owner(buffer)
                                return len(owner) ? owner : '@'
                              elseif a:var ==# '<cfile>'
                                let bufname = expand('<cfile>')
                                if v:version >= 704 && get(maparg('<Plug><cfile>', 'c', 0, 1), 'expr')
                                  try
                                    let bufname = eval(maparg('<Plug><cfile>', 'c'))
                                    if bufname ==# "\<C-R>\<C-F>"
                                      let bufname = expand('<cfile>')
                                    endif
                                  catch
                                  endtry
                                endif
                              elseif a:var =~# '^<'
                                let bufname = s:BufName(a:var)
                              else
                                let bufname = fugitive#Real(s:BufName(a:var))
                              endif
                              let flags = a:flags
                              let file = s:DotRelative(bufname, cwd)
                              while len(flags)
                                let flag = matchstr(flags, s:flag)
                                let flags = strpart(flags, len(flag))
                                if flag ==# ':.'
                                  let file = s:DotRelative(fugitive#Real(file), cwd)
                                else
                                  let file = fnamemodify(file, flag)
                                endif
                              endwhile
                              let file = s:Slash(file)
                              if file =~# '^fugitive://'
                                let [dir, commit, file_candidate] = s:DirCommitFile(file)
                                let tree = s:Tree(dir)
                                if len(tree) && len(file_candidate)
                                  let file = (commit =~# '^.$' ? ':' : '') . commit . ':' .
                                        \ s:DotRelative(tree . file_candidate)
                                elseif empty(file_candidate) && commit !~# '^.$'
                                  let file = commit
                                endif
                              endif
                              return (len(a:esc) ? shellescape(file) : file)
                            endfunction
                            
    1              0.000003 function! s:Expand(rev, ...) abort
                              if a:rev =~# '^:[0-3]$'
                                let file = len(expand('%')) ? a:rev . ':%' : '%'
                              elseif a:rev ==# '>'
                                let file = '%'
                              elseif a:rev =~# '^>[~^]'
                                let file = len(expand('%')) ? '!' . a:rev[1:-1] . ':%' : '%'
                              elseif a:rev =~# '^>[> ]\@!'
                                let file = len(expand('%')) ? a:rev[1:-1] . ':%' : '%'
                              else
                                let file = a:rev
                              endif
                              return substitute(file,
                                    \ '\(\\[' . s:fnameescape . ']\|^\\[>+-]\|!\d*\)\|' . s:expand,
                                    \ '\=s:ExpandVar(submatch(1),submatch(2),submatch(3),"", a:0 ? a:1 : getcwd())', 'g')
                            endfunction
                            
    1              0.000003 function! fugitive#Expand(object) abort
                              return substitute(a:object,
                                    \ '\(\\[' . s:fnameescape . ']\|^\\[>+-]\|!\d*\)\|' . s:expand,
                                    \ '\=s:ExpandVar(submatch(1),submatch(2),submatch(3),submatch(5))', 'g')
                            endfunction
                            
    1              0.000003 function! s:SplitExpandChain(string, ...) abort
                              let list = []
                              let string = a:string
                              let dquote = '"\%([^"]\|""\|\\"\)*"\|'
                              let cwd = a:0 ? a:1 : getcwd()
                              while string =~# '\S'
                                if string =~# '^\s*|'
                                  return [list, substitute(string, '^\s*', '', '')]
                                endif
                                let arg = matchstr(string, '^\s*\%(' . dquote . '''[^'']*''\|\\.\|[^[:space:] |]\)\+')
                                let string = strpart(string, len(arg))
                                let arg = substitute(arg, '^\s\+', '', '')
                                if !exists('seen_separator')
                                  let arg = substitute(arg, '^\%([^:.][^:]*:\|^:\|^:[0-3]:\)\=\zs\.\.\=\%(/.*\)\=$',
                                        \ '\=s:DotRelative(s:Slash(simplify(getcwd() . "/" . submatch(0))), cwd)', '')
                                endif
                                let arg = substitute(arg,
                                      \ '\(' . dquote . '''\%(''''\|[^'']\)*''\|\\[' . s:fnameescape . ']\|^\\[>+-]\|!\d*\)\|' . s:expand,
                                      \ '\=s:ExpandVar(submatch(1),submatch(2),submatch(3),submatch(5), cwd)', 'g')
                                call add(list, arg)
                                if arg ==# '--'
                                  let seen_separator = 1
                                endif
                              endwhile
                              return [list, '']
                            endfunction
                            
    1              0.000004 let s:trees = {}
    1              0.000003 let s:indexes = {}
    1              0.000003 function! s:TreeInfo(dir, commit) abort
                              if a:commit =~# '^:\=[0-3]$'
                                let index = get(s:indexes, a:dir, [])
                                let newftime = getftime(fugitive#Find('.git/index', a:dir))
                                if get(index, 0, -1) < newftime
                                  let [lines, exec_error] = s:LinesError([a:dir, 'ls-files', '--stage', '--'])
                                  let s:indexes[a:dir] = [newftime, {'0': {}, '1': {}, '2': {}, '3': {}}]
                                  if exec_error
                                    return [{}, -1]
                                  endif
                                  for line in lines
                                    let [info, filename] = split(line, "\t")
                                    let [mode, sha, stage] = split(info, '\s\+')
                                    let s:indexes[a:dir][1][stage][filename] = [newftime, mode, 'blob', sha, -2]
                                    while filename =~# '/'
                                      let filename = substitute(filename, '/[^/]*$', '', '')
                                      let s:indexes[a:dir][1][stage][filename] = [newftime, '040000', 'tree', '', 0]
                                    endwhile
                                  endfor
                                endif
                                return [get(s:indexes[a:dir][1], a:commit[-1:-1], {}), newftime]
                              elseif a:commit =~# '^\x\{40,\}$'
                                if !has_key(s:trees, a:dir)
                                  let s:trees[a:dir] = {}
                                endif
                                if !has_key(s:trees[a:dir], a:commit)
                                  let [ftime, exec_error] = s:ChompError([a:dir, 'log', '-1', '--pretty=format:%ct', a:commit, '--'])
                                  if exec_error
                                    let s:trees[a:dir][a:commit] = [{}, -1]
                                    return s:trees[a:dir][a:commit]
                                  endif
                                  let s:trees[a:dir][a:commit] = [{}, +ftime]
                                  let [lines, exec_error] = s:LinesError([a:dir, 'ls-tree', '-rtl', '--full-name', a:commit, '--'])
                                  if exec_error
                                    return s:trees[a:dir][a:commit]
                                  endif
                                  for line in lines
                                    let [info, filename] = split(line, "\t")
                                    let [mode, type, sha, size] = split(info, '\s\+')
                                    let s:trees[a:dir][a:commit][0][filename] = [+ftime, mode, type, sha, +size, filename]
                                  endfor
                                endif
                                return s:trees[a:dir][a:commit]
                              endif
                              return [{}, -1]
                            endfunction
                            
    1              0.000006 function! s:PathInfo(url) abort
                              let [dir, commit, file] = s:DirCommitFile(a:url)
                              if empty(dir) || !get(g:, 'fugitive_file_api', 1)
                                return [-1, '000000', '', '', -1]
                              endif
                              let path = substitute(file[1:-1], '/*$', '', '')
                              let [tree, ftime] = s:TreeInfo(dir, commit)
                              let entry = empty(path) ? [ftime, '040000', 'tree', '', -1] : get(tree, path, [])
                              if empty(entry) || file =~# '/$' && entry[2] !=# 'tree'
                                return [-1, '000000', '', '', -1]
                              else
                                return entry
                              endif
                            endfunction
                            
    1              0.000010 function! fugitive#simplify(url) abort
                              let [dir, commit, file] = s:DirCommitFile(a:url)
                              if empty(dir)
                                return ''
                              endif
                              if file =~# '/\.\.\%(/\|$\)'
                                let tree = s:Tree(dir)
                                if len(tree)
                                  let path = simplify(tree . file)
                                  if strpart(path . '/', 0, len(tree) + 1) !=# tree . '/'
                                    return FugitiveVimPath(path)
                                  endif
                                endif
                              endif
                              return FugitiveVimPath('fugitive://' . simplify(dir) . '//' . commit . simplify(file))
                            endfunction
                            
    1              0.000003 function! fugitive#resolve(url) abort
                              let url = fugitive#simplify(a:url)
                              if url =~? '^fugitive:'
                                return url
                              else
                                return resolve(url)
                              endif
                            endfunction
                            
    1              0.000004 function! fugitive#getftime(url) abort
                              return s:PathInfo(a:url)[0]
                            endfunction
                            
    1              0.000003 function! fugitive#getfsize(url) abort
                              let entry = s:PathInfo(a:url)
                              if entry[4] == -2 && entry[2] ==# 'blob' && len(entry[3])
                                let dir = s:DirCommitFile(a:url)[0]
                                let entry[4] = +s:ChompDefault(-1, [dir, 'cat-file', '-s', entry[3]])
                              endif
                              return entry[4]
                            endfunction
                            
    1              0.000003 function! fugitive#getftype(url) abort
                              return get({'tree': 'dir', 'blob': 'file'}, s:PathInfo(a:url)[2], '')
                            endfunction
                            
    1              0.000003 function! fugitive#filereadable(url) abort
                              return s:PathInfo(a:url)[2] ==# 'blob'
                            endfunction
                            
    1              0.000003 function! fugitive#filewritable(url) abort
                              let [dir, commit, file] = s:DirCommitFile(a:url)
                              if commit !~# '^\d$' || !filewritable(fugitive#Find('.git/index', dir))
                                return 0
                              endif
                              return s:PathInfo(a:url)[2] ==# 'blob' ? 1 : 2
                            endfunction
                            
    1              0.000003 function! fugitive#isdirectory(url) abort
                              return s:PathInfo(a:url)[2] ==# 'tree'
                            endfunction
                            
    1              0.000003 function! fugitive#getfperm(url) abort
                              let [dir, commit, file] = s:DirCommitFile(a:url)
                              let perm = getfperm(dir)
                              let fperm = s:PathInfo(a:url)[1]
                              if fperm ==# '040000'
                                let fperm = '000755'
                              endif
                              if fperm !~# '[15]'
                                let perm = tr(perm, 'x', '-')
                              endif
                              if fperm !~# '[45]$'
                                let perm = tr(perm, 'rw', '--')
                              endif
                              if commit !~# '^\d$'
                                let perm = tr(perm, 'w', '-')
                              endif
                              return perm ==# '---------' ? '' : perm
                            endfunction
                            
    1              0.000007 function s:UpdateIndex(dir, info) abort
                              let info = join(a:info[0:-2]) . "\t" . a:info[-1] . "\n"
                              let [error, exec_error] = s:SystemError([a:dir, 'update-index', '--index-info'], info)
                              return !exec_error ? '' : len(error) ? error : 'fugitive: unknown update-index error'
                            endfunction
                            
    1              0.000005 function! fugitive#setfperm(url, perm) abort
                              let [dir, commit, file] = s:DirCommitFile(a:url)
                              let entry = s:PathInfo(a:url)
                              let perm = fugitive#getfperm(a:url)
                              if commit !~# '^\d$' || entry[2] !=# 'blob' ||
                                  \ substitute(perm, 'x', '-', 'g') !=# substitute(a:perm, 'x', '-', 'g')
                                return -2
                              endif
                              let error = s:UpdateIndex(dir, [a:perm =~# 'x' ? '000755' : '000644', entry[3], commit, file[1:-1]])
                              return len(error) ? -1 : 0
                            endfunction
                            
    1              0.000005 function! s:TempCmd(out, cmd) abort
                              try
                                let cmd = (type(a:cmd) == type([]) ? fugitive#Prepare(a:cmd) : a:cmd)
                                let redir = ' > ' . a:out
                                if (s:winshell() || &shellcmdflag ==# '-Command') && !has('nvim')
                                  let cmd_escape_char = &shellxquote == '(' ?  '^' : '^^^'
                                  return s:SystemError('cmd /c "' . s:gsub(cmd, '[<>%]', cmd_escape_char . '&') . redir . '"')
                                elseif &shell =~# 'fish'
                                  return s:SystemError(' begin;' . cmd . redir . ';end ')
                                else
                                  return s:SystemError(' (' . cmd . redir . ') ')
                                endif
                              endtry
                            endfunction
                            
    1              0.000011 if !exists('s:blobdirs')
    1              0.000007   let s:blobdirs = {}
    1              0.000003 endif
    1              0.000013 function! s:BlobTemp(url) abort
                              let [dir, commit, file] = s:DirCommitFile(a:url)
                              if empty(file)
                                return ''
                              endif
                              if !has_key(s:blobdirs, dir)
                                let s:blobdirs[dir] = tempname()
                              endif
                              let tempfile = s:blobdirs[dir] . '/' . commit . file
                              let tempparent = fnamemodify(tempfile, ':h')
                              if !isdirectory(tempparent)
                                call mkdir(tempparent, 'p')
                              endif
                              if commit =~# '^\d$' || !filereadable(tempfile)
                                let rev = s:DirRev(a:url)[1]
                                let exec_error = s:TempCmd(tempfile, [dir, 'cat-file', 'blob', rev])[1]
                                if exec_error
                                  call delete(tempfile)
                                  return ''
                                endif
                              endif
                              return s:Resolve(tempfile)
                            endfunction
                            
    1              0.000002 function! fugitive#readfile(url, ...) abort
                              let entry = s:PathInfo(a:url)
                              if entry[2] !=# 'blob'
                                return []
                              endif
                              let temp = s:BlobTemp(a:url)
                              if empty(temp)
                                return []
                              endif
                              return call('readfile', [temp] + a:000)
                            endfunction
                            
    1              0.000003 function! fugitive#writefile(lines, url, ...) abort
                              let url = type(a:url) ==# type('') ? a:url : ''
                              let [dir, commit, file] = s:DirCommitFile(url)
                              let entry = s:PathInfo(url)
                              if commit =~# '^\d$' && entry[2] !=# 'tree'
                                let temp = tempname()
                                if a:0 && a:1 =~# 'a' && entry[2] ==# 'blob'
                                  call writefile(fugitive#readfile(url, 'b'), temp, 'b')
                                endif
                                call call('writefile', [a:lines, temp] + a:000)
                                let [hash, exec_error] = s:ChompError([dir, 'hash-object', '-w', temp])
                                let mode = len(entry[1]) ? entry[1] : '100644'
                                if !exec_error && hash =~# '^\x\{40,\}$'
                                  let error = s:UpdateIndex(dir, [mode, hash, commit, file[1:-1]])
                                  if empty(error)
                                    return 0
                                  endif
                                endif
                              endif
                              return call('writefile', [a:lines, a:url] + a:000)
                            endfunction
                            
    1              0.000020 let s:globsubs = {
                                  \ '/**/': '/\%([^./][^/]*/\)*',
                                  \ '/**': '/\%([^./][^/]\+/\)*[^./][^/]*',
                                  \ '**/': '[^/]*\%(/[^./][^/]*\)*',
                                  \ '**': '.*',
                                  \ '/*': '/[^/.][^/]*',
                                  \ '*': '[^/]*',
                                  \ '?': '[^/]'}
    1              0.000004 function! fugitive#glob(url, ...) abort
                              let [dirglob, commit, glob] = s:DirCommitFile(a:url)
                              let append = matchstr(glob, '/*$')
                              let glob = substitute(glob, '/*$', '', '')
                              let pattern = '^' . substitute(glob, '/\=\*\*/\=\|/\=\*\|[.?\$]\|^^', '\=get(s:globsubs, submatch(0), "\\" . submatch(0))', 'g')[1:-1] . '$'
                              let results = []
                              for dir in dirglob =~# '[*?]' ? split(glob(dirglob), "\n") : [dirglob]
                                if empty(dir) || !get(g:, 'fugitive_file_api', 1) || !filereadable(fugitive#Find('.git/HEAD', dir))
                                  continue
                                endif
                                let files = items(s:TreeInfo(dir, commit)[0])
                                if len(append)
                                  call filter(files, 'v:val[1][2] ==# "tree"')
                                endif
                                call map(files, 'v:val[0]')
                                call filter(files, 'v:val =~# pattern')
                                let prepend = 'fugitive://' . dir . '//' . substitute(commit, '^:', '', '') . '/'
                                call sort(files)
                                call map(files, 'FugitiveVimPath(prepend . v:val . append)')
                                call extend(results, files)
                              endfor
                              if a:0 > 1 && a:2
                                return results
                              else
                                return join(results, "\n")
                              endif
                            endfunction
                            
    1              0.000004 function! fugitive#delete(url, ...) abort
                              let [dir, commit, file] = s:DirCommitFile(a:url)
                              if a:0 && len(a:1) || commit !~# '^\d$'
                                return -1
                              endif
                              let entry = s:PathInfo(a:url)
                              if entry[2] !=# 'blob'
                                return -1
                              endif
                              let error = s:UpdateIndex(dir, ['000000', '0000000000000000000000000000000000000000', commit, file[1:-1]])
                              return len(error) ? -1 : 0
                            endfunction
                            
                            " Section: Buffer Object
                            
    1              0.000004 let s:buffer_prototype = {}
                            
    1              0.000003 function! fugitive#buffer(...) abort
                              let buffer = {'#': bufnr(a:0 ? a:1 : '%')}
                              call extend(buffer, s:buffer_prototype, 'keep')
                              return buffer
                            endfunction
                            
    1              0.000004 function! s:buffer_repo() dict abort
                              return fugitive#repo(self['#'])
                            endfunction
                            
    1              0.000003 function! s:buffer_type(...) dict abort
                              return 'see b:fugitive_type'
                            endfunction
                            
    1   0.000712   0.000033 call s:add_methods('buffer', ['repo', 'type'])
                            
                            " Section: Completion
                            
    1              0.000008 function! s:FilterEscape(items, ...) abort
                              let items = copy(a:items)
                              call map(items, 's:fnameescape(v:val)')
                              if a:0 && type(a:1) == type('')
                                let cmp = s:FileIgnoreCase(1) ? '==?' : '==#'
                                call filter(items, 'strpart(v:val, 0, strlen(a:1)) ' . cmp . ' a:1')
                              endif
                              return items
                            endfunction
                            
    1              0.000006 function! s:GlobComplete(lead, pattern, ...) abort
                              if a:lead ==# '/'
                                return []
                              elseif v:version >= 704
                                let results = glob(a:lead . a:pattern, a:0 ? a:1 : 0, 1)
                              else
                                let results = split(glob(a:lead . a:pattern), "\n")
                              endif
                              call map(results, 'v:val !~# "/$" && isdirectory(v:val) ? v:val."/" : v:val')
                              call map(results, 'v:val[ strlen(a:lead) : -1 ]')
                              return results
                            endfunction
                            
    1              0.000006 function! fugitive#CompletePath(base, ...) abort
                              let dir = a:0 == 1 ? a:1 : a:0 >= 3 ? a:3 : s:Dir()
                              let stripped = matchstr(a:base, '^\%(:/:\=\|:(top)\|:(top,literal)\|:(literal,top)\)')
                              let base = strpart(a:base, len(stripped))
                              if len(stripped) || a:0 < 4
                                let root = s:Tree(dir)
                              else
                                let root = a:4
                              endif
                              if root !=# '/' && len(root)
                                let root .= '/'
                              endif
                              if empty(stripped)
                                let stripped = matchstr(a:base, '^\%(:(literal)\|:\)')
                                let base = strpart(a:base, len(stripped))
                              endif
                              if base =~# '^\.git/'
                                let pattern = s:gsub(base[5:-1], '/', '*&').'*'
                                let matches = s:GlobComplete(dir . '/', pattern)
                                let cdir = fugitive#CommonDir(dir)
                                if len(cdir) && s:cpath(dir) !=# s:cpath(cdir)
                                  call extend(matches, s:GlobComplete(cdir . '/', pattern))
                                endif
                                call s:Uniq(matches)
                                call map(matches, "'.git/' . v:val")
                              elseif base =~# '^\~/'
                                let matches = map(s:GlobComplete(expand('~/'), base[2:-1] . '*'), '"~/" . v:val')
                              elseif a:base =~# '^/\|^\a\+:\|^\.\.\=/'
                                let matches = s:GlobComplete('', base . '*')
                              elseif len(root)
                                let matches = s:GlobComplete(root, s:gsub(base, '/', '*&').'*')
                              else
                                let matches = []
                              endif
                              call map(matches, 's:fnameescape(s:Slash(stripped . v:val))')
                              return matches
                            endfunction
                            
    1              0.000013 function! fugitive#PathComplete(...) abort
                              return call('fugitive#CompletePath', a:000)
                            endfunction
                            
    1              0.000004 function! s:CompleteHeads(dir) abort
                              if empty(a:dir)
                                return []
                              endif
                              let dir = fugitive#Find('.git/', a:dir)
                              return sort(filter(['HEAD', 'FETCH_HEAD', 'ORIG_HEAD'] + s:merge_heads, 'filereadable(dir . v:val)')) +
                                    \ sort(s:LinesError([a:dir, 'rev-parse', '--symbolic', '--branches', '--tags', '--remotes'])[0])
                            endfunction
                            
    1              0.000003 function! fugitive#CompleteObject(base, ...) abort
                              let dir = a:0 == 1 ? a:1 : a:0 >= 3 ? a:3 : s:Dir()
                              let tree = s:Tree(dir)
                              let cwd = getcwd()
                              let subdir = ''
                              if len(tree) && s:cpath(tree . '/', cwd[0 : len(tree)])
                                let subdir = strpart(cwd, len(tree) + 1) . '/'
                              endif
                            
                              if a:base =~# '^\.\=/\|^:(' || a:base !~# ':'
                                let results = []
                                if a:base =~# '^refs/'
                                  let results += map(s:GlobComplete(fugitive#CommonDir(dir) . '/', a:base . '*'), 's:Slash(v:val)')
                                  call map(results, 's:fnameescape(v:val)')
                                elseif a:base !~# '^\.\=/\|^:('
                                  let heads = s:CompleteHeads(dir)
                                  if filereadable(fugitive#Find('.git/refs/stash', dir))
                                    let heads += ["stash"]
                                    let heads += sort(s:LinesError(["stash","list","--pretty=format:%gd"], dir)[0])
                                  endif
                                  let results += s:FilterEscape(heads, a:base)
                                endif
                                let results += a:0 == 1 || a:0 >= 3 ? fugitive#CompletePath(a:base, 0, '', dir, a:0 >= 4 ? a:4 : tree) : fugitive#CompletePath(a:base)
                                return results
                            
                              elseif a:base =~# '^:'
                                let entries = s:LinesError(['ls-files','--stage'], dir)[0]
                                if a:base =~# ':\./'
                                  call map(entries, 'substitute(v:val, "\\M\t\\zs" . subdir, "./", "")')
                                endif
                                call map(entries,'s:sub(v:val,".*(\\d)\\t(.*)",":\\1:\\2")')
                                if a:base !~# '^:[0-3]\%(:\|$\)'
                                  call filter(entries,'v:val[1] == "0"')
                                  call map(entries,'v:val[2:-1]')
                                endif
                            
                              else
                                let parent = matchstr(a:base, '.*[:/]')
                                let entries = s:LinesError(['ls-tree', substitute(parent,  ':\zs\./', '\=subdir', '')], dir)[0]
                                call map(entries,'s:sub(v:val,"^04.*\\zs$","/")')
                                call map(entries,'parent.s:sub(v:val,".*\t","")')
                              endif
                              return s:FilterEscape(entries, a:base)
                            endfunction
                            
    1              0.000005 function! s:CompleteSub(subcommand, A, L, P, ...) abort
                              let pre = strpart(a:L, 0, a:P)
                              if pre =~# ' -- '
                                return fugitive#CompletePath(a:A)
                              elseif a:A =~# '^-' || a:A is# 0
                                return s:FilterEscape(split(s:ChompDefault('', a:subcommand, '--git-completion-helper'), ' '), a:A)
                              elseif !a:0
                                return fugitive#CompleteObject(a:A, s:Dir())
                              elseif type(a:1) == type(function('tr'))
                                return call(a:1, [a:A, a:L, a:P] + (a:0 > 1 ? a:2 : []))
                              else
                                return s:FilterEscape(a:1, a:A)
                              endif
                            endfunction
                            
    1              0.000004 function! s:CompleteRevision(A, L, P, ...) abort
                              return s:FilterEscape(s:CompleteHeads(a:0 ? a:1 : s:Dir()), a:A)
                            endfunction
                            
    1              0.000003 function! s:CompleteRemote(A, L, P, ...) abort
                              let dir = a:0 ? a:1 : s:Dir()
                              let remote = matchstr(a:L, '\u\w*[! ] *.\{-\}\s\@<=\zs[^-[:space:]]\S*\ze ')
                              if !empty(remote)
                                let matches = s:LinesError([dir, 'ls-remote', remote])[0]
                                call filter(matches, 'v:val =~# "\t" && v:val !~# "{"')
                                call map(matches, 's:sub(v:val, "^.*\t%(refs/%(heads/|tags/)=)=", "")')
                              else
                                let matches = s:LinesError([dir, 'remote'])[0]
                              endif
                              return s:FilterEscape(matches, a:A)
                            endfunction
                            
                            " Section: Buffer auto-commands
                            
    1              0.000004 function! s:ReplaceCmd(cmd) abort
                              let temp = tempname()
                              let [err, exec_error] = s:TempCmd(temp, a:cmd)
                              if exec_error
                                call s:throw((len(err) ? err : 'unknown error running ' . a:cmd))
                              endif
                              setlocal noswapfile
                              silent exe 'lockmarks keepalt 0read ++edit' s:fnameescape(temp)
                              if &foldenable && foldlevel('$') > 0
                                set nofoldenable
                                silent keepjumps $delete _
                                set foldenable
                              else
                                silent keepjumps $delete _
                              endif
                              call delete(temp)
                              if s:cpath(fnamemodify(bufname('$'), ':p'), temp)
                                silent! execute bufnr('$') . 'bwipeout'
                              endif
                            endfunction
                            
    1              0.000004 function! s:QueryLog(refspec) abort
                              let lines = s:LinesError(['log', '-n', '256', '--pretty=format:%h%x09%s', a:refspec, '--'])[0]
                              call map(lines, 'split(v:val, "\t", 1)')
                              call map(lines, '{"type": "Log", "commit": v:val[0], "subject": join(v:val[1 : -1], "\t")}')
                              return lines
                            endfunction
                            
    1              0.000003 function! s:FormatLog(dict) abort
                              return a:dict.commit . ' ' . a:dict.subject
                            endfunction
                            
    1              0.000003 function! s:FormatRebase(dict) abort
                              return a:dict.status . ' ' . a:dict.commit . ' ' . a:dict.subject
                            endfunction
                            
    1              0.000003 function! s:FormatFile(dict) abort
                              return a:dict.status . ' ' . a:dict.filename
                            endfunction
                            
    1              0.000003 function! s:Format(val) abort
                              if type(a:val) == type({})
                                return s:Format{a:val.type}(a:val)
                              elseif type(a:val) == type([])
                                return map(copy(a:val), 's:Format(v:val)')
                              else
                                return '' . a:val
                              endif
                            endfunction
                            
    1              0.000003 function! s:AddHeader(key, value) abort
                              if empty(a:value)
                                return
                              endif
                              let before = 1
                              while !empty(getline(before))
                                let before += 1
                              endwhile
                              call append(before - 1, [a:key . ':' . (len(a:value) ? ' ' . a:value : '')])
                              if before == 1 && line('$') == 2
                                silent keepjumps 2delete _
                              endif
                            endfunction
                            
    1              0.000003 function! s:AddSection(label, lines, ...) abort
                              let note = a:0 ? a:1 : ''
                              if empty(a:lines) && empty(note)
                                return
                              endif
                              call append(line('$'), ['', a:label . (len(note) ? ': ' . note : ' (' . len(a:lines) . ')')] + s:Format(a:lines))
                            endfunction
                            
    1              0.000024 let s:rebase_abbrevs = {
                                  \ 'p': 'pick',
                                  \ 'r': 'reword',
                                  \ 'e': 'edit',
                                  \ 's': 'squash',
                                  \ 'f': 'fixup',
                                  \ 'x': 'exec',
                                  \ 'd': 'drop',
                                  \ 'l': 'label',
                                  \ 't': 'reset',
                                  \ 'm': 'merge',
                                  \ 'b': 'break',
                                  \ }
                            
    1              0.000003 function! fugitive#BufReadStatus() abort
                              let amatch = s:Slash(expand('%:p'))
                              let b:fugitive_type = 'index'
                              unlet! b:fugitive_reltime
                              try
                                silent doautocmd BufReadPre
                                let config = fugitive#Config()
                            
                                let cmd = [fnamemodify(amatch, ':h')]
                                setlocal noro ma nomodeline buftype=nowrite
                                if s:cpath(fnamemodify($GIT_INDEX_FILE !=# '' ? $GIT_INDEX_FILE : fugitive#Find('.git/index'), ':p')) !=# s:cpath(amatch)
                                  let cmd += ['-c', 'GIT_INDEX_FILE=' . amatch]
                                endif
                            
                                if fugitive#GitVersion(2, 15)
                                  call add(cmd, '--no-optional-locks')
                                endif
                            
                                let b:fugitive_files = {'Staged': {}, 'Unstaged': {}}
                                let [staged, unstaged, untracked] = [[], [], []]
                                let props = {}
                            
                                let pull = ''
                                if empty(s:Tree())
                                  let branch = FugitiveHead(0)
                                  let head = FugitiveHead(11)
                                elseif fugitive#GitVersion(2, 11)
                                  let cmd += ['status', '--porcelain=v2', '-bz']
                                  let [output, message, exec_error] = s:NullError(cmd)
                                  if exec_error
                                    throw 'fugitive: ' . message
                                  endif
                            
                                  let i = 0
                                  while i < len(output)
                                    let line = output[i]
                                    let prop = matchlist(line, '# \(\S\+\) \(.*\)')
                                    if len(prop)
                                      let props[prop[1]] = prop[2]
                                    elseif line[0] ==# '?'
                                      call add(untracked, {'type': 'File', 'status': line[0], 'filename': line[2:-1]})
                                    elseif line[0] !=# '#'
                                      if line[0] ==# 'u'
                                        let file = matchstr(line, '^.\{37\} \x\{40,\} \x\{40,\} \x\{40,\} \zs.*$')
                                      else
                                        let file = matchstr(line, '^.\{30\} \x\{40,\} \x\{40,\} \zs.*$')
                                      endif
                                      if line[0] ==# '2'
                                        let i += 1
                                        let file = matchstr(file, ' \zs.*')
                                        let files = output[i] . ' -> ' . file
                                      else
                                        let files = file
                                      endif
                                      let sub = matchstr(line, '^[12u] .. \zs....')
                                      if line[2] !=# '.'
                                        call add(staged, {'type': 'File', 'status': line[2], 'filename': files, 'submodule': sub})
                                      endif
                                      if line[3] !=# '.'
                                        let sub = matchstr(line, '^[12u] .. \zs....')
                                        call add(unstaged, {'type': 'File', 'status': get({'C':'M','M':'?','U':'?'}, matchstr(sub, 'S\.*\zs[CMU]'), line[3]), 'filename': file, 'submodule': sub})
                                      endif
                                    endif
                                    let i += 1
                                  endwhile
                                  let branch = substitute(get(props, 'branch.head', '(unknown)'), '\C^(\%(detached\|unknown\))$', '', '')
                                  if len(branch)
                                    let head = branch
                                  elseif has_key(props, 'branch.oid')
                                    let head = props['branch.oid'][0:10]
                                  else
                                    let head = FugitiveHead(11)
                                  endif
                                  let pull = get(props, 'branch.upstream', '')
                                else " git < 2.11
                                  let cmd += ['status', '--porcelain', '-bz']
                                  let [output, message, exec_error] = s:NullError(cmd)
                                  if exec_error
                                    throw 'fugitive: ' . message
                                  endif
                            
                                  while get(output, 0, '') =~# '^\l\+:'
                                    call remove(output, 0)
                                  endwhile
                                  let head = matchstr(output[0], '^## \zs\S\+\ze\%($\| \[\)')
                                  if head =~# '\.\.\.'
                                    let [head, pull] = split(head, '\.\.\.')
                                    let branch = head
                                  elseif head ==# 'HEAD' || empty(head)
                                    let head = FugitiveHead(11)
                                    let branch = ''
                                  else
                                    let branch = head
                                  endif
                            
                                  let i = 0
                                  while i < len(output)
                                    let line = output[i]
                                    let file = line[3:-1]
                                    let files = file
                                    let i += 1
                                    if line[2] !=# ' '
                                      continue
                                    endif
                                    if line[0:1] =~# '[RC]'
                                      let files = output[i] . ' -> ' . file
                                      let i += 1
                                    endif
                                    if line[0] !~# '[ ?!#]'
                                      call add(staged, {'type': 'File', 'status': line[0], 'filename': files, 'submodule': ''})
                                    endif
                                    if line[0:1] ==# '??'
                                      call add(untracked, {'type': 'File', 'status': line[1], 'filename': files})
                                    elseif line[1] !~# '[ !#]'
                                      call add(unstaged, {'type': 'File', 'status': line[1], 'filename': file, 'submodule': ''})
                                    endif
                                  endwhile
                                endif
                            
                                for dict in staged
                                  let b:fugitive_files['Staged'][dict.filename] = dict
                                endfor
                                for dict in unstaged
                                  let b:fugitive_files['Unstaged'][dict.filename] = dict
                                endfor
                            
                                let pull_type = 'Pull'
                                if len(pull)
                                  let rebase = FugitiveConfigGet('branch.' . branch . '.rebase', config)
                                  if empty(rebase)
                                    let rebase = FugitiveConfigGet('pull.rebase', config)
                                  endif
                                  if rebase =~# '^\%(true\|yes\|on\|1\|interactive\|merges\|preserve\)$'
                                    let pull_type = 'Rebase'
                                  elseif rebase =~# '^\%(false\|no|off\|0\|\)$'
                                    let pull_type = 'Merge'
                                  endif
                                endif
                            
                                let push_remote = FugitiveConfigGet('branch.' . branch . '.pushRemote', config)
                                if empty(push_remote)
                                  let push_remote = FugitiveConfigGet('remote.pushDefault', config)
                                endif
                                let fetch_remote = FugitiveConfigGet('branch.' . branch . '.remote', config)
                                if empty(fetch_remote)
                                  let fetch_remote = 'origin'
                                endif
                                if empty(push_remote)
                                  let push_remote = fetch_remote
                                endif
                            
                                let push_default = FugitiveConfigGet('push.default', config)
                                if empty(push_default)
                                  let push_default = fugitive#GitVersion(2) ? 'simple' : 'matching'
                                endif
                                if push_default ==# 'upstream'
                                  let push = pull
                                else
                                  let push = len(branch) ? (push_remote ==# '.' ? '' : push_remote . '/') . branch : ''
                                endif
                            
                                if isdirectory(fugitive#Find('.git/rebase-merge/'))
                                  let rebasing_dir = fugitive#Find('.git/rebase-merge/')
                                elseif isdirectory(fugitive#Find('.git/rebase-apply/'))
                                  let rebasing_dir = fugitive#Find('.git/rebase-apply/')
                                endif
                            
                                let rebasing = []
                                let rebasing_head = 'detached HEAD'
                                if exists('rebasing_dir') && filereadable(rebasing_dir . 'git-rebase-todo')
                                  let rebasing_head = substitute(readfile(rebasing_dir . 'head-name')[0], '\C^refs/heads/', '', '')
                                  let len = 11
                                  let lines = readfile(rebasing_dir . 'git-rebase-todo')
                                  for line in lines
                                    let hash = matchstr(line, '^[^a-z].*\s\zs[0-9a-f]\{4,\}\ze\.\.')
                                    if len(hash)
                                      let len = len(hash)
                                      break
                                    endif
                                  endfor
                                  if getfsize(rebasing_dir . 'done') > 0
                                    let done = readfile(rebasing_dir . 'done')
                                    call map(done, 'substitute(v:val, ''^\l\+\>'', "done", "")')
                                    let done[-1] = substitute(done[-1], '^\l\+\>', 'stop', '')
                                    let lines = done + lines
                                  endif
                                  call reverse(lines)
                                  for line in lines
                                    let match = matchlist(line, '^\(\l\+\)\s\+\(\x\{4,\}\)\s\+\(.*\)')
                                    if len(match) && match[1] !~# 'exec\|merge\|label'
                                      call add(rebasing, {'type': 'Rebase', 'status': get(s:rebase_abbrevs, match[1], match[1]), 'commit': strpart(match[2], 0, len), 'subject': match[3]})
                                    endif
                                  endfor
                                endif
                            
                                let diff = {'Staged': [], 'Unstaged': []}
                                if len(staged)
                                  let diff['Staged'] =
                                      \ s:LinesError(['diff', '--color=never', '--no-ext-diff', '--no-prefix', '--cached'])[0]
                                endif
                                if len(unstaged)
                                  let diff['Unstaged'] =
                                      \ s:LinesError(['diff', '--color=never', '--no-ext-diff', '--no-prefix'])[0]
                                endif
                                let b:fugitive_diff = diff
                                let expanded = get(b:, 'fugitive_expanded', {'Staged': {}, 'Unstaged': {}})
                                let b:fugitive_expanded = {'Staged': {}, 'Unstaged': {}}
                            
                                silent keepjumps %delete_
                            
                                call s:AddHeader('Head', head)
                                call s:AddHeader(pull_type, pull)
                                if push !=# pull
                                  call s:AddHeader('Push', push)
                                endif
                                if empty(s:Tree())
                                  call s:AddHeader('Bare', 'yes')
                                endif
                                if get(FugitiveConfigGetAll('advice.statusHints', config), 0, 'true') !~# '^\%(false\|no|off\|0\|\)$'
                                  call s:AddHeader('Help', 'g?')
                                endif
                            
                                call s:AddSection('Rebasing ' . rebasing_head, rebasing)
                                call s:AddSection('Untracked', untracked)
                                call s:AddSection('Unstaged', unstaged)
                                let unstaged_end = len(unstaged) ? line('$') : 0
                                call s:AddSection('Staged', staged)
                                let staged_end = len(staged) ? line('$') : 0
                            
                                if len(pull) && get(props, 'branch.ab') !~# ' -0$'
                                  call s:AddSection('Unpulled from ' . pull, s:QueryLog(head . '..' . pull))
                                endif
                                if len(push) && push !=# pull
                                  call s:AddSection('Unpulled from ' . push, s:QueryLog(head . '..' . push))
                                endif
                                if len(pull) && push !=# pull
                                  call s:AddSection('Unpushed to ' . pull, s:QueryLog(pull . '..' . head))
                                endif
                                if len(push) && !(push ==# pull && get(props, 'branch.ab') =~# '^+0 ')
                                  call s:AddSection('Unpushed to ' . push, s:QueryLog(push . '..' . head))
                                endif
                            
                                setlocal nomodified readonly noswapfile
                                silent doautocmd BufReadPost
                                setlocal nomodifiable
                                if &bufhidden ==# ''
                                  setlocal bufhidden=delete
                                endif
                                let b:dispatch = '-dir=' . fnameescape(len(s:Tree()) ? s:Tree() : s:Dir()) . ' ' . s:GitShellCmd() . ' fetch --all'
                                call fugitive#MapJumps()
                                call s:Map('n', '-', ":<C-U>execute <SID>Do('Toggle',0)<CR>", '<silent>')
                                call s:Map('x', '-', ":<C-U>execute <SID>Do('Toggle',1)<CR>", '<silent>')
                                call s:Map('n', 's', ":<C-U>execute <SID>Do('Stage',0)<CR>", '<silent>')
                                call s:Map('x', 's', ":<C-U>execute <SID>Do('Stage',1)<CR>", '<silent>')
                                call s:Map('n', 'u', ":<C-U>execute <SID>Do('Unstage',0)<CR>", '<silent>')
                                call s:Map('x', 'u', ":<C-U>execute <SID>Do('Unstage',1)<CR>", '<silent>')
                                call s:Map('n', 'U', ":exe <SID>EchoExec('reset', '-q')<CR>", '<silent>')
                                call s:MapMotion('gu', "exe <SID>StageJump(v:count, 'Untracked', 'Unstaged')")
                                call s:MapMotion('gU', "exe <SID>StageJump(v:count, 'Unstaged', 'Untracked')")
                                call s:MapMotion('gs', "exe <SID>StageJump(v:count, 'Staged')")
                                call s:MapMotion('gp', "exe <SID>StageJump(v:count, 'Unpushed')")
                                call s:MapMotion('gP', "exe <SID>StageJump(v:count, 'Unpulled')")
                                call s:MapMotion('gr', "exe <SID>StageJump(v:count, 'Rebasing')")
                                call s:Map('n', 'C', ":echoerr 'fugitive: C has been removed in favor of cc'<CR>", '<silent>')
                                call s:Map('n', 'a', ":<C-U>execute <SID>Do('Toggle',0)<CR>", '<silent>')
                                call s:Map('n', 'i', ":<C-U>execute <SID>NextExpandedHunk(v:count1)<CR>", '<silent>')
                                call s:Map('n', "=", ":<C-U>execute <SID>StageInline('toggle',line('.'),v:count)<CR>", '<silent>')
                                call s:Map('n', "<", ":<C-U>execute <SID>StageInline('hide',  line('.'),v:count)<CR>", '<silent>')
                                call s:Map('n', ">", ":<C-U>execute <SID>StageInline('show',  line('.'),v:count)<CR>", '<silent>')
                                call s:Map('x', "=", ":<C-U>execute <SID>StageInline('toggle',line(\"'<\"),line(\"'>\")-line(\"'<\")+1)<CR>", '<silent>')
                                call s:Map('x', "<", ":<C-U>execute <SID>StageInline('hide',  line(\"'<\"),line(\"'>\")-line(\"'<\")+1)<CR>", '<silent>')
                                call s:Map('x', ">", ":<C-U>execute <SID>StageInline('show',  line(\"'<\"),line(\"'>\")-line(\"'<\")+1)<CR>", '<silent>')
                                call s:Map('n', 'D', ":echoerr 'fugitive: D has been removed in favor of dd'<CR>", '<silent>')
                                call s:Map('n', 'dd', ":<C-U>execute <SID>StageDiff('Gdiffsplit')<CR>", '<silent>')
                                call s:Map('n', 'dh', ":<C-U>execute <SID>StageDiff('Ghdiffsplit')<CR>", '<silent>')
                                call s:Map('n', 'ds', ":<C-U>execute <SID>StageDiff('Ghdiffsplit')<CR>", '<silent>')
                                call s:Map('n', 'dp', ":<C-U>execute <SID>StageDiffEdit()<CR>", '<silent>')
                                call s:Map('n', 'dv', ":<C-U>execute <SID>StageDiff('Gvdiffsplit')<CR>", '<silent>')
                                call s:Map('n', 'd?', ":<C-U>help fugitive_d<CR>", '<silent>')
                                call s:Map('n', 'P', ":<C-U>execute <SID>StagePatch(line('.'),line('.')+v:count1-1)<CR>", '<silent>')
                                call s:Map('x', 'P', ":<C-U>execute <SID>StagePatch(line(\"'<\"),line(\"'>\"))<CR>", '<silent>')
                                call s:Map('n', 'p', ":<C-U>if v:count<Bar>silent exe <SID>GF('pedit')<Bar>else<Bar>echoerr 'Use = for inline diff, P for :Git add/reset --patch, 1p for :pedit'<Bar>endif<CR>", '<silent>')
                                call s:Map('x', 'p', ":<C-U>execute <SID>StagePatch(line(\"'<\"),line(\"'>\"))<CR>", '<silent>')
                                call s:Map('n', 'I', ":<C-U>execute <SID>StagePatch(line('.'),line('.'))<CR>", '<silent>')
                                call s:Map('x', 'I', ":<C-U>execute <SID>StagePatch(line(\"'<\"),line(\"'>\"))<CR>", '<silent>')
                                if empty(mapcheck('q', 'n'))
                                  nnoremap <buffer> <silent> q :echoerr "fugitive: q removed in favor of gq (or :q)"<CR>
                                endif
                                call s:Map('n', 'gq', ":<C-U>if bufnr('$') == 1<Bar>quit<Bar>else<Bar>bdelete<Bar>endif<CR>", '<silent>')
                                call s:Map('n', 'R', ":echohl WarningMsg<Bar>echo 'Reloading is automatic.  Use :e to force'<Bar>echohl NONE<CR>", '<silent>')
                                call s:Map('n', 'g<Bar>', ":<C-U>echoerr 'Changed to X'<CR>", '<silent>')
                                call s:Map('x', 'g<Bar>', ":<C-U>echoerr 'Changed to X'<CR>", '<silent>')
                                call s:Map('n', 'X', ":<C-U>execute <SID>StageDelete(line('.'), 0, v:count)<CR>", '<silent>')
                                call s:Map('x', 'X', ":<C-U>execute <SID>StageDelete(line(\"'<\"), line(\"'>\"), v:count)<CR>", '<silent>')
                                call s:Map('n', 'gI', ":<C-U>execute <SID>StageIgnore(line('.'), line('.'), v:count)<CR>", '<silent>')
                                call s:Map('x', 'gI', ":<C-U>execute <SID>StageIgnore(line(\"'<\"), line(\"'>\"), v:count)<CR>", '<silent>')
                                call s:Map('n', '.', ':<C-U> <C-R>=<SID>StageArgs(0)<CR><Home>')
                                call s:Map('x', '.', ':<C-U> <C-R>=<SID>StageArgs(1)<CR><Home>')
                                setlocal filetype=fugitive
                            
                                for [lnum, section] in [[staged_end, 'Staged'], [unstaged_end, 'Unstaged']]
                                  while len(getline(lnum))
                                    let filename = matchstr(getline(lnum), '^[A-Z?] \zs.*')
                                    if has_key(expanded[section], filename)
                                      call s:StageInline('show', lnum)
                                    endif
                                    let lnum -= 1
                                  endwhile
                                endfor
                            
                                let b:fugitive_reltime = reltime()
                                return 'silent ' . s:DoAutocmd('User FugitiveIndex')
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              endtry
                            endfunction
                            
    1              0.000003 function! fugitive#FileReadCmd(...) abort
                              let amatch = a:0 ? a:1 : expand('<amatch>')
                              let [dir, rev] = s:DirRev(amatch)
                              let line = a:0 > 1 ? a:2 : line("'[")
                              if empty(dir)
                                return 'noautocmd ' . line . 'read ' . s:fnameescape(amatch)
                              endif
                              if rev !~# ':' && s:ChompDefault('', [dir, 'cat-file', '-t', rev]) =~# '^\%(commit\|tag\)$'
                                let cmd = fugitive#Prepare(dir, 'log', '--pretty=format:%B', '-1', rev, '--')
                              else
                                let cmd = fugitive#Prepare(dir, 'cat-file', '-p', rev)
                              endif
                              return line . 'read !' . escape(cmd, '!#%')
                            endfunction
                            
    1              0.000002 function! fugitive#FileWriteCmd(...) abort
                              let tmp = tempname()
                              let amatch = a:0 ? a:1 : expand('<amatch>')
                              let autype = a:0 > 1 ? 'Buf' : 'File'
                              if exists('#' . autype . 'WritePre')
                                execute s:DoAutocmd(autype . 'WritePre ' . s:fnameescape(amatch))
                              endif
                              try
                                let [dir, commit, file] = s:DirCommitFile(amatch)
                                if commit !~# '^[0-3]$' || !v:cmdbang && (line("'[") != 1 || line("']") != line('$'))
                                  return "noautocmd '[,']write" . (v:cmdbang ? '!' : '') . ' ' . s:fnameescape(amatch)
                                endif
                                silent execute "'[,']write !".fugitive#Prepare(dir, 'hash-object', '-w', '--stdin', '--').' > '.tmp
                                let sha1 = readfile(tmp)[0]
                                let old_mode = matchstr(s:SystemError([dir, 'ls-files', '--stage', '.' . file])[0], '^\d\+')
                                if empty(old_mode)
                                  let old_mode = executable(s:Tree(dir) . file) ? '100755' : '100644'
                                endif
                                let error = s:UpdateIndex(dir, [old_mode, sha1, commit, file[1:-1]])
                                if empty(error)
                                  setlocal nomodified
                                  if exists('#' . autype . 'WritePost')
                                    execute s:DoAutocmd(autype . 'WritePost ' . s:fnameescape(amatch))
                                  endif
                                  return ''
                                else
                                  return 'echoerr '.string('fugitive: '.error)
                                endif
                              finally
                                call delete(tmp)
                              endtry
                            endfunction
                            
    1              0.000003 function! fugitive#BufReadCmd(...) abort
                              let amatch = a:0 ? a:1 : expand('<amatch>')
                              try
                                let [dir, rev] = s:DirRev(amatch)
                                if empty(dir)
                                  return 'echo "Invalid Fugitive URL"'
                                endif
                                let b:git_dir = dir
                                if rev =~# '^:\d$'
                                  let b:fugitive_type = 'stage'
                                else
                                  let [b:fugitive_type, exec_error] = s:ChompError([dir, 'cat-file', '-t', rev])
                                  if exec_error && rev =~# '^:0'
                                    let sha = s:ChompDefault('', dir, 'write-tree', '--prefix=' . rev[3:-1])
                                    let exec_error = empty(sha)
                                    let b:fugitive_type = exec_error ? '' : 'tree'
                                  endif
                                  if exec_error
                                    let error = b:fugitive_type
                                    unlet b:fugitive_type
                                    setlocal noswapfile
                                    if empty(&bufhidden)
                                      setlocal bufhidden=delete
                                    endif
                                    if rev =~# '^:\d:'
                                      let &l:readonly = !filewritable(fugitive#Find('.git/index', dir))
                                      return 'silent doautocmd BufNewFile'
                                    else
                                      setlocal readonly nomodifiable
                                      return 'silent doautocmd BufNewFile|echo ' . string(error)
                                    endif
                                  elseif b:fugitive_type !~# '^\%(tag\|commit\|tree\|blob\)$'
                                    return "echoerr ".string("fugitive: unrecognized git type '".b:fugitive_type."'")
                                  endif
                                  if !exists('b:fugitive_display_format') && b:fugitive_type != 'blob'
                                    let b:fugitive_display_format = +getbufvar('#','fugitive_display_format')
                                  endif
                                endif
                            
                                if b:fugitive_type !=# 'blob'
                                  setlocal nomodeline
                                endif
                            
                                setlocal noreadonly modifiable
                                let pos = getpos('.')
                                silent keepjumps %delete_
                                setlocal endofline
                            
                                try
                                  if b:fugitive_type !=# 'blob'
                                    setlocal foldmarker=<<<<<<<<,>>>>>>>>
                                  endif
                                  silent exe s:DoAutocmd('BufReadPre')
                                  if b:fugitive_type ==# 'tree'
                                    let b:fugitive_display_format = b:fugitive_display_format % 2
                                    if b:fugitive_display_format
                                      call s:ReplaceCmd([dir, 'ls-tree', exists('sha') ? sha : rev])
                                    else
                                      if !exists('sha')
                                        let sha = s:TreeChomp(dir, 'rev-parse', '--verify', rev, '--')
                                      endif
                                      call s:ReplaceCmd([dir, 'show', '--no-color', sha])
                                    endif
                                  elseif b:fugitive_type ==# 'tag'
                                    let b:fugitive_display_format = b:fugitive_display_format % 2
                                    if b:fugitive_display_format
                                      call s:ReplaceCmd([dir, 'cat-file', b:fugitive_type, rev])
                                    else
                                      call s:ReplaceCmd([dir, 'cat-file', '-p', rev])
                                    endif
                                  elseif b:fugitive_type ==# 'commit'
                                    let b:fugitive_display_format = b:fugitive_display_format % 2
                                    if b:fugitive_display_format
                                      call s:ReplaceCmd([dir, 'cat-file', b:fugitive_type, rev])
                                    else
                                      call s:ReplaceCmd([dir, '-c', 'diff.noprefix=false', 'show', '--no-color', '-m', '--first-parent', '--pretty=format:tree%x20%T%nparent%x20%P%nauthor%x20%an%x20<%ae>%x20%ad%ncommitter%x20%cn%x20<%ce>%x20%cd%nencoding%x20%e%n%n%s%n%n%b', rev])
                                      keepjumps 1
                                      keepjumps call search('^parent ')
                                      if getline('.') ==# 'parent '
                                        silent lockmarks keepjumps delete_
                                      else
                                        silent exe (exists(':keeppatterns') ? 'keeppatterns' : '') 'keepjumps s/\m\C\%(^parent\)\@<! /\rparent /e' . (&gdefault ? '' : 'g')
                                      endif
                                      keepjumps let lnum = search('^encoding \%(<unknown>\)\=$','W',line('.')+3)
                                      if lnum
                                        silent lockmarks keepjumps delete_
                                      end
                                      silent exe (exists(':keeppatterns') ? 'keeppatterns' : '') 'keepjumps 1,/^diff --git\|\%$/s/\r$//e'
                                      keepjumps 1
                                    endif
                                  elseif b:fugitive_type ==# 'stage'
                                    call s:ReplaceCmd([dir, 'ls-files', '--stage'])
                                  elseif b:fugitive_type ==# 'blob'
                                    call s:ReplaceCmd([dir, 'cat-file', b:fugitive_type, rev])
                                  endif
                                finally
                                  keepjumps call setpos('.',pos)
                                  setlocal nomodified noswapfile
                                  let modifiable = rev =~# '^:.:' && b:fugitive_type !=# 'tree'
                                  let &l:readonly = !modifiable || !filewritable(fugitive#Find('.git/index', dir))
                                  if empty(&bufhidden)
                                    setlocal bufhidden=delete
                                  endif
                                  let &l:modifiable = modifiable
                                  if b:fugitive_type !=# 'blob'
                                    setlocal filetype=git
                                    call s:Map('n', 'a', ":<C-U>let b:fugitive_display_format += v:count1<Bar>exe fugitive#BufReadCmd(@%)<CR>", '<silent>')
                                    call s:Map('n', 'i', ":<C-U>let b:fugitive_display_format -= v:count1<Bar>exe fugitive#BufReadCmd(@%)<CR>", '<silent>')
                                  endif
                                  call fugitive#MapJumps()
                                endtry
                            
                                setlocal modifiable
                            
                                return 'silent ' . s:DoAutocmd('BufReadPost') .
                                      \ (modifiable ? '' : '|setl nomodifiable') . '|silent ' .
                                      \ s:DoAutocmd('User Fugitive' . substitute(b:fugitive_type, '^\l', '\u&', ''))
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              endtry
                            endfunction
                            
    1              0.000004 function! fugitive#BufWriteCmd(...) abort
                              return fugitive#FileWriteCmd(a:0 ? a:1 : expand('<amatch>'), 1)
                            endfunction
                            
    1              0.000002 function! fugitive#SourceCmd(...) abort
                              let amatch = a:0 ? a:1 : expand('<amatch>')
                              let temp = s:BlobTemp(amatch)
                              if empty(temp)
                                return 'noautocmd source ' . s:fnameescape(amatch)
                              endif
                              if !exists('g:virtual_scriptnames')
                                let g:virtual_scriptnames = {}
                              endif
                              let g:virtual_scriptnames[temp] = amatch
                              return 'source ' . s:fnameescape(temp)
                            endfunction
                            
                            " Section: Temp files
                            
    1              0.000007 if !exists('s:temp_files')
    1              0.000004   let s:temp_files = {}
    1              0.000002 endif
                            
    1              0.000004 function! s:TempState(...) abort
                              return get(s:temp_files, s:cpath(fnamemodify(a:0 ? a:1 : @%, ':p')), {})
                            endfunction
                            
    1              0.000002 function! fugitive#Result(...) abort
                              if !a:0 && exists('g:fugitive_event')
                                return get(g:, 'fugitive_result', {})
                              elseif !a:0 || type(a:1) == type('') && a:1 =~# '^-\=$'
                                return get(g:, '_fugitive_last_job', {})
                              elseif type(a:1) == type(0)
                                return s:TempState(bufname(a:1))
                              elseif type(a:1) == type('')
                                return s:TempState(a:1)
                              elseif type(a:1) == type({}) && has_key(a:1, 'file')
                                return s:TempState(a:1.file)
                              else
                                return {}
                              endif
                            endfunction
                            
    1              0.000004 function! s:TempReadPre(file) abort
                              if has_key(s:temp_files, s:cpath(a:file))
                                let dict = s:temp_files[s:cpath(a:file)]
                                setlocal nomodeline
                                if empty(&bufhidden)
                                  setlocal bufhidden=delete
                                endif
                                setlocal buftype=nowrite
                                setlocal nomodifiable
                                let b:git_dir = dict.dir
                                if len(dict.dir)
                                  call extend(b:, {'fugitive_type': 'temp'}, 'keep')
                                endif
                              endif
                            endfunction
                            
    1              0.000003 function! s:TempReadPost(file) abort
                              if has_key(s:temp_files, s:cpath(a:file))
                                let dict = s:temp_files[s:cpath(a:file)]
                                if !has_key(dict, 'job')
                                  setlocal nobuflisted
                                endif
                                if get(dict, 'filetype', '') ==# 'git'
                                  call fugitive#MapJumps()
                                endif
                                if has_key(dict, 'filetype')
                                  let &l:filetype = dict.filetype
                                endif
                                setlocal foldmarker=<<<<<<<<,>>>>>>>>
                                if !&modifiable
                                  if empty(mapcheck('q', 'n'))
                                    nnoremap <buffer> <silent> q    :<C-U>echoerr "fugitive: q is removed in favor of gq (or :q)"<CR>
                                  endif
                                  call s:Map('n', 'gq', ":<C-U>bdelete<CR>", '<silent> <unique>')
                                endif
                              endif
                              return ''
                            endfunction
                            
    1              0.000003 function! s:TempDelete(file) abort
                              let key = s:cpath(a:file)
                              if has_key(s:temp_files, key) && !has_key(s:temp_files[key], 'job') && key !=# s:cpath(get(get(g:, '_fugitive_last_job', {}), 'file', ''))
                                call delete(a:file)
                                call remove(s:temp_files, key)
                              endif
                              return ''
                            endfunction
                            
    1              0.000005 augroup fugitive_temp
    1              0.000521   autocmd!
    1              0.000051   autocmd BufReadPre  * exe s:TempReadPre( expand('<amatch>:p'))
    1              0.000044   autocmd BufReadPost * exe s:TempReadPost(expand('<amatch>:p'))
    1              0.000035   autocmd BufWipeout  * exe s:TempDelete(  expand('<amatch>:p'))
    1              0.000013 augroup END
                            
                            " Section: :Git
                            
    1              0.000015 function! s:AskPassArgs(dir) abort
                              if (len($DISPLAY) || len($TERM_PROGRAM) || has('gui_running')) &&
                                    \ empty($GIT_ASKPASS) && empty($SSH_ASKPASS) && empty(FugitiveConfigGetAll('core.askpass', a:dir))
                                if s:executable(s:ExecPath() . '/git-gui--askpass')
                                  return ['-c', 'core.askPass=' . s:ExecPath() . '/git-gui--askpass']
                                elseif s:executable('ssh-askpass')
                                  return ['-c', 'core.askPass=ssh-askpass']
                                endif
                              endif
                              return []
                            endfunction
                            
    1              0.000006 function! s:RunJobs() abort
                              return (exists('*job_start') || exists('*jobstart')) && exists('*bufwinid')
                            endfunction
                            
    1              0.000006 function! s:RunSave(state) abort
                              let s:temp_files[s:cpath(a:state.file)] = a:state
                            endfunction
                            
    1              0.000006 function! s:RunFinished(state, ...) abort
                              if has_key(get(g:, '_fugitive_last_job', {}), 'file') && bufnr(g:_fugitive_last_job.file) < 0
                                exe s:TempDelete(remove(g:, '_fugitive_last_job').file)
                              endif
                              let g:_fugitive_last_job = a:state
                              let first = join(readfile(a:state.file, '', 2), "\n")
                              if get(a:state, 'filetype', '') ==# 'git' && first =~# '\<\([[:upper:][:digit:]_-]\+(\d\+)\).*\1'
                                let a:state.filetype = 'man'
                              endif
                              if !has_key(a:state, 'capture_bufnr')
                                return
                              endif
                              call fugitive#ReloadStatus(a:state, 1)
                            endfunction
                            
    1              0.000007 function! s:RunEdit(state, tmp, job) abort
                              if get(a:state, 'request', '') !=# 'edit'
                                return 0
                              endif
                              call remove(a:state, 'request')
                              let sentinel = a:state.file . '.edit'
                              let file = FugitiveVimPath(readfile(sentinel, 1)[0])
                              exe substitute(a:state.mods, '\<tab\>', '-tab', 'g') 'keepalt split' s:fnameescape(file)
                              set bufhidden=wipe
                              let s:edit_jobs[bufnr('')] = [a:state, a:tmp, a:job, sentinel]
                              call fugitive#ReloadStatus(a:state.dir, 1)
                              return 1
                            endfunction
                            
    1              0.000010 function! s:RunReceive(state, tmp, type, job, data, ...) abort
                              if a:type ==# 'err' || a:state.pty
                                let data = type(a:data) == type([]) ? join(a:data, "\n") : a:data
                                let data = a:tmp.escape . data
                                let escape = "\033]51;[^\007]*"
                                let a:tmp.escape = matchstr(data, escape . '$')
                                if len(a:tmp.escape)
                                  let data = strpart(data, 0, len(data) - len(a:tmp.escape))
                                endif
                                let cmd = matchstr(data, escape . "\007")[5:-2]
                                let data = substitute(data, escape . "\007", '', 'g')
                                if cmd =~# '^fugitive:'
                                  let a:state.request = strpart(cmd, 9)
                                endif
                                let lines = split(a:tmp.err . data, "\r\\=\n", 1)
                                let a:tmp.err = lines[-1]
                                let lines[-1] = ''
                                call map(lines, 'substitute(v:val, ".*\r", "", "")')
                              else
                                let lines = type(a:data) == type([]) ? a:data : split(a:data, "\n", 1)
                                if len(a:tmp.out)
                                  let lines[0] = a:tmp.out . lines[0]
                                endif
                                let a:tmp.out = lines[-1]
                                let lines[-1] = ''
                              endif
                              call writefile(lines, a:state.file, 'ba')
                              if has_key(a:tmp, 'echo')
                                if !exists('l:data')
                                  let data = type(a:data) == type([]) ? join(a:data, "\n") : a:data
                                endif
                                let a:tmp.echo .= data
                              endif
                              let line_count = a:tmp.line_count
                              let a:tmp.line_count += len(lines) - 1
                              if !has_key(a:state, 'capture_bufnr') || !bufloaded(a:state.capture_bufnr)
                                return
                              endif
                              call remove(lines, -1)
                              try
                                call setbufvar(a:state.capture_bufnr, '&modifiable', 1)
                                if !line_count && len(lines) > 1000
                                  let first = remove(lines, 0, 999)
                                  call setbufline(a:state.capture_bufnr, 1, first)
                                  redraw
                                  call setbufline(a:state.capture_bufnr, 1001, lines)
                                else
                                  call setbufline(a:state.capture_bufnr, line_count + 1, lines)
                                endif
                                call setbufvar(a:state.capture_bufnr, '&modifiable', 0)
                                if !getwinvar(bufwinid(a:state.capture_bufnr), '&previewwindow')
                                  " no-op
                                elseif exists('*win_execute')
                                  call win_execute(bufwinid(a:state.capture_bufnr), '$')
                                else
                                  let winnr = bufwinnr(a:state.capture_bufnr)
                                  if winnr > 0
                                    let old_winnr = winnr()
                                    exe 'noautocmd' winnr.'wincmd w'
                                    $
                                    exe 'noautocmd' old_winnr.'wincmd w'
                                  endif
                                endif
                              catch
                              endtry
                            endfunction
                            
    1              0.000012 function! s:RunExit(state, tmp, job, exit_status) abort
                              let a:state.exit_status = a:exit_status
                              if has_key(a:state, 'job')
                                return
                              endif
                              call s:RunFinished(a:state)
                            endfunction
                            
    1              0.000006 function! s:RunClose(state, tmp, job, ...) abort
                              if a:0
                                call s:RunExit(a:state, a:tmp, a:job, a:1)
                              endif
                              let noeol = substitute(substitute(a:tmp.err, "\r$", '', ''), ".*\r", '', '') . a:tmp.out
                              call writefile([noeol], a:state.file, 'ba')
                              call remove(a:state, 'job')
                              if has_key(a:state, 'capture_bufnr') && bufloaded(a:state.capture_bufnr)
                                if len(noeol)
                                  call setbufvar(a:state.capture_bufnr, '&modifiable', 1)
                                  call setbufline(a:state.capture_bufnr, a:tmp.line_count + 1, [noeol])
                                  call setbufvar(a:state.capture_bufnr, '&eol', 0)
                                  call setbufvar(a:state.capture_bufnr, '&modifiable', 0)
                                endif
                                call setbufvar(a:state.capture_bufnr, '&modified', 0)
                                call setbufvar(a:state.capture_bufnr, '&buflisted', 0)
                                if a:state.filetype !=# getbufvar(a:state.capture_bufnr, '&filetype', '')
                                  call setbufvar(a:state.capture_bufnr, '&filetype', a:state.filetype)
                                endif
                              endif
                              if !has_key(a:state, 'exit_status')
                                return
                              endif
                              call s:RunFinished(a:state)
                            endfunction
                            
    1              0.000008 function! s:RunSend(job, str) abort
                              try
                                if type(a:job) == type(0)
                                  call chansend(a:job, a:str)
                                else
                                  call ch_sendraw(a:job, a:str)
                                endif
                                return len(a:str)
                              catch /^Vim\%((\a\+)\)\=:E90[06]:/
                                return 0
                              endtry
                            endfunction
                            
    1              0.000006 function! s:RunCloseIn(job) abort
                              try
                                if type(a:job) ==# type(0)
                                  call chanclose(a:job, 'stdin')
                                else
                                  call ch_close_in(a:job)
                                endif
                                return 1
                              catch /^Vim\%((\a\+)\)\=:E90[06]:/
                                return 0
                              endtry
                            endfunction
                            
    1              0.000005 function! s:RunEcho(tmp) abort
                              if !has_key(a:tmp, 'echo')
                                return
                              endif
                              let data = a:tmp.echo
                              let a:tmp.echo = matchstr(data, "[\r\n]\\+$")
                              if len(a:tmp.echo)
                                let data = strpart(data, 0, len(data) - len(a:tmp.echo))
                              endif
                              echon substitute(data, "\r\\ze\n", '', 'g')
                            endfunction
                            
    1              0.000006 function! s:RunTick(job) abort
                              if type(a:job) == v:t_number
                                return jobwait([a:job], 1)[0] == -1
                              elseif type(a:job) == 8
                                let running = ch_status(a:job) !~# '^closed$\|^failed$' || job_status(a:job) ==# 'run'
                                sleep 1m
                                return running
                              endif
                            endfunction
                            
    1              0.000014 if !exists('s:edit_jobs')
    1              0.000009   let s:edit_jobs = {}
    1              0.000003 endif
    1              0.000007 function! s:RunWait(state, tmp, job, ...) abort
                              if a:0 && filereadable(a:1)
                                call delete(a:1)
                              endif
                              try
                                while get(a:state, 'request', '') !=# 'edit' && s:RunTick(a:job)
                                  call s:RunEcho(a:tmp)
                                  if !get(a:state, 'closed_in')
                                    let peek = getchar(1)
                                    if peek != 0 && !(has('win32') && peek == 128)
                                      let c = getchar()
                                      let c = type(c) == type(0) ? nr2char(c) : c
                                      if c ==# "\<C-D>" || c ==# "\<Esc>"
                                        let a:state.closed_in = 1
                                        let can_pedit = s:RunCloseIn(a:job) && exists('*setbufline')
                                        for winnr in range(1, winnr('$'))
                                          if getwinvar(winnr, '&previewwindow') && getbufvar(winbufnr(winnr), '&modified')
                                            let can_pedit = 0
                                          endif
                                        endfor
                                        if can_pedit
                                          if has_key(a:tmp, 'echo')
                                            call remove(a:tmp, 'echo')
                                          endif
                                          call writefile(['fugitive: aborting edit due to background operation.'], a:state.file . '.exit')
                                          exe (&splitbelow ? 'botright' : 'topleft') 'silent pedit ++ff=unix' fnameescape(a:state.file)
                                          let a:state.capture_bufnr = bufnr(a:state.file)
                                          call setbufvar(a:state.capture_bufnr, '&modified', 1)
                                          let finished = 0
                                          redraw!
                                          return ''
                                        endif
                                      else
                                        call s:RunSend(a:job, c)
                                        if !a:state.pty
                                          echon c
                                        endif
                                      endif
                                    endif
                                  endif
                                endwhile
                                if !has_key(a:state, 'request') && has_key(a:state, 'job') && exists('*job_status') && job_status(a:job) ==# "dead"
                                  throw 'fugitive: close callback did not fire; this should never happen'
                                endif
                                call s:RunEcho(a:tmp)
                                if has_key(a:tmp, 'echo')
                                  let a:tmp.echo = substitute(a:tmp.echo, "^\r\\=\n", '', '')
                                  echo
                                endif
                                let finished = !s:RunEdit(a:state, a:tmp, a:job)
                              finally
                                if !exists('finished')
                                  try
                                    if a:state.pty && !get(a:state, 'closed_in')
                                      call s:RunSend(a:job, "\<C-C>")
                                    elseif type(a:job) == type(0)
                                      call jobstop(a:job)
                                    else
                                      call job_stop(a:job)
                                    endif
                                  catch /.*/
                                  endtry
                                elseif finished
                                  call fugitive#ReloadStatus(a:state, 1)
                                endif
                              endtry
                              return ''
                            endfunction
                            
    1              0.000012 if !exists('s:resume_queue')
    1              0.000007   let s:resume_queue = []
    1              0.000003 endif
    1              0.000089 function! fugitive#Resume() abort
                              while len(s:resume_queue)
                                if s:resume_queue[0][2] isnot# ''
                                  try
                                    call call('s:RunWait', remove(s:resume_queue, 0))
                                  endtry
                                endif
                              endwhile
                            endfunction
                            
    1              0.000010 function! s:RunBufDelete(bufnr) abort
                              let state = s:TempState(bufname(+a:bufnr))
                              if has_key(state, 'job')
                                try
                                  if type(state.job) == type(0)
                                    call jobstop(state.job)
                                  else
                                    call job_stop(state.job)
                                  endif
                                catch
                                endtry
                              endif
                              if has_key(s:edit_jobs, a:bufnr) |
                                call add(s:resume_queue, remove(s:edit_jobs, a:bufnr))
                                call feedkeys(":redraw!|call delete(" . string(s:resume_queue[-1][0].file . '.edit') .
                                      \ ")|call fugitive#Resume()|silent checktime\r", 'n')
                              endif
                            endfunction
                            
    1              0.000006 augroup fugitive_job
    1              0.000327   autocmd!
    1              0.000038   autocmd BufDelete * call s:RunBufDelete(+expand('<abuf>'))
    1              0.000041   autocmd VimLeave *
                                    \ for s:jobbuf in keys(s:edit_jobs) |
                                    \   call writefile(['Aborting edit due to Vim exit.'], s:edit_jobs[s:jobbuf][0].file . '.exit') |
                                    \   redraw! |
                                    \   call call('s:RunWait', remove(s:edit_jobs, s:jobbuf)) |
                                    \ endfor
    1              0.000005 augroup END
                            
    1              0.000009 function! fugitive#PagerFor(argv, ...) abort
                              let args = a:argv
                              if empty(args)
                                return 0
                              elseif (args[0] ==# 'help' || get(args, 1, '') ==# '--help') && !s:HasOpt(args, '--web')
                                return 1
                              endif
                              if args[0] ==# 'config' && (s:HasOpt(args, '-e', '--edit') ||
                                    \   !s:HasOpt(args, '--list', '--get-all', '--get-regexp', '--get-urlmatch')) ||
                                    \ args[0] =~# '^\%(tag\|branch\)$' && (
                                    \    s:HasOpt(args, '--edit-description', '--unset-upstream', '-m', '-M', '--move', '-c', '-C', '--copy', '-d', '-D', '--delete') ||
                                    \   len(filter(args[1:-1], 'v:val =~# "^[^-]\\|^--set-upstream-to="')) &&
                                    \   !s:HasOpt(args, '--contains', '--no-contains', '--merged', '--no-merged', '--points-at'))
                                return 0
                              endif
                              let config = a:0 ? a:1 : fugitive#Config()
                              let value = get(FugitiveConfigGetAll('pager.' . args[0], config), 0, -1)
                              if value =~# '^\%(true\|yes\|on\|1\)$'
                                return 1
                              elseif value =~# '^\%(false\|no|off\|0\|\)$'
                                return 0
                              elseif type(value) == type('')
                                return value
                              elseif args[0] =~# '^\%(branch\|config\|diff\|grep\|log\|range-diff\|reflog\|shortlog\|show\|tag\|whatchanged\)$' ||
                                    \ (args[0] ==# 'stash' && get(args, 1, '') ==# 'show') ||
                                    \ (args[0] ==# 'am' && s:HasOpt(args, '--show-current-patch'))
                                return 1
                              else
                                return 0
                              endif
                            endfunction
                            
    1              0.000012 let s:disable_colors = []
   13              0.000060 for s:colortype in ['advice', 'branch', 'diff', 'grep', 'interactive', 'pager', 'push', 'remote', 'showBranch', 'status', 'transport', 'ui']
   12              0.000156   call extend(s:disable_colors, ['-c', 'color.' . s:colortype . '=false'])
   13              0.000022 endfor
    1              0.000008 unlet s:colortype
    1              0.000011 function! fugitive#Command(line1, line2, range, bang, mods, arg) abort
                              exe s:VersionCheck()
                              let dir = s:Dir()
                              let config = copy(fugitive#Config(dir))
                              let [args, after] = s:SplitExpandChain(a:arg, s:Tree(dir))
                              let flags = []
                              let pager = -1
                              while len(args)
                                if args[0] ==# '-c' && len(args) > 1
                                  call extend(flags, remove(args, 0, 1))
                                elseif args[0] =~# '^-p$\|^--paginate$'
                                  let pager = 1
                                  call remove(args, 0)
                                elseif args[0] =~# '^-P$\|^--no-pager$'
                                  let pager = 0
                                  call remove(args, 0)
                                elseif args[0] =~# '^--\%([[:lower:]-]\+-pathspecs\|no-optional-locks\)$'
                                  call add(flags, remove(args, 0))
                                elseif args[0] =~# '^-C$\|^--\%(exec-path=\|git-dir=\|work-tree=\|bare$\)'
                                  return 'echoerr ' . string('fugitive: ' . args[0] . ' is not supported')
                                else
                                  break
                                endif
                              endwhile
                              if pager is# 0
                                call add(flags, '--no-pager')
                              endif
                              if empty(args) && pager is# -1
                                let cmd = s:StatusCommand(a:line1, a:line2, a:range, a:line2, a:bang, a:mods, '', '', [])
                                return (empty(cmd) ? 'exe' : cmd) . after
                              endif
                              let alias = FugitiveConfigGet('alias.' . get(args, 0, ''), config)
                              if get(args, 1, '') !=# '--help' && alias !~# '^$\|^!\|[\"'']' && !filereadable(s:ExecPath() . '/git-' . args[0])
                                    \ && !(has('win32') && filereadable(s:ExecPath() . '/git-' . args[0] . '.exe'))
                                call remove(args, 0)
                                call extend(args, split(alias, '\s\+'), 'keep')
                              endif
                              let name = substitute(get(args, 0, ''), '\%(^\|-\)\(\l\)', '\u\1', 'g')
                              let git = s:UserCommandList()
                              let options = {'git': git, 'dir': dir, 'flags': flags}
                              if pager is# -1 && exists('*s:' . name . 'Subcommand') && get(args, 1, '') !=# '--help'
                                try
                                  let overrides = s:{name}Subcommand(a:line1, a:line2, a:range, a:bang, a:mods, extend({'subcommand': args[0], 'subcommand_args': args[1:-1]}, options))
                                  if type(overrides) == type('')
                                    return 'exe ' . string(overrides) . after
                                  endif
                                  let args = [get(overrides, 'command', args[0])] + get(overrides, 'insert_args', []) + args[1:-1]
                                catch /^fugitive:/
                                  return 'echoerr ' . string(v:exception)
                                endtry
                              else
                                let overrides = {}
                              endif
                              let env = get(overrides, 'env', {})
                              let i = 0
                              while i < len(flags) - 1
                                if flags[i] ==# '-c'
                                  let i += 1
                                  let config_name = tolower(matchstr(flags[i], '^[^=]\+'))
                                  if has_key(s:prepare_env, config_name) && flags[i] =~# '=.'
                                    let env[s:prepare_env[config_name]] = matchstr(flags[i], '=\zs.*')
                                  endif
                                  if flags[i] =~# '='
                                    let config[config_name] = [matchstr(flags[i], '=\zs.*')]
                                  else
                                    let config[config_name] = [1]
                                  endif
                                endif
                                let i += 1
                              endwhile
                              let editcmd = a:line2 ? 'split' : 'edit'
                              if pager is# 1
                                if a:bang && a:line2 >= 0
                                  let editcmd = 'read'
                                elseif a:bang
                                  let editcmd = 'pedit'
                                endif
                              elseif pager is# -1
                                let pager = fugitive#PagerFor(args, config)
                                if a:bang && pager isnot# 1
                                  return 'echoerr ' .  string('fugitive: :Git! for temp buffer output has been replaced by :Git --paginate')
                                endif
                              endif
                              if (s:HasOpt(args, ['add', 'checkout', 'commit', 'stage', 'stash', 'reset'], '-p', '--patch') ||
                                    \ s:HasOpt(args, ['add', 'clean', 'stage'], '-i', '--interactive') ||
                                    \ type(pager) == type('')) && pager isnot# 1
                                let mods = substitute(s:Mods(a:mods), '\<tab\>', '-tab', 'g')
                                let assign = len(dir) ? '|let b:git_dir = ' . string(dir) : ''
                                if has('nvim')
                                  call fugitive#Autowrite()
                                  return mods . (a:line2 ? 'split' : 'edit') . ' term://' . s:fnameescape(s:UserCommand(options, args)) . assign . '|startinsert' . after
                                elseif has('terminal')
                                  call fugitive#Autowrite()
                                  return 'exe ' . string(mods . 'terminal ' . (a:line2 ? '' : '++curwin ') . join(map(s:UserCommandList(options) + args, 's:fnameescape(v:val)'))) . assign . after
                                endif
                              endif
                              if pager is# 1 && editcmd ==# 'read'
                                return s:ReadExec(a:line1, a:line2, a:range, a:mods, env, args, options) . after
                              endif
                              let state = {
                                    \ 'git': git,
                                    \ 'flags': flags,
                                    \ 'args': args,
                                    \ 'dir': dir,
                                    \ 'git_dir': dir,
                                    \ 'cwd': s:UserCommandCwd(dir),
                                    \ 'filetype': 'git',
                                    \ 'mods': s:Mods(a:mods),
                                    \ 'file': s:Resolve(tempname())}
                              if pager is# 1
                                call extend(env, {'COLUMNS': '' . get(g:, 'fugitive_columns', 80)}, 'keep')
                              else
                                call extend(env, {'COLUMNS': '' . &columns - 1}, 'keep')
                              endif
                              if s:RunJobs() && pager isnot# 1
                                let state.pty = get(g:, 'fugitive_pty', has('unix') && !has('win32unix') && (has('patch-8.0.0744') || has('nvim')))
                                if !state.pty
                                  let args = s:AskPassArgs(dir) + args
                                endif
                                let tmp = {
                                      \ 'line_count': 0,
                                      \ 'err': '',
                                      \ 'out': '',
                                      \ 'echo': '',
                                      \ 'escape': ''}
                                let env.FUGITIVE = state.file
                                let editor = 'sh ' . s:TempScript(
                                      \ '[ -f "$FUGITIVE.exit" ] && cat "$FUGITIVE.exit" >&2 && exit 1',
                                      \ 'echo "$1" > "$FUGITIVE.edit"',
                                      \ 'printf "\033]51;fugitive:edit\007" >&2',
                                      \ 'while [ -f "$FUGITIVE.edit" -a ! -f "$FUGITIVE.exit" ]; do sleep 0.05 2>/dev/null || sleep 1; done',
                                      \ 'exit 0')
                                call extend(env, {
                                      \ 'NO_COLOR': '1',
                                      \ 'GIT_EDITOR': editor,
                                      \ 'GIT_SEQUENCE_EDITOR': editor,
                                      \ 'GIT_MERGE_AUTOEDIT': '1',
                                      \ 'GIT_PAGER': 'cat',
                                      \ 'PAGER': 'cat'}, 'keep')
                                let args = s:disable_colors + flags + ['-c', 'advice.waitingForEditor=false'] + args
                                let argv = s:UserCommandList({'git': git, 'dir': dir}) + args
                                let [argv, jobopts] = s:JobOpts(argv, env)
                                call fugitive#Autowrite()
                                call writefile([], state.file, 'b')
                                call s:RunSave(state)
                                echo ""
                                if exists('*job_start')
                                  call extend(jobopts, {
                                        \ 'mode': 'raw',
                                        \ 'out_cb': function('s:RunReceive', [state, tmp, 'out']),
                                        \ 'err_cb': function('s:RunReceive', [state, tmp, 'err']),
                                        \ 'close_cb': function('s:RunClose', [state, tmp]),
                                        \ 'exit_cb': function('s:RunExit', [state, tmp]),
                                        \ })
                                  if state.pty
                                    let jobopts.pty = 1
                                  endif
                                  let job = job_start(argv, jobopts)
                                else
                                  let job = jobstart(argv, extend(jobopts, {
                                        \ 'pty': state.pty,
                                        \ 'TERM': 'dumb',
                                        \ 'on_stdout': function('s:RunReceive', [state, tmp, 'out']),
                                        \ 'on_stderr': function('s:RunReceive', [state, tmp, 'err']),
                                        \ 'on_exit': function('s:RunClose', [state, tmp]),
                                        \ }))
                                endif
                                let state.job = job
                                call add(s:resume_queue, [state, tmp, job])
                                return 'call fugitive#Resume()|silent checktime' . after
                              elseif pager is# 1
                                let pre = s:BuildEnvPrefix(env)
                                silent! execute '!' . escape(pre . s:UserCommand({'git': git, 'dir': dir}, s:disable_colors + flags + ['--no-pager'] + args), '!#%') .
                                      \ (&shell =~# 'csh' ? ' >& ' . s:shellesc(state.file) : ' > ' . s:shellesc(state.file) . ' 2>&1')
                                let state.exit_status = v:shell_error
                                redraw!
                                call s:RunSave(state)
                                call s:RunFinished(state)
                                if editcmd ==# 'edit'
                                  call s:BlurStatus()
                                endif
                                return state.mods . editcmd . ' ' . s:fnameescape(state.file) .
                                      \ '|call fugitive#ReloadStatus(fugitive#Result(' . string(state.file) . '), 1)' . after
                              elseif has('win32')
                                return 'echoerr ' . string('fugitive: Vim 8 with job support required to use :Git on Windows')
                              elseif has('gui_running')
                                return 'echoerr ' . string('fugitive: Vim 8 with job support required to use :Git in GVim')
                              else
                                let pre = s:BuildEnvPrefix(env)
                                return 'exe ' . string('noautocmd !' . escape(pre . s:UserCommand(options, args), '!#%')) .
                                      \ '|call fugitive#ReloadStatus(' . string(dir) . ', 1)' .
                                      \ after
                              endif
                            endfunction
                            
    1              0.000012 let s:exec_paths = {}
    1              0.000009 function! s:ExecPath() abort
                              let git = s:GitShellCmd()
                              if !has_key(s:exec_paths, git)
                                let s:exec_paths[git] = s:sub(system(git.' --exec-path'),'\n$','')
                              endif
                              return s:exec_paths[git]
                            endfunction
                            
    1              0.000071 let s:subcommands_before_2_5 = [
                                  \ 'add', 'am', 'apply', 'archive', 'bisect', 'blame', 'branch', 'bundle',
                                  \ 'checkout', 'cherry', 'cherry-pick', 'citool', 'clean', 'clone', 'commit', 'config',
                                  \ 'describe', 'diff', 'difftool', 'fetch', 'format-patch', 'fsck',
                                  \ 'gc', 'grep', 'gui', 'help', 'init', 'instaweb', 'log',
                                  \ 'merge', 'mergetool', 'mv', 'notes', 'pull', 'push',
                                  \ 'rebase', 'reflog', 'remote', 'repack', 'replace', 'request-pull', 'reset', 'revert', 'rm',
                                  \ 'send-email', 'shortlog', 'show', 'show-branch', 'stash', 'stage', 'status', 'submodule',
                                  \ 'tag', 'whatchanged',
                                  \ ]
    1              0.000008 let s:path_subcommands = {}
    1              0.000008 function! s:CompletableSubcommands(dir) abort
                              let c_exec_path = s:cpath(s:ExecPath())
                              if !has_key(s:path_subcommands, c_exec_path)
                                if fugitive#GitVersion(2, 18)
                                  let [lines, exec_error] = s:LinesError(a:dir, '--list-cmds=list-mainporcelain,nohelpers,list-complete')
                                  call filter(lines, 'v:val =~# "^\\S\\+$"')
                                  if !exec_error && len(lines)
                                    let s:path_subcommands[c_exec_path] = lines
                                  else
                                    let s:path_subcommands[c_exec_path] = s:subcommands_before_2_5 +
                                          \ ['maintenance', 'prune', 'range-diff', 'restore', 'sparse-checkout', 'switch', 'worktree']
                                  endif
                                else
                                  let s:path_subcommands[c_exec_path] = s:subcommands_before_2_5 +
                                        \ (fugitive#GitVersion(2, 5) ? ['worktree'] : [])
                                endif
                              endif
                              let commands = copy(s:path_subcommands[c_exec_path])
                              for path in split($PATH, has('win32') ? ';' : ':')
                                if path !~# '^/\|^\a:[\\/]'
                                  continue
                                endif
                                let cpath = s:cpath(path)
                                if !has_key(s:path_subcommands, cpath)
                                  let s:path_subcommands[cpath] = filter(map(s:GlobComplete(path.'/git-', '*', 1),'substitute(v:val,"\\.exe$","","")'), 'v:val !~# "--\\|/"')
                                endif
                                call extend(commands, s:path_subcommands[cpath])
                              endfor
                              call extend(commands, keys(FugitiveConfigGetRegexp('^alias\.\zs[^.]\+$', a:dir)))
                              let configured = split(FugitiveConfigGet('completion.commands', a:dir), '\s\+')
                              let rejected = {}
                              for command in configured
                                if command =~# '^-.'
                                  let rejected[strpart(command, 1)] = 1
                                endif
                              endfor
                              call filter(configured, 'v:val !~# "^-"')
                              let results = filter(sort(commands + configured), '!has_key(rejected, v:val)')
                              if exists('*uniq')
                                return uniq(results)
                              else
                                let i = 1
                                while i < len(results)
                                  if results[i] ==# results[i-1]
                                    call remove(results, i)
                                  else
                                    let i += 1
                                  endif
                                endwhile
                                return results
                              endif
                            endfunction
                            
    1              0.000010 function! fugitive#Complete(lead, ...) abort
                              let dir = a:0 == 1 ? a:1 : a:0 >= 3 ? a:3 : s:Dir()
                              let root = a:0 >= 4 ? a:4 : s:Tree(s:Dir())
                              let pre = a:0 > 1 ? strpart(a:1, 0, a:2) : ''
                              let subcmd = matchstr(pre, '\u\w*[! ] *\zs[[:alnum:]-]\+\ze ')
                              if empty(subcmd)
                                let results = s:CompletableSubcommands(dir)
                              elseif a:0 ==# 2 && subcmd =~# '^\%(commit\|revert\|push\|fetch\|pull\|merge\|rebase\)$'
                                let cmdline = substitute(a:1, '\u\w*\([! ] *\)' . subcmd, 'G' . subcmd, '')
                                let caps_subcmd = substitute(subcmd, '\%(^\|-\)\l', '\u&', 'g')
                                return fugitive#{caps_subcmd}Complete(a:lead, cmdline, a:2 + len(cmdline) - len(a:1), dir, root)
                              elseif pre =~# ' -- '
                                return fugitive#CompletePath(a:lead, a:1, a:2, dir, root)
                              elseif a:lead =~# '^-'
                                let results = split(s:ChompDefault('', dir, subcmd, '--git-completion-helper'), ' ')
                              else
                                return fugitive#CompleteObject(a:lead, a:1, a:2, dir, root)
                              endif
                              return filter(results, 'strpart(v:val, 0, strlen(a:lead)) ==# a:lead')
                            endfunction
                            
    1              0.000008 function! fugitive#CompleteForWorkingDir(A, L, P, ...) abort
                              let path = a:0 ? a:1 : getcwd()
                              return fugitive#Complete(a:A, a:L, a:P, FugitiveExtractGitDir(path), path)
                            endfunction
                            
                            " Section: :Gcd, :Glcd
                            
    1              0.000007 function! fugitive#CdComplete(A, L, P) abort
                              return filter(fugitive#CompletePath(a:A), 'v:val =~# "/$"')
                            endfunction
                            
    1              0.000006 function! fugitive#Cd(path, ...) abort
                              let path = substitute(a:path, '^:/:\=\|^:(\%(top\|top,literal\|literal,top\|literal\))', '', '')
                              if path !~# '^/\|^\a\+:\|^\.\.\=\%(/\|$\)'
                                let dir = s:Dir()
                                exe s:DirCheck(dir)
                                let path = (empty(s:Tree(dir)) ? dir : s:Tree(dir)) . '/' . path
                              endif
                              return (a:0 && a:1 ? 'lcd ' : 'cd ') . s:fnameescape(FugitiveVimPath(path))
                            endfunction
                            
                            " Section: :Gstatus
                            
    1              0.000013 function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort
                              let dir = a:0 ? a:1 : s:Dir()
                              exe s:DirCheck(dir)
                              try
                                let mods = s:Mods(a:mods, &splitbelow ? 'botright' : 'topleft')
                                let file = fugitive#Find(':', dir)
                                let arg = ' +setl\ foldmarker=<<<<<<<<,>>>>>>>>\|let\ w:fugitive_status=FugitiveGitDir() ' .
                                      \ s:fnameescape(file)
                                for tabnr in [tabpagenr()] + (mods =~# '\<tab\>' ? range(1, tabpagenr('$')) : [])
                                  let bufs = tabpagebuflist(tabnr)
                                  for winnr in range(1, tabpagewinnr(tabnr, '$'))
                                    if s:cpath(file, fnamemodify(bufname(bufs[winnr-1]), ':p'))
                                      if tabnr == tabpagenr() && winnr == winnr()
                                        call s:ReloadStatus()
                                      else
                                        call s:ExpireStatus(dir)
                                        exe tabnr . 'tabnext'
                                        exe winnr . 'wincmd w'
                                      endif
                                      let w:fugitive_status = dir
                                      1
                                      return ''
                                    endif
                                  endfor
                                endfor
                                if a:count ==# 0
                                  return mods . 'edit' . (a:bang ? '!' : '') . arg
                                elseif a:bang
                                  return mods . 'pedit' . arg . '|wincmd P'
                                else
                                  return mods . 'keepalt split' . arg
                                endif
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              endtry
                              return ''
                            endfunction
                            
    1              0.000008 function! s:StageJump(offset, section, ...) abort
                              let line = search('^\%(' . a:section . '\)', 'nw')
                              if !line && a:0
                                let line = search('^\%(' . a:1 . '\)', 'nw')
                              endif
                              if line
                                exe line
                                if a:offset
                                  for i in range(a:offset)
                                    call search(s:file_commit_pattern . '\|^$', 'W')
                                    if empty(getline('.')) && a:0 && getline(line('.') + 1) =~# '^\%(' . a:1 . '\)'
                                      call search(s:file_commit_pattern . '\|^$', 'W')
                                    endif
                                    if empty(getline('.'))
                                      return ''
                                    endif
                                  endfor
                                  call s:StageReveal()
                                else
                                  call s:StageReveal()
                                  +
                                endif
                              endif
                              return ''
                            endfunction
                            
    1              0.000007 function! s:StageSeek(info, fallback) abort
                              let info = a:info
                              if empty(info.heading)
                                return a:fallback
                              endif
                              let line = search('^' . escape(substitute(info.heading, '(\d\+)$', '', ''), '^$.*[]~\'), 'wn')
                              if !line
                                for section in get({'Staged': ['Unstaged', 'Untracked'], 'Unstaged': ['Untracked', 'Staged'], 'Untracked': ['Unstaged', 'Staged']}, info.section, [])
                                  let line = search('^' . section, 'wn')
                                  if line
                                    return line + (info.index > 0 ? 1 : 0)
                                  endif
                                endfor
                                return 1
                              endif
                              let i = 0
                              while len(getline(line))
                                let filename = matchstr(getline(line), '^[A-Z?] \zs.*')
                                if len(filename) &&
                                      \ ((info.filename[-1:-1] ==# '/' && filename[0 : len(info.filename) - 1] ==# info.filename) ||
                                      \ (filename[-1:-1] ==# '/' && filename ==# info.filename[0 : len(filename) - 1]) ||
                                      \ filename ==# info.filename)
                                  if info.offset < 0
                                    return line
                                  else
                                    if getline(line+1) !~# '^@'
                                      exe s:StageInline('show', line)
                                    endif
                                    if getline(line+1) !~# '^@'
                                      return line
                                    endif
                                    let type = info.sigil ==# '-' ? '-' : '+'
                                    let offset = -1
                                    while offset < info.offset
                                      let line += 1
                                      if getline(line) =~# '^@'
                                        let offset = +matchstr(getline(line), type . '\zs\d\+') - 1
                                      elseif getline(line) =~# '^[ ' . type . ']'
                                        let offset += 1
                                      elseif getline(line) !~# '^[ @\+-]'
                                        return line - 1
                                      endif
                                    endwhile
                                    return line
                                  endif
                                endif
                                let commit = matchstr(getline(line), '^\%(\%(\x\x\x\)\@!\l\+\s\+\)\=\zs[0-9a-f]\+')
                                if len(commit) && commit ==# info.commit
                                  return line
                                endif
                                if i ==# info.index
                                  let backup = line
                                endif
                                let i += getline(line) !~# '^[ @\+-]'
                                let line += 1
                              endwhile
                              return exists('backup') ? backup : line - 1
                            endfunction
                            
    1              0.000009 function! s:DoAutocmdChanged(dir) abort
                              let dir = a:dir is# -2 ? '' : FugitiveGitDir(a:dir)
                              if empty(dir) || !exists('#User#FugitiveChanged') || exists('g:fugitive_event')
                                return ''
                              endif
                              try
                                let g:fugitive_event = dir
                                if type(a:dir) == type({}) && has_key(a:dir, 'args')
                                  let g:fugitive_result = a:dir
                                endif
                                exe s:DoAutocmd('User FugitiveChanged')
                              finally
                                unlet! g:fugitive_event g:fugitive_result
                                " Force statusline reload with the buffer's Git dir
                                let &ro = &ro
                              endtry
                              return ''
                            endfunction
                            
    1              0.000009 function! s:ReloadStatusBuffer(...) abort
                              if get(b:, 'fugitive_type', '') !=# 'index'
                                return ''
                              endif
                              let original_lnum = a:0 ? a:1 : line('.')
                              let info = s:StageInfo(original_lnum)
                              call fugitive#BufReadStatus()
                              call setpos('.', [0, s:StageSeek(info, original_lnum), 1, 0])
                              return ''
                            endfunction
                            
    1              0.000005 function! s:ReloadStatus(...) abort
                              call s:ExpireStatus(-1)
                              call s:ReloadStatusBuffer(a:0 ? a:1 : line('.'))
                              exe s:DoAutocmdChanged(-1)
                              return ''
                            endfunction
                            
    1              0.000014 let s:last_time = reltime()
    1              0.000010 if !exists('s:last_times')
    1              0.000006   let s:last_times = {}
    1              0.000003 endif
                            
    1              0.000006 function! s:ExpireStatus(bufnr) abort
                              if a:bufnr is# -2
                                let s:head_cache = {}
                                let s:last_time = reltime()
                                return ''
                              endif
                              let dir = s:Dir(a:bufnr)
                              if len(dir)
                                let s:last_times[s:cpath(dir)] = reltime()
                                if has_key(s:head_cache, dir)
                                  call remove(s:head_cache, dir)
                                endif
                              endif
                              return ''
                            endfunction
                            
    1              0.000005 function! s:ReloadWinStatus(...) abort
                              if get(b:, 'fugitive_type', '') !=# 'index' || &modified
                                return
                              endif
                              if !exists('b:fugitive_reltime')
                                exe s:ReloadStatusBuffer()
                                return
                              endif
                              let t = b:fugitive_reltime
                              if reltimestr(reltime(s:last_time, t)) =~# '-\|\d\{10\}\.' ||
                                    \ reltimestr(reltime(get(s:last_times, s:cpath(s:Dir()), t), t)) =~# '-\|\d\{10\}\.'
                                exe s:ReloadStatusBuffer()
                              endif
                            endfunction
                            
    1              0.000005 function! s:ReloadTabStatus(...) abort
                              let mytab = tabpagenr()
                              let tab = a:0 ? a:1 : mytab
                              let winnr = 1
                              while winnr <= tabpagewinnr(tab, '$')
                                if getbufvar(tabpagebuflist(tab)[winnr-1], 'fugitive_type') ==# 'index'
                                  execute 'tabnext '.tab
                                  if winnr != winnr()
                                    execute winnr.'wincmd w'
                                    let restorewinnr = 1
                                  endif
                                  try
                                    call s:ReloadWinStatus()
                                  finally
                                    if exists('restorewinnr')
                                      unlet restorewinnr
                                      wincmd p
                                    endif
                                    execute 'tabnext '.mytab
                                  endtry
                                endif
                                let winnr += 1
                              endwhile
                              unlet! t:fugitive_reload_status
                            endfunction
                            
    1              0.000007 function! fugitive#ReloadStatus(...) abort
                              call s:ExpireStatus(a:0 ? a:1 : -1)
                              if a:0 > 1 ? a:2 : 1
                                let t = reltime()
                                let t:fugitive_reload_status = t
                                for tabnr in exists('*settabvar') ? range(1, tabpagenr('$')) : []
                                  call settabvar(tabnr, 'fugitive_reload_status', t)
                                endfor
                                call s:ReloadTabStatus()
                              else
                                call s:ReloadWinStatus()
                                return ''
                              endif
                              exe s:DoAutocmdChanged(a:0 ? a:1 : -1)
                              return ''
                            endfunction
                            
    1              0.000006 function! fugitive#EfmDir(...) abort
                              let dir = matchstr(a:0 ? a:1 : &errorformat, '\c,%\\&\%(git\|fugitive\)_\=dir=\zs\%(\\.\|[^,]\)*')
                              let dir = substitute(dir, '%%', '%', 'g')
                              let dir = substitute(dir, '\\\ze[\,]', '', 'g')
                              return dir
                            endfunction
                            
    1              0.000007 augroup fugitive_status
    1              0.000186   autocmd!
    1              0.000036   autocmd BufWritePost         * call fugitive#ReloadStatus(-1, 0)
    1              0.000053   autocmd ShellCmdPost,ShellFilterPost * nested call fugitive#ReloadStatus(-2, 0)
    1              0.000032   autocmd BufDelete * nested
                                    \ if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |
                                    \   if !empty(FugitiveGitDir(+expand('<abuf>'))) |
                                    \     call fugitive#ReloadStatus(+expand('<abuf>'), 1) |
                                    \   else |
                                    \     call fugitive#ReloadStatus(-2, 0) |
                                    \  endif |
                                    \ endif
    1              0.000088   autocmd QuickFixCmdPost make,lmake,[cl]file,[cl]getfile nested
                                    \ call fugitive#ReloadStatus(fugitive#EfmDir(), 1)
    1              0.000018   if !has('win32')
                                autocmd FocusGained        * call fugitive#ReloadStatus(-2, 0)
    1              0.000003   endif
    1              0.000029   autocmd BufEnter index,index.lock
                                    \ call s:ReloadWinStatus()
    1              0.000031   autocmd TabEnter *
                                    \ if exists('t:fugitive_reload_status') |
                                    \    call s:ReloadTabStatus() |
                                    \ endif
    1              0.000005 augroup END
                            
    1              0.000008 function! s:StageInfo(...) abort
                              let lnum = a:0 ? a:1 : line('.')
                              let sigil = matchstr(getline(lnum), '^[ @\+-]')
                              let offset = -1
                              if len(sigil)
                                let type = sigil ==# '-' ? '-' : '+'
                                while lnum > 0 && getline(lnum) !~# '^@'
                                  if getline(lnum) =~# '^[ '.type.']'
                                    let offset += 1
                                  endif
                                  let lnum -= 1
                                endwhile
                                let offset += matchstr(getline(lnum), type.'\zs\d\+')
                                while getline(lnum) =~# '^[ @\+-]'
                                  let lnum -= 1
                                endwhile
                              endif
                              let slnum = lnum + 1
                              let section = ''
                              let index = 0
                              while len(getline(slnum - 1)) && empty(section)
                                let slnum -= 1
                                let section = matchstr(getline(slnum), '^\u\l\+\ze.* (\d\+)$')
                                if empty(section) && getline(slnum) !~# '^[ @\+-]'
                                  let index += 1
                                endif
                              endwhile
                              let text = matchstr(getline(lnum), '^[A-Z?] \zs.*')
                              return {'section': section,
                                    \ 'heading': getline(slnum),
                                    \ 'sigil': sigil,
                                    \ 'offset': offset,
                                    \ 'filename': text,
                                    \ 'relative': reverse(split(text, ' -> ')),
                                    \ 'paths': map(reverse(split(text, ' -> ')), 's:Tree() . "/" . v:val'),
                                    \ 'commit': matchstr(getline(lnum), '^\%(\%(\x\x\x\)\@!\l\+\s\+\)\=\zs[0-9a-f]\{4,\}\ze '),
                                    \ 'status': matchstr(getline(lnum), '^[A-Z?]\ze \|^\%(\x\x\x\)\@!\l\+\ze [0-9a-f]'),
                                    \ 'submodule': get(get(get(b:fugitive_files, section, {}), text, {}), 'submodule', ''),
                                    \ 'index': index}
                            endfunction
                            
    1              0.000010 function! s:Selection(arg1, ...) abort
                              if a:arg1 ==# 'n'
                                let arg1 = line('.')
                                let arg2 = -v:count
                              elseif a:arg1 ==# 'v'
                                let arg1 = line("'<")
                                let arg2 = line("'>")
                              else
                                let arg1 = a:arg1
                                let arg2 = a:0 ? a:1 : 0
                              endif
                              let first = arg1
                              if arg2 < 0
                                let last = first - arg2 - 1
                              elseif arg2 > 0
                                let last = arg2
                              else
                                let last = first
                              endif
                              while getline(first) =~# '^$\|^[A-Z][a-z]'
                                let first += 1
                              endwhile
                              if first > last || &filetype !=# 'fugitive'
                                return []
                              endif
                              let flnum = first
                              while getline(flnum) =~# '^[ @\+-]'
                                let flnum -= 1
                              endwhile
                              let slnum = flnum + 1
                              let section = ''
                              let index = 0
                              while len(getline(slnum - 1)) && empty(section)
                                let slnum -= 1
                                let heading = matchstr(getline(slnum), '^\u\l\+.* (\d\+)$')
                                if empty(heading) && getline(slnum) !~# '^[ @\+-]'
                                  let index += 1
                                endif
                              endwhile
                              let results = []
                              let template = {
                                    \ 'heading': heading,
                                    \ 'section': matchstr(heading, '^\u\l\+\ze.* (\d\+)$'),
                                    \ 'filename': '',
                                    \ 'relative': [],
                                    \ 'paths': [],
                                    \ 'commit': '',
                                    \ 'status': '',
                                    \ 'patch': 0,
                                    \ 'index': index}
                              let line = getline(flnum)
                              let lnum = first - (arg1 == flnum ? 0 : 1)
                              let root = s:Tree() . '/'
                              while lnum <= last
                                if line =~# '^\u\l\+\ze.* (\d\+)$'
                                  let template.heading = getline(lnum)
                                  let template.section = matchstr(template.heading, '^\u\l\+\ze.* (\d\+)$')
                                  let template.index = 0
                                elseif line =~# '^[ @\+-]'
                                  let template.index -= 1
                                  if !results[-1].patch
                                    let results[-1].patch = lnum
                                  endif
                                  let results[-1].lnum = lnum
                                elseif line =~# '^[A-Z?] '
                                  let filename = matchstr(line, '^[A-Z?] \zs.*')
                                  call add(results, extend(deepcopy(template), {
                                        \ 'lnum': lnum,
                                        \ 'filename': filename,
                                        \ 'relative': reverse(split(filename, ' -> ')),
                                        \ 'paths': map(reverse(split(filename, ' -> ')), 'root . v:val'),
                                        \ 'status': matchstr(line, '^[A-Z?]'),
                                        \ }))
                                elseif line =~# '^\x\x\x\+ '
                                  call add(results, extend({
                                        \ 'lnum': lnum,
                                        \ 'commit': matchstr(line, '^\x\x\x\+'),
                                        \ }, template, 'keep'))
                                elseif line =~# '^\l\+ \x\x\x\+ '
                                  call add(results, extend({
                                        \ 'lnum': lnum,
                                        \ 'commit': matchstr(line, '^\l\+ \zs\x\x\x\+'),
                                        \ 'status': matchstr(line, '^\l\+'),
                                        \ }, template, 'keep'))
                                endif
                                let lnum += 1
                                let template.index += 1
                                let line = getline(lnum)
                              endwhile
                              if len(results) && results[0].patch && arg2 == 0
                                while getline(results[0].patch) =~# '^[ \+-]'
                                  let results[0].patch -= 1
                                endwhile
                                while getline(results[0].lnum + 1) =~# '^[ \+-]'
                                  let results[0].lnum += 1
                                endwhile
                              endif
                              return results
                            endfunction
                            
    1              0.000005 function! s:StageArgs(visual) abort
                              let commits = []
                              let paths = []
                              for record in s:Selection(a:visual ? 'v' : 'n')
                                if len(record.commit)
                                  call add(commits, record.commit)
                                endif
                                call extend(paths, record.paths)
                              endfor
                              if s:cpath(s:Tree(), getcwd())
                                call map(paths, 'fugitive#Path(v:val, "./")')
                              endif
                              return join(map(commits + paths, 's:fnameescape(v:val)'), ' ')
                            endfunction
                            
    1              0.000003 function! s:Do(action, visual) abort
                              let line = getline('.')
                              let reload = 0
                              if !a:visual && !v:count && line =~# '^[A-Z][a-z]'
                                let header = matchstr(line, '^\S\+\ze:')
                                if len(header) && exists('*s:Do' . a:action . header . 'Header')
                                  let reload = s:Do{a:action}{header}Header(matchstr(line, ': \zs.*')) > 0
                                else
                                  let section = matchstr(line, '^\S\+')
                                  if exists('*s:Do' . a:action . section . 'Heading')
                                    let reload = s:Do{a:action}{section}Heading(line) > 0
                                  endif
                                endif
                                return reload ? s:ReloadStatus() : ''
                              endif
                              let selection = s:Selection(a:visual ? 'v' : 'n')
                              if empty(selection)
                                return ''
                              endif
                              call filter(selection, 'v:val.section ==# selection[0].section')
                              let status = 0
                              let err = ''
                              try
                                for record in selection
                                  if exists('*s:Do' . a:action . record.section)
                                    let status = s:Do{a:action}{record.section}(record)
                                  else
                                    continue
                                  endif
                                  if !status
                                    return ''
                                  endif
                                  let reload = reload || (status > 0)
                                endfor
                                if status < 0
                                  execute record.lnum + 1
                                endif
                                let success = 1
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              finally
                                if reload
                                  execute s:ReloadStatus()
                                endif
                                if exists('success')
                                  call s:StageReveal()
                                endif
                              endtry
                              return ''
                            endfunction
                            
    1              0.000005 function! s:StageReveal() abort
                              exe 'normal! zv'
                              let begin = line('.')
                              if getline(begin) =~# '^@'
                                let end = begin + 1
                                while getline(end) =~# '^[ \+-]'
                                  let end += 1
                                endwhile
                              elseif getline(begin) =~# '^commit '
                                let end = begin
                                while end < line('$') && getline(end + 1) !~# '^commit '
                                  let end += 1
                                endwhile
                              elseif getline(begin) =~# s:section_pattern
                                let end = begin
                                while len(getline(end + 1))
                                  let end += 1
                                endwhile
                              endif
                              if exists('end')
                                while line('.') > line('w0') + &scrolloff && end > line('w$')
                                  execute "normal! \<C-E>"
                                endwhile
                              endif
                            endfunction
                            
    1              0.000010 let s:file_pattern = '^[A-Z?] .\|^diff --'
    1              0.000012 let s:file_commit_pattern = s:file_pattern . '\|^\%(\l\{3,\} \)\=[0-9a-f]\{4,\} '
    1              0.000009 let s:item_pattern = s:file_commit_pattern . '\|^@@'
                            
    1              0.000007 function! s:NextHunk(count) abort
                              if &filetype ==# 'fugitive' && getline('.') =~# s:file_pattern
                                exe s:StageInline('show')
                              endif
                              for i in range(a:count)
                                if &filetype ==# 'fugitive'
                                  call search(s:file_pattern . '\|^@', 'W')
                                  if getline('.') =~# s:file_pattern
                                    exe s:StageInline('show')
                                    if getline(line('.') + 1) =~# '^@'
                                      +
                                    endif
                                  endif
                                else
                                  call search('^@@', 'W')
                                endif
                              endfor
                              call s:StageReveal()
                              return '.'
                            endfunction
                            
    1              0.000007 function! s:PreviousHunk(count) abort
                              for i in range(a:count)
                                if &filetype ==# 'fugitive'
                                  let lnum = search(s:file_pattern . '\|^@','Wbn')
                                  call s:StageInline('show', lnum)
                                  call search('^? .\|^@','Wb')
                                else
                                  call search('^@@', 'Wb')
                                endif
                              endfor
                              call s:StageReveal()
                              return '.'
                            endfunction
                            
    1              0.000005 function! s:NextFile(count) abort
                              for i in range(a:count)
                                exe s:StageInline('hide')
                                if !search(s:file_pattern, 'W')
                                  break
                                endif
                              endfor
                              exe s:StageInline('hide')
                              return '.'
                            endfunction
                            
    1              0.000005 function! s:PreviousFile(count) abort
                              exe s:StageInline('hide')
                              for i in range(a:count)
                                if !search(s:file_pattern, 'Wb')
                                  break
                                endif
                                exe s:StageInline('hide')
                              endfor
                              return '.'
                            endfunction
                            
    1              0.000005 function! s:NextItem(count) abort
                              for i in range(a:count)
                                if !search(s:item_pattern, 'W') && getline('.') !~# s:item_pattern
                                  call search('^commit ', 'W')
                                endif
                              endfor
                              call s:StageReveal()
                              return '.'
                            endfunction
                            
    1              0.000005 function! s:PreviousItem(count) abort
                              for i in range(a:count)
                                if !search(s:item_pattern, 'Wbe') && getline('.') !~# s:item_pattern
                                  call search('^commit ', 'Wbe')
                                endif
                              endfor
                              call s:StageReveal()
                              return '.'
                            endfunction
                            
    1              0.000008 let s:section_pattern = '^[A-Z][a-z][^:]*$'
    1              0.000022 let s:section_commit_pattern = s:section_pattern . '\|^commit '
                            
    1              0.000006 function! s:NextSection(count) abort
                              let orig = line('.')
                              if getline('.') !~# '^commit '
                                -
                              endif
                              for i in range(a:count)
                                if !search(s:section_commit_pattern, 'W')
                                  break
                                endif
                              endfor
                              if getline('.') =~# s:section_commit_pattern
                                call s:StageReveal()
                                return getline('.') =~# s:section_pattern ? '+' : ':'
                              else
                                return orig
                              endif
                            endfunction
                            
    1              0.000003 function! s:PreviousSection(count) abort
                              let orig = line('.')
                              if getline('.') !~# '^commit '
                                -
                              endif
                              for i in range(a:count)
                                if !search(s:section_commit_pattern . '\|\%^', 'bW')
                                  break
                                endif
                              endfor
                              if getline('.') =~# s:section_commit_pattern || line('.') == 1
                                call s:StageReveal()
                                return getline('.') =~# s:section_pattern ? '+' : ':'
                              else
                                return orig
                              endif
                            endfunction
                            
    1              0.000003 function! s:NextSectionEnd(count) abort
                              +
                              if empty(getline('.'))
                                +
                              endif
                              for i in range(a:count)
                                if !search(s:section_commit_pattern, 'W')
                                  return '$'
                                endif
                              endfor
                              return search('^.', 'Wb')
                            endfunction
                            
    1              0.000003 function! s:PreviousSectionEnd(count) abort
                              let old = line('.')
                              for i in range(a:count)
                                if search(s:section_commit_pattern, 'Wb') <= 1
                                  exe old
                                  if i
                                    break
                                  else
                                    return ''
                                  endif
                                endif
                                let old = line('.')
                              endfor
                              return search('^.', 'Wb')
                            endfunction
                            
    1              0.000004 function! s:PatchSearchExpr(reverse) abort
                              let line = getline('.')
                              if col('.') ==# 1 && line =~# '^[+-]'
                                if line =~# '^[+-]\{3\} '
                                  let pattern = '^[+-]\{3\} ' . substitute(escape(strpart(line, 4), '^$.*[]~\'), '^\w/', '\\w/', '') . '$'
                                else
                                  let pattern = '^[+-]\s*' . escape(substitute(strpart(line, 1), '^\s*\|\s*$', '', ''), '^$.*[]~\') . '\s*$'
                                endif
                                if a:reverse
                                  return '?' . escape(pattern, '/?') . "\<CR>"
                                else
                                  return '/' . escape(pattern, '/') . "\<CR>"
                                endif
                              endif
                              return a:reverse ? '#' : '*'
                            endfunction
                            
    1              0.000003 function! s:StageInline(mode, ...) abort
                              if &filetype !=# 'fugitive'
                                return ''
                              endif
                              let lnum1 = a:0 ? a:1 : line('.')
                              let lnum = lnum1 + 1
                              if a:0 > 1 && a:2 == 0 && lnum1 == 1
                                let lnum = line('$') - 1
                              elseif a:0 > 1 && a:2 == 0
                                let info = s:StageInfo(lnum - 1)
                                if empty(info.paths) && len(info.section)
                                  while len(getline(lnum))
                                    let lnum += 1
                                  endwhile
                                endif
                              elseif a:0 > 1
                                let lnum += a:2 - 1
                              endif
                              while lnum > lnum1
                                let lnum -= 1
                                while lnum > 0 && getline(lnum) =~# '^[ @\+-]'
                                  let lnum -= 1
                                endwhile
                                let info = s:StageInfo(lnum)
                                if !has_key(b:fugitive_diff, info.section)
                                  continue
                                endif
                                if getline(lnum + 1) =~# '^[ @\+-]'
                                  let lnum2 = lnum + 1
                                  while getline(lnum2 + 1) =~# '^[ @\+-]'
                                    let lnum2 += 1
                                  endwhile
                                  if a:mode !=# 'show'
                                    setlocal modifiable noreadonly
                                    exe 'silent keepjumps ' . (lnum + 1) . ',' . lnum2 . 'delete _'
                                    call remove(b:fugitive_expanded[info.section], info.filename)
                                    setlocal nomodifiable readonly nomodified
                                  endif
                                  continue
                                endif
                                if !has_key(b:fugitive_diff, info.section) || info.status !~# '^[ADMRU]$' || a:mode ==# 'hide'
                                  continue
                                endif
                                let mode = ''
                                let diff = []
                                let index = 0
                                let start = -1
                                for line in b:fugitive_diff[info.section]
                                  if mode ==# 'await' && line[0] ==# '@'
                                    let mode = 'capture'
                                  endif
                                  if mode !=# 'head' && line !~# '^[ @\+-]'
                                    if len(diff)
                                      break
                                    endif
                                    let start = index
                                    let mode = 'head'
                                  elseif mode ==# 'head' && line =~# '^diff '
                                    let start = index
                                  elseif mode ==# 'head' && substitute(line, "\t$", '', '') ==# '--- ' . info.relative[-1]
                                    let mode = 'await'
                                  elseif mode ==# 'head' && substitute(line, "\t$", '', '') ==# '+++ ' . info.relative[0]
                                    let mode = 'await'
                                  elseif mode ==# 'capture'
                                    call add(diff, line)
                                  elseif line[0] ==# '@'
                                    let mode = ''
                                  endif
                                  let index += 1
                                endfor
                                if len(diff)
                                  setlocal modifiable noreadonly
                                  silent call append(lnum, diff)
                                  let b:fugitive_expanded[info.section][info.filename] = [start, len(diff)]
                                  setlocal nomodifiable readonly nomodified
                                  if foldclosed(lnum+1) > 0
                                    silent exe (lnum+1) . ',' . (lnum+len(diff)) . 'foldopen!'
                                  endif
                                endif
                              endwhile
                              return lnum
                            endfunction
                            
    1              0.000003 function! s:NextExpandedHunk(count) abort
                              for i in range(a:count)
                                call s:StageInline('show', line('.'), 1)
                                call search(s:file_pattern . '\|^@','W')
                              endfor
                              return '.'
                            endfunction
                            
    1              0.000003 function! s:StageDiff(diff) abort
                              let lnum = line('.')
                              let info = s:StageInfo(lnum)
                              let prefix = info.offset > 0 ? '+' . info.offset : ''
                              if info.submodule =~# '^S'
                                if info.section ==# 'Staged'
                                  return 'Git --paginate diff --no-ext-diff --submodule=log --cached -- ' . info.paths[0]
                                elseif info.submodule =~# '^SC'
                                  return 'Git --paginate diff --no-ext-diff --submodule=log -- ' . info.paths[0]
                                else
                                  return 'Git --paginate diff --no-ext-diff --submodule=diff -- ' . info.paths[0]
                                endif
                              elseif empty(info.paths) && info.section ==# 'Staged'
                                return 'Git --paginate diff --no-ext-diff --cached'
                              elseif empty(info.paths)
                                return 'Git --paginate diff --no-ext-diff'
                              elseif len(info.paths) > 1
                                execute 'Gedit' . prefix s:fnameescape(':0:' . info.paths[0])
                                return a:diff . '! @:'.s:fnameescape(info.paths[1])
                              elseif info.section ==# 'Staged' && info.sigil ==# '-'
                                execute 'Gedit' prefix s:fnameescape(':0:'.info.paths[0])
                                return a:diff . '! :0:%'
                              elseif info.section ==# 'Staged'
                                execute 'Gedit' prefix s:fnameescape(':0:'.info.paths[0])
                                return a:diff . '! @:%'
                              elseif info.sigil ==# '-'
                                execute 'Gedit' prefix s:fnameescape(':0:'.info.paths[0])
                                return a:diff . '! :(top)%'
                              else
                                execute 'Gedit' prefix s:fnameescape(':(top)'.info.paths[0])
                                return a:diff . '!'
                              endif
                            endfunction
                            
    1              0.000003 function! s:StageDiffEdit() abort
                              let info = s:StageInfo(line('.'))
                              let arg = (empty(info.paths) ? s:Tree() : info.paths[0])
                              if info.section ==# 'Staged'
                                return 'Git --paginate diff --no-ext-diff --cached '.s:fnameescape(arg)
                              elseif info.status ==# '?'
                                call s:TreeChomp('add', '--intent-to-add', '--', arg)
                                return s:ReloadStatus()
                              else
                                return 'Git --paginate diff --no-ext-diff '.s:fnameescape(arg)
                              endif
                            endfunction
                            
    1              0.000004 function! s:StageApply(info, reverse, extra) abort
                              if a:info.status ==# 'R'
                                throw 'fugitive: patching renamed file not yet supported'
                              endif
                              let cmd = ['apply', '-p0', '--recount'] + a:extra
                              let info = a:info
                              let start = info.patch
                              let end = info.lnum
                              let lines = getline(start, end)
                              if empty(filter(copy(lines), 'v:val =~# "^[+-]"'))
                                return -1
                              endif
                              while getline(end) =~# '^[-+\ ]'
                                let end += 1
                                if getline(end) =~# '^[' . (a:reverse ? '+' : '-') . '\ ]'
                                  call add(lines, ' ' . getline(end)[1:-1])
                                endif
                              endwhile
                              while start > 0 && getline(start) !~# '^@'
                                let start -= 1
                                if getline(start) =~# '^[' . (a:reverse ? '+' : '-') . ' ]'
                                  call insert(lines, ' ' . getline(start)[1:-1])
                                elseif getline(start) =~# '^@'
                                  call insert(lines, getline(start))
                                endif
                              endwhile
                              if start == 0
                                throw 'fugitive: cold not find hunk'
                              elseif getline(start) !~# '^@@ '
                                throw 'fugitive: cannot apply conflict hunk'
                              endif
                              let i = b:fugitive_expanded[info.section][info.filename][0]
                              let head = []
                              while get(b:fugitive_diff[info.section], i, '@') !~# '^@'
                                let line = b:fugitive_diff[info.section][i]
                                if line ==# '--- /dev/null'
                                  call add(head, '--- ' . get(b:fugitive_diff[info.section], i + 1, '')[4:-1])
                                elseif line !~# '^new file '
                                  call add(head, line)
                                endif
                                let i += 1
                              endwhile
                              call extend(lines, head, 'keep')
                              let temp = tempname()
                              call writefile(lines, temp)
                              if a:reverse
                                call add(cmd, '--reverse')
                              endif
                              call extend(cmd, ['--', temp])
                              let [output, exec_error] = s:ChompError(cmd)
                              if !exec_error
                                return 1
                              endif
                              call s:throw(output)
                            endfunction
                            
    1              0.000003 function! s:StageDelete(lnum1, lnum2, count) abort
                              let restore = []
                            
                              let err = ''
                              let did_conflict_err = 0
                              try
                                for info in s:Selection(a:lnum1, a:lnum2)
                                  if empty(info.paths)
                                    continue
                                  endif
                                  let sub = get(get(get(b:fugitive_files, info.section, {}), info.filename, {}), 'submodule')
                                  if sub =~# '^S' && info.status ==# 'M'
                                    let undo = 'Git checkout ' . fugitive#RevParse('HEAD', FugitiveExtractGitDir(info.paths[0]))[0:10] . ' --'
                                  elseif sub =~# '^S'
                                    let err .= '|echoerr ' . string('fugitive: will not touch submodule ' . string(info.relative[0]))
                                    break
                                  elseif info.status ==# 'D'
                                    let undo = 'GRemove'
                                  elseif info.paths[0] =~# '/$'
                                    let err .= '|echoerr ' . string('fugitive: will not delete directory ' . string(info.relative[0]))
                                    break
                                  else
                                    let undo = 'Gread ' . s:TreeChomp('hash-object', '-w', '--', info.paths[0])[0:10]
                                  endif
                                  if info.patch
                                    call s:StageApply(info, 1, info.section ==# 'Staged' ? ['--index'] : [])
                                  elseif sub =~# '^S'
                                    if info.section ==# 'Staged'
                                      call s:TreeChomp('reset', '--', info.paths[0])
                                    endif
                                    call s:TreeChomp('submodule', 'update', '--', info.paths[0])
                                  elseif info.status ==# '?'
                                    call s:TreeChomp('clean', '-f', '--', info.paths[0])
                                  elseif a:count == 2
                                    if get(b:fugitive_files['Staged'], info.filename, {'status': ''}).status ==# 'D'
                                      call delete(FugitiveVimPath(info.paths[0]))
                                    else
                                      call s:TreeChomp('checkout', '--ours', '--', info.paths[0])
                                    endif
                                  elseif a:count == 3
                                    if get(b:fugitive_files['Unstaged'], info.filename, {'status': ''}).status ==# 'D'
                                      call delete(FugitiveVimPath(info.paths[0]))
                                    else
                                      call s:TreeChomp('checkout', '--theirs', '--', info.paths[0])
                                    endif
                                  elseif info.status =~# '[ADU]' &&
                                        \ get(b:fugitive_files[info.section ==# 'Staged' ? 'Unstaged' : 'Staged'], info.filename, {'status': ''}).status =~# '[AU]'
                                    if get(g:, 'fugitive_conflict_x', 0)
                                      call s:TreeChomp('checkout', info.section ==# 'Unstaged' ? '--ours' : '--theirs', '--', info.paths[0])
                                    else
                                      if !did_conflict_err
                                        let err .= '|echoerr "Use 2X for --ours or 3X for --theirs"'
                                        let did_conflict_err = 1
                                      endif
                                      continue
                                    endif
                                  elseif info.status ==# 'U'
                                    call delete(FugitiveVimPath(info.paths[0]))
                                  elseif info.status ==# 'A'
                                    call s:TreeChomp('rm', '-f', '--', info.paths[0])
                                  elseif info.section ==# 'Unstaged'
                                    call s:TreeChomp('checkout', '--', info.paths[0])
                                  else
                                    call s:TreeChomp('checkout', '@', '--', info.paths[0])
                                  endif
                                  if len(undo)
                                    call add(restore, ':Gsplit ' . s:fnameescape(info.relative[0]) . '|' . undo)
                                  endif
                                endfor
                              catch /^fugitive:/
                                let err .= '|echoerr ' . string(v:exception)
                              endtry
                              if empty(restore)
                                return err[1:-1]
                              endif
                              exe s:ReloadStatus()
                              call s:StageReveal()
                              if len(restore)
                                return 'checktime|redraw|echomsg ' . string('To restore, ' . join(restore, '|')) . err
                              else
                                return 'checktime|redraw' . err
                              endif
                            endfunction
                            
    1              0.000004 function! s:StageIgnore(lnum1, lnum2, count) abort
                              let paths = []
                              for info in s:Selection(a:lnum1, a:lnum2)
                                call extend(paths, info.relative)
                              endfor
                              call map(paths, '"/" . v:val')
                              if !a:0
                                let dir = fugitive#Find('.git/info/')
                                if !isdirectory(dir)
                                  try
                                    call mkdir(dir)
                                  catch
                                  endtry
                                endif
                              endif
                              exe 'Gsplit' (a:count ? '.gitignore' : '.git/info/exclude')
                              let last = line('$')
                              if last == 1 && empty(getline(1))
                                call setline(last, paths)
                              else
                                call append(last, paths)
                                exe last + 1
                              endif
                              return ''
                            endfunction
                            
    1              0.000003 function! s:DoToggleHeadHeader(value) abort
                              exe 'edit' s:fnameescape(s:Dir())
                              call search('\C^index$', 'wc')
                            endfunction
                            
    1              0.000003 function! s:DoToggleHelpHeader(value) abort
                              exe 'help fugitive-map'
                            endfunction
                            
    1              0.000003 function! s:DoStagePushHeader(value) abort
                              let remote = matchstr(a:value, '\zs[^/]\+\ze/')
                              if empty(remote)
                                let remote = '.'
                              endif
                              let branch = matchstr(a:value, '\%([^/]\+/\)\=\zs\S\+')
                              call feedkeys(':Git push ' . remote . ' ' . branch)
                            endfunction
                            
    1              0.000003 function! s:DoTogglePushHeader(value) abort
                              return s:DoStagePushHeader(a:value)
                            endfunction
                            
    1              0.000003 function! s:DoStageUnpushedHeading(heading) abort
                              let remote = matchstr(a:heading, 'to \zs[^/]\+\ze/')
                              if empty(remote)
                                let remote = '.'
                              endif
                              let branch = matchstr(a:heading, 'to \%([^/]\+/\)\=\zs\S\+')
                              call feedkeys(':Git push ' . remote . ' ' . '@:' . 'refs/heads/' . branch)
                            endfunction
                            
    1              0.000003 function! s:DoToggleUnpushedHeading(heading) abort
                              return s:DoStageUnpushedHeading(a:heading)
                            endfunction
                            
    1              0.000004 function! s:DoStageUnpushed(record) abort
                              let remote = matchstr(a:record.heading, 'to \zs[^/]\+\ze/')
                              if empty(remote)
                                let remote = '.'
                              endif
                              let branch = matchstr(a:record.heading, 'to \%([^/]\+/\)\=\zs\S\+')
                              call feedkeys(':Git push ' . remote . ' ' . a:record.commit . ':' . 'refs/heads/' . branch)
                            endfunction
                            
    1              0.000003 function! s:DoToggleUnpushed(record) abort
                              return s:DoStageUnpushed(a:record)
                            endfunction
                            
    1              0.000003 function! s:DoUnstageUnpulledHeading(heading) abort
                              call feedkeys(':Git rebase')
                            endfunction
                            
    1              0.000003 function! s:DoToggleUnpulledHeading(heading) abort
                              call s:DoUnstageUnpulledHeading(a:heading)
                            endfunction
                            
    1              0.000003 function! s:DoUnstageUnpulled(record) abort
                              call feedkeys(':Git rebase ' . a:record.commit)
                            endfunction
                            
    1              0.000003 function! s:DoToggleUnpulled(record) abort
                              call s:DoUnstageUnpulled(a:record)
                            endfunction
                            
    1              0.000003 function! s:DoUnstageUnpushed(record) abort
                              call feedkeys(':Git -c sequence.editor=true rebase --interactive --autosquash ' . a:record.commit . '^')
                            endfunction
                            
    1              0.000003 function! s:DoToggleStagedHeading(...) abort
                              call s:TreeChomp('reset', '-q')
                              return 1
                            endfunction
                            
    1              0.000003 function! s:DoUnstageStagedHeading(heading) abort
                              return s:DoToggleStagedHeading(a:heading)
                            endfunction
                            
    1              0.000003 function! s:DoToggleUnstagedHeading(...) abort
                              call s:TreeChomp('add', '-u')
                              return 1
                            endfunction
                            
    1              0.000003 function! s:DoStageUnstagedHeading(heading) abort
                              return s:DoToggleUnstagedHeading(a:heading)
                            endfunction
                            
    1              0.000003 function! s:DoToggleUntrackedHeading(...) abort
                              call s:TreeChomp('add', '.')
                              return 1
                            endfunction
                            
    1              0.000003 function! s:DoStageUntrackedHeading(heading) abort
                              return s:DoToggleUntrackedHeading(a:heading)
                            endfunction
                            
    1              0.000003 function! s:DoToggleStaged(record) abort
                              if a:record.patch
                                return s:StageApply(a:record, 1, ['--cached'])
                              else
                                call s:TreeChomp(['reset', '-q', '--'] + a:record.paths)
                                return 1
                              endif
                            endfunction
                            
    1              0.000003 function! s:DoUnstageStaged(record) abort
                              return s:DoToggleStaged(a:record)
                            endfunction
                            
    1              0.000003 function! s:DoToggleUnstaged(record) abort
                              if a:record.patch
                                return s:StageApply(a:record, 0, ['--cached'])
                              else
                                call s:TreeChomp(['add', '-A', '--'] + a:record.paths)
                                return 1
                              endif
                            endfunction
                            
    1              0.000003 function! s:DoStageUnstaged(record) abort
                              return s:DoToggleUnstaged(a:record)
                            endfunction
                            
    1              0.000003 function! s:DoUnstageUnstaged(record) abort
                              if a:record.status ==# 'A'
                                call s:TreeChomp(['reset', '-q', '--'] + a:record.paths)
                                return 1
                              else
                                return -1
                              endif
                            endfunction
                            
    1              0.000003 function! s:DoToggleUntracked(record) abort
                              call s:TreeChomp(['add', '--'] + a:record.paths)
                              return 1
                            endfunction
                            
    1              0.000003 function! s:DoStageUntracked(record) abort
                              return s:DoToggleUntracked(a:record)
                            endfunction
                            
    1              0.000003 function! s:StagePatch(lnum1,lnum2) abort
                              let add = []
                              let reset = []
                              let intend = []
                            
                              for lnum in range(a:lnum1,a:lnum2)
                                let info = s:StageInfo(lnum)
                                if empty(info.paths) && info.section ==# 'Staged'
                                  return 'Git reset --patch'
                                elseif empty(info.paths) && info.section ==# 'Unstaged'
                                  return 'Git add --patch'
                                elseif empty(info.paths) && info.section ==# 'Untracked'
                                  return 'Git add --interactive'
                                elseif empty(info.paths)
                                  continue
                                endif
                                execute lnum
                                if info.section ==# 'Staged'
                                  let reset += info.relative
                                elseif info.section ==# 'Untracked'
                                  let intend += info.paths
                                elseif info.status !~# '^D'
                                  let add += info.relative
                                endif
                              endfor
                              try
                                if !empty(intend)
                                  call s:TreeChomp(['add', '--intent-to-add', '--'] + intend)
                                endif
                                if !empty(add)
                                  execute "Git add --patch -- ".join(map(add,'s:fnameescape(v:val)'))
                                endif
                                if !empty(reset)
                                  execute "Git reset --patch -- ".join(map(reset,'s:fnameescape(v:val)'))
                                endif
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              endtry
                              return s:ReloadStatus()
                            endfunction
                            
                            " Section: :Git commit, :Git revert
                            
    1              0.000007 function! s:CommitInteractive(line1, line2, range, bang, mods, options, patch) abort
                              let status = s:StatusCommand(a:line1, a:line2, a:range, a:line2, a:bang, a:mods, '', '', [], a:options.dir)
                              let status = len(status) ? status . '|' : ''
                              if a:patch
                                return status . 'if search("^Unstaged")|exe "normal >"|exe "+"|endif'
                              else
                                return status . 'if search("^Untracked\\|^Unstaged")|exe "+"|endif'
                              endif
                            endfunction
                            
    1              0.000005 function! s:CommitSubcommand(line1, line2, range, bang, mods, options) abort
                              let argv = copy(a:options.subcommand_args)
                              let i = 0
                              while get(argv, i, '--') !=# '--'
                                if argv[i] =~# '^-[apzsneiovq].'
                                  call insert(argv, argv[i][0:1])
                                  let argv[i+1] = '-' . argv[i+1][2:-1]
                                else
                                  let i += 1
                                endif
                              endwhile
                              if s:HasOpt(argv, '-i', '--interactive')
                                return s:CommitInteractive(a:line1, a:line2, a:range, a:bang, a:mods, a:options, 0)
                              elseif s:HasOpt(argv, '-p', '--patch')
                                return s:CommitInteractive(a:line1, a:line2, a:range, a:bang, a:mods, a:options, 1)
                              else
                                return {}
                              endif
                            endfunction
                            
    1              0.000005 function! s:RevertSubcommand(line1, line2, range, bang, mods, options) abort
                              return {'insert_args': ['--edit']}
                            endfunction
                            
    1              0.000004 function! fugitive#CommitComplete(A, L, P, ...) abort
                              let dir = a:0 ? a:1 : s:Dir()
                              if a:A =~# '^--fixup=\|^--squash='
                                let commits = s:LinesError([dir, 'log', '--pretty=format:%s', '@{upstream}..'])[0]
                                let pre = matchstr(a:A, '^--\w*=''\=') . ':/^'
                                if pre =~# "'"
                                  call map(commits, 'pre . string(tr(v:val, "|\"^$*[]", "......."))[1:-1]')
                                  call filter(commits, 'strpart(v:val, 0, strlen(a:A)) ==# a:A')
                                  return commits
                                else
                                  return s:FilterEscape(map(commits, 'pre . tr(v:val, "\\ !^$*?[]()''\"`&;<>|#", "....................")'), a:A)
                                endif
                              else
                                return s:CompleteSub('commit', a:A, a:L, a:P, function('fugitive#CompletePath'), a:000)
                              endif
                              return []
                            endfunction
                            
    1              0.000004 function! fugitive#RevertComplete(A, L, P, ...) abort
                              return s:CompleteSub('revert', a:A, a:L, a:P, function('s:CompleteRevision'), a:000)
                            endfunction
                            
                            " Section: :Git merge, :Git rebase, :Git pull
                            
    1              0.000004 function! fugitive#MergeComplete(A, L, P, ...) abort
                              return s:CompleteSub('merge', a:A, a:L, a:P, function('s:CompleteRevision'), a:000)
                            endfunction
                            
    1              0.000003 function! fugitive#RebaseComplete(A, L, P, ...) abort
                              return s:CompleteSub('rebase', a:A, a:L, a:P, function('s:CompleteRevision'), a:000)
                            endfunction
                            
    1              0.000004 function! fugitive#PullComplete(A, L, P, ...) abort
                              return s:CompleteSub('pull', a:A, a:L, a:P, function('s:CompleteRemote'), a:000)
                            endfunction
                            
    1              0.000005 function! s:MergeSubcommand(line1, line2, range, bang, mods, options) abort
                              let dir = a:options.dir
                              if empty(a:options.subcommand_args) && (
                                    \ filereadable(fugitive#Find('.git/MERGE_MSG', dir)) ||
                                    \ isdirectory(fugitive#Find('.git/rebase-apply', dir)) ||
                                    \  !empty(s:TreeChomp(dir, 'diff-files', '--diff-filter=U')))
                                return 'echoerr ":Git merge for loading conflicts hase been removed in favor of :Git mergetool"'
                              endif
                              return {}
                            endfunction
                            
    1              0.000005 function! s:RebaseSubcommand(line1, line2, range, bang, mods, options) abort
                              let args = a:options.subcommand_args
                              if s:HasOpt(args, '--autosquash') && !s:HasOpt(args, '-i', '--interactive')
                                return {'env': {'GIT_SEQUENCE_EDITOR': 'true'}, 'insert_args': ['--interactive']}
                              endif
                              return {}
                            endfunction
                            
                            " Section: :Git difftool, :Git mergetool
                            
    1              0.000005 function! s:ToolItems(state, from, to, offsets, text, ...) abort
                              let items = []
                              for i in range(len(a:state.diff))
                                let diff = a:state.diff[i]
                                let path = (i == len(a:state.diff) - 1) ? a:to : a:from
                                if empty(path)
                                  return []
                                endif
                                let item = {
                                      \ 'valid': a:0 ? a:1 : 1,
                                      \ 'filename': diff.filename . FugitiveVimPath(path),
                                      \ 'lnum': matchstr(get(a:offsets, i), '\d\+'),
                                      \ 'text': a:text}
                                if len(get(diff, 'module', ''))
                                  let item.module = diff.module . path
                                endif
                                call add(items, item)
                              endfor
                              let diff = items[0:-2]
                              let items[-1].context = {'diff': items[0:-2]}
                              return [items[-1]]
                            endfunction
                            
    1              0.000003 function! s:ToolToFrom(str) abort
                              if a:str =~# ' => '
                                let str = a:str =~# '{.* => .*}' ? a:str : '{' . a:str . '}'
                                return [substitute(str, '{.* => \(.*\)}', '\1', ''),
                                      \ substitute(str, '{\(.*\) => .*}', '\1', '')]
                              else
                                return [a:str, a:str]
                              endif
                            endfunction
                            
    1              0.000004 function! s:ToolParse(state, line) abort
                              if type(a:line) !=# type('') || a:state.mode ==# 'hunk' && a:line =~# '^[ +-]'
                                return []
                              elseif a:line =~# '^diff '
                                let a:state.mode = 'diffhead'
                                let a:state.from = ''
                                let a:state.to = ''
                              elseif a:state.mode ==# 'diffhead' && a:line =~# '^--- [^/]'
                                let a:state.from = a:line[4:-1]
                                let a:state.to = a:state.from
                              elseif a:state.mode ==# 'diffhead' && a:line =~# '^+++ [^/]'
                                let a:state.to = a:line[4:-1]
                                if empty(get(a:state, 'from', ''))
                                  let a:state.from = a:state.to
                                endif
                              elseif a:line[0] ==# '@'
                                let a:state.mode = 'hunk'
                                if has_key(a:state, 'from')
                                  let offsets = split(matchstr(a:line, '^@\+ \zs[-+0-9, ]\+\ze @'), ' ')
                                  return s:ToolItems(a:state, a:state.from, a:state.to, offsets, matchstr(a:line, ' @@\+ \zs.*'))
                                endif
                              elseif a:line =~# '^\* Unmerged path .'
                                let file = a:line[16:-1]
                                return s:ToolItems(a:state, file, file, [], '')
                              elseif a:line =~# '^[A-Z]\d*\t.\|^:.*\t.'
                                " --raw, --name-status
                                let [status; files] = split(a:line, "\t")
                                return s:ToolItems(a:state, files[0], files[-1], [], a:state.name_only ? '' : status)
                              elseif a:line =~# '^ \S.* |'
                                " --stat
                                let [_, to, changes; __] = matchlist(a:line, '^ \(.\{-\}\) \+|\zs \(.*\)$')
                                let [to, from] = s:ToolToFrom(to)
                                return s:ToolItems(a:state, from, to, [], changes)
                              elseif a:line =~# '^ *\([0-9.]\+%\) .'
                                " --dirstat
                                let [_, changes, to; __] = matchlist(a:line, '^ *\([0-9.]\+%\) \(.*\)')
                                return s:ToolItems(a:state, to, to, [], changes)
                              elseif a:line =~# '^\(\d\+\|-\)\t\(\d\+\|-\)\t.'
                                " --numstat
                                let [_, add, remove, to; __] = matchlist(a:line, '^\(\d\+\|-\)\t\(\d\+\|-\)\t\(.*\)')
                                let [to, from] = s:ToolToFrom(to)
                                return s:ToolItems(a:state, from, to, [], add ==# '-' ? 'Binary file' : '+' . add . ' -' . remove, add !=# '-')
                              elseif a:state.mode !=# 'diffhead' && a:state.mode !=# 'hunk' && len(a:line) || a:line =~# '^git: \|^usage: \|^error: \|^fatal: '
                                return [{'text': a:line}]
                              endif
                              return []
                            endfunction
                            
    1              0.000005 function! s:ToolStream(line1, line2, range, bang, mods, options, args, state) abort
                              let i = 0
                              let argv = copy(a:args)
                              let prompt = 1
                              let state = a:state
                              while i < len(argv)
                                let match = matchlist(argv[i], '^\(-[a-zABDFH-KN-RT-Z]\)\ze\(.*\)')
                                if len(match) && len(match[2])
                                  call insert(argv, match[1])
                                  let argv[i+1] = '-' . match[2]
                                  continue
                                endif
                                let arg = argv[i]
                                if arg =~# '^-t$\|^--tool=\|^--tool-help$\|^--help$'
                                  return {}
                                elseif arg =~# '^-y$\|^--no-prompt$'
                                  let prompt = 0
                                  call remove(argv, i)
                                  continue
                                elseif arg ==# '--prompt'
                                  let prompt = 1
                                  call remove(argv, i)
                                  continue
                                elseif arg =~# '^--\%(no-\)\=\(symlinks\|trust-exit-code\|gui\)$'
                                  call remove(argv, i)
                                  continue
                                elseif arg ==# '--'
                                  break
                                endif
                                let i += 1
                              endwhile
                              let a:state.mode = 'init'
                              let a:state.from = ''
                              let a:state.to = ''
                              let exec = s:UserCommandList({'git': a:options.git, 'dir': a:options.dir}) + ['-c', 'diff.context=0']
                              let exec += a:options.flags + ['--no-pager', 'diff', '--no-ext-diff', '--no-color', '--no-prefix'] + argv
                              if prompt
                                let title = ':Git ' . s:fnameescape(a:options.flags + [a:options.subcommand] + a:options.subcommand_args)
                                return s:QuickfixStream(a:line2, 'difftool', title, exec, !a:bang, a:mods, s:function('s:ToolParse'), a:state)
                              else
                                let filename = ''
                                let cmd = []
                                let tabnr = tabpagenr() + 1
                                for line in split(s:SystemError(s:shellesc(exec))[0], "\n")
                                  for item in s:ToolParse(a:state, line)
                                    if len(get(item, 'filename', '')) && item.filename != filename
                                      call add(cmd, 'tabedit ' . s:fnameescape(item.filename))
                                      for i in reverse(range(len(get(item.context, 'diff', []))))
                                        call add(cmd, (i ? 'rightbelow' : 'leftabove') . ' vert Gdiffsplit! ' . s:fnameescape(item.context.diff[i].filename))
                                      endfor
                                      call add(cmd, 'wincmd =')
                                      let filename = item.filename
                                    endif
                                  endfor
                                endfor
                                return join(cmd, '|') . (empty(cmd) ? '' : '|' . tabnr . 'tabnext')
                              endif
                            endfunction
                            
    1              0.000006 function! s:MergetoolSubcommand(line1, line2, range, bang, mods, options) abort
                              let dir = a:options.dir
                              exe s:DirCheck(dir)
                              let i = 0
                              let prompt = 1
                              let cmd = ['diff', '--diff-filter=U']
                              let state = {'name_only': 0}
                              let state.diff = [{'prefix': ':2:', 'module': ':2:'}, {'prefix': ':3:', 'module': ':3:'}, {'prefix': ':(top)'}]
                              call map(state.diff, 'extend(v:val, {"filename": fugitive#Find(v:val.prefix, dir)})')
                              return s:ToolStream(a:line1, a:line2, a:range, a:bang, a:mods, a:options, ['--diff-filter=U'] + a:options.subcommand_args, state)
                            endfunction
                            
    1              0.000004 function! s:DifftoolSubcommand(line1, line2, range, bang, mods, options) abort
                              let dir = a:options.dir
                              exe s:DirCheck(dir)
                              let i = 0
                              let argv = copy(a:options.subcommand_args)
                              let commits = []
                              let cached = 0
                              let reverse = 1
                              let prompt = 1
                              let state = {'name_only': 0}
                              let merge_base_against = {}
                              let dash = (index(argv, '--') > i ? ['--'] : [])
                              while i < len(argv)
                                let match = matchlist(argv[i], '^\(-[a-zABDFH-KN-RT-Z]\)\ze\(.*\)')
                                if len(match) && len(match[2])
                                  call insert(argv, match[1])
                                  let argv[i+1] = '-' . match[2]
                                  continue
                                endif
                                let arg = argv[i]
                                if arg ==# '--cached'
                                  let cached = 1
                                elseif arg ==# '-R'
                                  let reverse = 1
                                elseif arg ==# '--name-only'
                                  let state.name_only = 1
                                  let argv[0] = '--name-status'
                                elseif arg ==# '--'
                                  break
                                elseif arg !~# '^-\|^\.\.\=\%(/\|$\)'
                                  let parsed = s:LinesError(['rev-parse', '--revs-only', substitute(arg, ':.*', '', '')] + dash)[0]
                                  call map(parsed, '{"uninteresting": v:val =~# "^\\^", "prefix": substitute(v:val, "^\\^", "", "") . ":"}')
                                  let merge_base_against = {}
                                  if arg =~# '\.\.\.' && len(parsed) > 2
                                    let display = map(split(arg, '\.\.\.', 1), 'empty(v:val) ? "@" : v:val')
                                    if len(display) == 2
                                      let parsed[0].module = display[1] . ':'
                                      let parsed[1].module = display[0] . ':'
                                    endif
                                    let parsed[2].module = arg . ':'
                                    if empty(commits)
                                      let merge_base_against = parsed[0]
                                      let parsed = [parsed[2]]
                                    endif
                                  elseif arg =~# '\.\.' && len(parsed) == 2
                                    let display = map(split(arg, '\.\.', 1), 'empty(v:val) ? "@" : v:val')
                                    if len(display) == 2
                                      let parsed[0].module = display[0] . ':'
                                      let parsed[1].module = display[1] . ':'
                                    endif
                                  elseif len(parsed) == 1
                                    let parsed[0].module = arg . ':'
                                  endif
                                  call extend(commits, parsed)
                                endif
                                let i += 1
                              endwhile
                              if len(merge_base_against)
                                call add(commits, merge_base_against)
                              endif
                              let commits = filter(copy(commits), 'v:val.uninteresting') + filter(commits, '!v:val.uninteresting')
                              if cached
                                if empty(commits)
                                  call add(commits, {'prefix': '@:', 'module': '@:'})
                                endif
                                call add(commits, {'prefix': ':0:', 'module': ':0:'})
                              elseif len(commits) < 2
                                call add(commits, {'prefix': ':(top)'})
                                if len(commits) < 2
                                  call insert(commits, {'prefix': ':0:', 'module': ':0:'})
                                endif
                              endif
                              if reverse
                                let commits = [commits[-1]] + repeat([commits[0]], len(commits) - 1)
                                call reverse(commits)
                              endif
                              if len(commits) > 2
                                call add(commits, remove(commits, 0))
                              endif
                              call map(commits, 'extend(v:val, {"filename": fugitive#Find(v:val.prefix, dir)})')
                              let state.diff = commits
                              return s:ToolStream(a:line1, a:line2, a:range, a:bang, a:mods, a:options, argv, state)
                            endfunction
                            
                            " Section: :Ggrep, :Glog
                            
    1              0.000009 if !exists('g:fugitive_summary_format')
    1              0.000008   let g:fugitive_summary_format = '%s'
    1              0.000002 endif
                            
    1              0.000004 function! fugitive#GrepComplete(A, L, P) abort
                              return s:CompleteSub('grep', a:A, a:L, a:P)
                            endfunction
                            
    1              0.000004 function! fugitive#LogComplete(A, L, P) abort
                              return s:CompleteSub('log', a:A, a:L, a:P)
                            endfunction
                            
    1              0.000009 function! s:GrepParseLine(prefix, name_only, dir, line) abort
                              let entry = {'valid': 1}
                              let match = matchlist(a:line, '^\(.\{-\}\):\(\d\+\):\(\d\+:\)\=\(.*\)$')
                              if len(match)
                                let entry.module = match[1]
                                let entry.lnum = +match[2]
                                let entry.col = +match[3]
                                let entry.text = match[4]
                              elseif a:line =~# '^git: \|^usage: \|^error: \|^fatal: '
                                return {'text': a:line}
                              else
                                let entry.module = matchstr(a:line, '\CBinary file \zs.*\ze matches$')
                                if len(entry.module)
                                  let entry.text = 'Binary file'
                                  let entry.valid = 0
                                endif
                              endif
                              if empty(entry.module) && a:name_only
                                let entry.module = a:line
                              endif
                              if empty(entry.module)
                                return {'text': a:line}
                              endif
                              if entry.module !~# ':'
                                let entry.filename = a:prefix . entry.module
                              else
                                let entry.filename = fugitive#Find(entry.module, a:dir)
                              endif
                              return entry
                            endfunction
                            
    1              0.000005 function! s:GrepSubcommand(line1, line2, range, bang, mods, options) abort
                              let dir = a:options.dir
                              exe s:DirCheck(dir)
                              let listnr = a:line1 == 0 ? a:line1 : a:line2
                              let cmd = ['--no-pager', 'grep', '-n', '--no-color', '--full-name']
                              let tree = s:Tree(dir)
                              let args = a:options.subcommand_args
                              if get(args, 0, '') =~# '^-O\|--open-files-in-pager$'
                                let args = args[1:-1]
                              endif
                              let name_only = s:HasOpt(args, '-l', '--files-with-matches', '--name-only', '-L', '--files-without-match')
                              if listnr > 0
                                exe listnr 'wincmd w'
                              else
                                call s:BlurStatus()
                              endif
                              redraw
                              call s:QuickfixCreate(listnr, {'title': (listnr < 0 ? ':Git grep ' : ':0Git grep ') . s:fnameescape(args)})
                              let tempfile = tempname()
                              let event = listnr < 0 ? 'grep-fugitive' : 'lgrep-fugitive'
                              silent exe s:DoAutocmd('QuickFixCmdPre ' . event)
                              let prefix = FugitiveVimPath(s:HasOpt(args, '--cached') || empty(tree) ?
                                    \ 'fugitive://' . dir . '//0/' :
                                    \ s:cpath(getcwd(), tree) ? '' : tree . '/')
                              try
                                if exists('+guioptions') && &guioptions =~# '!'
                                  let guioptions = &guioptions
                                  set guioptions-=!
                                endif
                                exe '!' . escape(s:UserCommand(a:options, cmd + args), '%#!')
                                      \ printf(&shellpipe . (&shellpipe =~# '%s' ? '' : ' %s'), s:shellesc(tempfile))
                              finally
                                if exists('guioptions')
                                  let &guioptions = guioptions
                                endif
                              endtry
                              let list = map(readfile(tempfile), 's:GrepParseLine(prefix, name_only, dir, v:val)')
                              call s:QuickfixSet(listnr, list, 'a')
                              silent exe s:DoAutocmd('QuickFixCmdPost ' . event)
                              if !has('gui_running')
                                redraw
                              endif
                              if !a:bang && !empty(list)
                                return (listnr < 0 ? 'c' : 'l').'first'
                              else
                                return ''
                              endif
                            endfunction
                            
    1              0.000006 function! fugitive#GrepCommand(line1, line2, range, bang, mods, arg) abort
                              return fugitive#Command(a:line1, a:line2, a:range, a:bang, a:mods,
                                    \ "grep -O " . (fugitive#GitVersion(2, 19) ? "--column " : "") . a:arg)
                            endfunction
                            
    1              0.000009 let s:log_diff_context = '{"filename": fugitive#Find(v:val . from, a:dir), "lnum": get(offsets, v:key), "module": strpart(v:val, 0, len(a:state.base_module)) . from}'
                            
    1              0.000003 function! s:LogFlushQueue(state, dir) abort
                              let queue = remove(a:state, 'queue')
                              if a:state.child_found && get(a:state, 'ignore_commit')
                                call remove(queue, 0)
                              elseif len(queue) && len(a:state.target) && len(get(a:state, 'parents', []))
                                let from = substitute(a:state.target, '^/', ':', '')
                                let offsets = []
                                let queue[0].context.diff = map(copy(a:state.parents), s:log_diff_context)
                              endif
                              if len(queue) && queue[-1] ==# {'text': ''}
                                call remove(queue, -1)
                              endif
                              return queue
                            endfunction
                            
    1              0.000004 function! s:LogParse(state, dir, line) abort
                              if a:state.mode ==# 'hunk' && a:line =~# '^[-+ ]'
                                return []
                              endif
                              let list = matchlist(a:line, '^\%(fugitive \(.\{-\}\)\t\|commit \|From \)\=\(\x\{40,\}\)\%( \(.*\)\)\=$')
                              if len(list)
                                let queue = s:LogFlushQueue(a:state, a:dir)
                                let a:state.mode = 'commit'
                                let a:state.base = 'fugitive://' . a:dir . '//' . list[2]
                                if len(list[1])
                                  let [a:state.base_module; a:state.parents] = split(list[1], ' ')
                                else
                                  let a:state.base_module = list[2]
                                  let a:state.parents = []
                                endif
                                let a:state.message = list[3]
                                let a:state.from = ''
                                let a:state.to = ''
                                let context = {}
                                let a:state.queue = [{
                                      \ 'valid': 1,
                                      \ 'context': context,
                                      \ 'filename': a:state.base . a:state.target,
                                      \ 'module': a:state.base_module . substitute(a:state.target, '^/', ':', ''),
                                      \ 'text': a:state.message}]
                                let a:state.child_found = 0
                                return queue
                              elseif type(a:line) == type(0)
                                return s:LogFlushQueue(a:state, a:dir)
                              elseif a:line =~# '^diff'
                                let a:state.mode = 'diffhead'
                                let a:state.from = ''
                                let a:state.to = ''
                              elseif a:state.mode ==# 'diffhead' && a:line =~# '^--- \w/'
                                let a:state.from = a:line[6:-1]
                                let a:state.to = a:state.from
                              elseif a:state.mode ==# 'diffhead' && a:line =~# '^+++ \w/'
                                let a:state.to = a:line[6:-1]
                                if empty(get(a:state, 'from', ''))
                                  let a:state.from = a:state.to
                                endif
                              elseif a:line =~# '^@@[^@]*+\d' && len(get(a:state, 'to', '')) && has_key(a:state, 'base')
                                let a:state.mode = 'hunk'
                                if empty(a:state.target) || a:state.target ==# '/' . a:state.to
                                  if !a:state.child_found && len(a:state.queue) && a:state.queue[-1] ==# {'text': ''}
                                    call remove(a:state.queue, -1)
                                  endif
                                  let a:state.child_found = 1
                                  let offsets = map(split(matchstr(a:line, '^@\+ \zs[-+0-9, ]\+\ze @'), ' '), '+matchstr(v:val, "\\d\\+")')
                                  let context = {}
                                  if len(a:state.parents)
                                    let from = ":" . a:state.from
                                    let context.diff = map(copy(a:state.parents), s:log_diff_context)
                                  endif
                                  call add(a:state.queue, {
                                        \ 'valid': 1,
                                        \ 'context': context,
                                        \ 'filename': FugitiveVimPath(a:state.base . '/' . a:state.to),
                                        \ 'module': a:state.base_module . ':' . a:state.to,
                                        \ 'lnum': offsets[-1],
                                        \ 'text': a:state.message . matchstr(a:line, ' @@\+ .\+')})
                                endif
                              elseif a:state.follow &&
                                    \ a:line =~# '^ \%(mode change \d\|\%(create\|delete\) mode \d\|\%(rename\|copy\|rewrite\) .* (\d\+%)$\)'
                                let rename = matchstr(a:line, '^ rename \zs.* => .*\ze (\d\+%)$')
                                if len(rename)
                                  let rename = rename =~# '{.* => .*}' ? rename : '{' . rename . '}'
                                  if a:state.target ==# simplify('/' . substitute(rename, '{.* => \(.*\)}', '\1', ''))
                                    let a:state.target = simplify('/' . substitute(rename, '{\(.*\) => .*}', '\1', ''))
                                  endif
                                endif
                                if !get(a:state, 'ignore_summary')
                                  call add(a:state.queue, {'text': a:line})
                                endif
                              elseif a:state.mode ==# 'commit' || a:state.mode ==# 'init'
                                call add(a:state.queue, {'text': a:line})
                              endif
                              return []
                            endfunction
                            
    1              0.000011 function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort
                              let dir = s:Dir()
                              exe s:DirCheck(dir)
                              let listnr = a:type =~# '^l' ? 0 : -1
                              let [args, after] = s:SplitExpandChain('log ' . a:args, s:Tree(dir))
                              call remove(args, 0)
                              let split = index(args, '--')
                              if split > 0
                                let paths = args[split : -1]
                                let args = args[0 : split - 1]
                              elseif split == 0
                                let paths = args
                                let args = []
                              else
                                let paths = []
                              endif
                              if a:line1 == 0 && a:count
                                let path = fugitive#Path(bufname(a:count), '/', dir)
                                let titlepre = ':0,' . a:count
                              elseif a:count >= 0
                                let path = fugitive#Path(@%, '/', dir)
                                let titlepre = a:count == 0 ? ':0,' . bufnr('') : ':'
                              else
                                let titlepre = ':'
                                let path = ''
                              endif
                              let range = ''
                              let extra_args = []
                              let extra_paths = []
                              let state = {'mode': 'init', 'child_found': 0, 'queue': [], 'follow': 0}
                              if path =~# '^/\.git\%(/\|$\)\|^$'
                                let path = ''
                              elseif a:line1 == 0
                                let range = "0," . (a:count ? a:count : bufnr(''))
                                let extra_paths = ['.' . path]
                                if (empty(paths) || paths ==# ['--']) && !s:HasOpt(args, '--no-follow')
                                  let state.follow = 1
                                  if !s:HasOpt(args, '--follow')
                                    call insert(extra_args, '--follow')
                                  endif
                                  if !s:HasOpt(args, '--summary')
                                    call insert(extra_args, '--summary')
                                    let state.ignore_summary = 1
                                  endif
                                endif
                                let state.ignore_commit = 1
                              elseif a:count > 0
                                if !s:HasOpt(args, '--merges', '--no-merges')
                                  call insert(extra_args, '--no-merges')
                                endif
                                call add(args, '-L' . a:line1 . ',' . a:count . ':' . path[1:-1])
                                let state.ignore_commit = 1
                              endif
                              if len(path) && empty(filter(copy(args), 'v:val =~# "^[^-]"'))
                                let owner = s:Owner(@%, dir)
                                if len(owner)
                                  call add(args, owner . (owner =~# '^\x\{40,}' ? '' : '^{}'))
                                endif
                              endif
                              if empty(extra_paths)
                                let path = ''
                              endif
                              if s:HasOpt(args, '-g', '--walk-reflogs')
                                let format = "%gd %P\t%H %gs"
                              else
                                let format = "%h %P\t%H " . g:fugitive_summary_format
                              endif
                              let cmd = ['--no-pager']
                              call extend(cmd, ['-c', 'diff.context=0', '-c', 'diff.noprefix=false', 'log'] +
                                    \ ['--no-color', '--no-ext-diff', '--pretty=format:fugitive ' . format] +
                                    \ args + extra_args + paths + extra_paths)
                              let state.target = path
                              let title = titlepre . (listnr < 0 ? 'Gclog ' : 'Gllog ') . s:fnameescape(args + paths)
                              return s:QuickfixStream(listnr, 'log', title, s:UserCommandList(dir) + cmd, !a:bang, a:mods, s:function('s:LogParse'), state, dir) . after
                            endfunction
                            
                            " Section: :Gedit, :Gpedit, :Gsplit, :Gvsplit, :Gtabedit, :Gread
                            
    1              0.000007 function! s:UsableWin(nr) abort
                              return a:nr && !getwinvar(a:nr, '&previewwindow') && !getwinvar(a:nr, '&winfixwidth') &&
                                    \ (empty(getwinvar(a:nr, 'fugitive_status')) || getbufvar(winbufnr(a:nr), 'fugitive_type') !=# 'index') &&
                                    \ index(['gitrebase', 'gitcommit'], getbufvar(winbufnr(a:nr), '&filetype')) < 0 &&
                                    \ index(['nofile','help','quickfix', 'terminal'], getbufvar(winbufnr(a:nr), '&buftype')) < 0
                            endfunction
                            
    1              0.000003 function! s:ArgSplit(string) abort
                              let string = a:string
                              let args = []
                              while string =~# '\S'
                                let arg = matchstr(string, '^\s*\%(\\.\|[^[:space:]]\)\+')
                                let string = strpart(string, len(arg))
                                let arg = substitute(arg, '^\s\+', '', '')
                                call add(args, substitute(arg, '\\\@<!\\ ', ' ', 'g'))
                              endwhile
                              return args
                            endfunction
                            
    1              0.000004 function! s:OpenParse(string, wants_cmd) abort
                              let opts = []
                              let cmds = []
                              let args = s:ArgSplit(a:string)
                              while !empty(args)
                                if args[0] =~# '^++'
                                  call add(opts, ' ' . escape(remove(args, 0), ' |"'))
                                elseif a:wants_cmd && args[0] =~# '^+'
                                  call add(cmds, remove(args, 0)[1:-1])
                                else
                                  break
                                endif
                              endwhile
                              if len(args)
                                let file = join(args)
                                if file ==# '-'
                                  let result = fugitive#Result()
                                  if has_key(result, 'file')
                                    let file = s:fnameescape(result.file)
                                  else
                                    throw 'fugitive: no previous command output'
                                  endif
                                endif
                              elseif empty(expand('%'))
                                let file = ''
                              elseif empty(s:DirCommitFile(@%)[1]) && s:Relative('./') !~# '^\./\.git\>'
                                let file = '>:0'
                              else
                                let file = '>'
                              endif
                              let dir = s:Dir()
                              let efile = s:Expand(file)
                              let url = s:Generate(efile, dir)
                            
                              if a:wants_cmd && file[0] ==# '>' && efile[0] !=# '>' && get(b:, 'fugitive_type', '') isnot# 'tree' && &filetype !=# 'netrw'
                                let line = line('.')
                                if expand('%:p') !=# url
                                  let diffcmd = 'diff'
                                  let from = s:DirRev(@%)[1]
                                  let to = s:DirRev(url)[1]
                                  if empty(from) && empty(to)
                                    let diffcmd = 'diff-files'
                                    let args = ['--', expand('%:p'), url]
                                  elseif empty(to)
                                    let args = [from, '--', url]
                                  elseif empty(from)
                                    let args = [to, '--', expand('%:p')]
                                    let reverse = 1
                                  else
                                    let args = [from, to]
                                  endif
                                  let [res, exec_error] = s:LinesError([dir, diffcmd, '-U0'] + args)
                                  if !exec_error
                                    call filter(res, 'v:val =~# "^@@ "')
                                    call map(res, 'substitute(v:val, ''[-+]\d\+\zs '', ",1 ", "g")')
                                    call map(res, 'matchlist(v:val, ''^@@ -\(\d\+\),\(\d\+\) +\(\d\+\),\(\d\+\) @@'')[1:4]')
                                    if exists('reverse')
                                      call map(res, 'v:val[2:3] + v:val[0:1]')
                                    endif
                                    call filter(res, 'v:val[0] < '.line('.'))
                                    let hunk = get(res, -1, [0,0,0,0])
                                    if hunk[0] + hunk[1] > line('.')
                                      let line = hunk[2] + max([1 - hunk[3], 0])
                                    else
                                      let line = hunk[2] + max([hunk[3], 1]) + line('.') - hunk[0] - max([hunk[1], 1])
                                    endif
                                  endif
                                endif
                                call insert(cmds, line)
                              endif
                            
                              let pre = join(opts, '')
                              if len(cmds) > 1
                                let pre .= ' +' . escape(join(map(cmds, '"exe ".string(v:val)'), '|'), ' |"')
                              elseif len(cmds)
                                let pre .= ' +' . escape(cmds[0], ' |"')
                              endif
                              return [url, pre]
                            endfunction
                            
    1              0.000003 function! fugitive#DiffClose() abort
                              let mywinnr = winnr()
                              for winnr in [winnr('#')] + range(winnr('$'),1,-1)
                                if winnr != mywinnr && getwinvar(winnr,'&diff')
                                  execute winnr.'wincmd w'
                                  close
                                  if winnr('$') > 1
                                    wincmd p
                                  endif
                                endif
                              endfor
                              diffoff!
                            endfunction
                            
    1              0.000003 function! s:BlurStatus() abort
                              if (&previewwindow || exists('w:fugitive_status')) && get(b:,'fugitive_type', '') ==# 'index'
                                let winnrs = filter([winnr('#')] + range(1, winnr('$')), 's:UsableWin(v:val)')
                                if len(winnrs)
                                  exe winnrs[0].'wincmd w'
                                else
                                  belowright new
                                endif
                                if &diff
                                  call fugitive#DiffClose()
                                endif
                              endif
                            endfunction
                            
    1              0.000012 let s:bang_edits = {'split': 'Git', 'vsplit': 'vert Git', 'tabedit': 'tab Git', 'pedit': 'Git!'}
    1              0.000005 function! fugitive#Open(cmd, bang, mods, arg, args) abort
                              exe s:VersionCheck()
                              if a:bang
                                return 'echoerr ' . string(':G' . a:cmd . '! for temp buffer output has been replaced by :' . get(s:bang_edits, a:cmd, 'Git') . ' --paginate')
                              endif
                            
                              let mods = s:Mods(a:mods)
                              try
                                let [file, pre] = s:OpenParse(a:arg, 1)
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              endtry
                              if file !~# '^\a\a\+:' && !(has('win32') && file =~# '^\a:/$')
                                let file = substitute(file, '.\zs' . (has('win32') ? '[\/]' : '/') . '$', '', '')
                              endif
                              if a:cmd ==# 'edit'
                                call s:BlurStatus()
                              endif
                              return mods . a:cmd . pre . ' ' . s:fnameescape(file)
                            endfunction
                            
    1              0.000004 function! s:ReadPrepare(line1, count, range, mods) abort
                              let mods = s:Mods(a:mods)
                              let after = a:count
                              if a:count < 0
                                let delete = 'silent 1,' . line('$') . 'delete_|'
                                let after = line('$')
                              elseif a:range == 2
                                let delete = 'silent ' . a:line1 . ',' . a:count . 'delete_|'
                              else
                                let delete = ''
                              endif
                              if foldlevel(after)
                                let pre = after . 'foldopen!|'
                              else
                                let pre = ''
                              endif
                              return [pre . 'keepalt ' . mods . after . 'read', delete . 'diffupdate' . (a:count < 0 ? '|' . line('.') : '')]
                            endfunction
                            
    1              0.000005 function! s:ReadExec(line1, count, range, mods, env, args, options) abort
                              let [read, post] = s:ReadPrepare(a:line1, a:count, a:range, a:mods)
                              let env = s:BuildEnvPrefix(extend({'COLUMNS': &tw ? &tw : 80}, a:env))
                              silent execute read . '!' escape(env . s:UserCommand(a:options, ['--no-pager'] + a:args), '!#%')
                              execute post
                              call fugitive#ReloadStatus(a:options.dir, 1)
                              return 'redraw|echo '.string(':!'.s:UserCommand(a:options, a:args))
                            endfunction
                            
    1              0.000005 function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, args) abort
                              exe s:VersionCheck()
                              if a:bang
                                return 'echoerr ' . string(':Gread! for temp buffer output has been replaced by :{range}Git! --paginate')
                              endif
                              let [read, post] = s:ReadPrepare(a:line1, a:count, a:range, a:mods)
                              try
                                let [file, pre] = s:OpenParse(a:arg, 0)
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              endtry
                              if file =~# '^fugitive:' && a:count is# 0
                                return 'exe ' .string('keepalt ' . s:Mods(a:mods) . fugitive#FileReadCmd(file, 0, pre)) . '|diffupdate'
                              endif
                              return read . ' ' . pre . ' ' . s:fnameescape(file) . '|' . post
                            endfunction
                            
    1              0.000004 function! fugitive#EditComplete(A, L, P) abort
                              if a:A =~# '^>'
                                return map(s:FilterEscape(s:CompleteHeads(s:Dir()), a:A[1:-1]), "'>' . v:val")
                              else
                                return fugitive#CompleteObject(a:A, a:L, a:P)
                              endif
                            endfunction
                            
    1              0.000003 function! fugitive#ReadComplete(A, L, P) abort
                              if a:L =~# '^\w\+!'
                                return fugitive#Complete(a:A, a:L, a:P)
                              else
                                return fugitive#EditComplete(a:A, a:L, a:P)
                              endif
                            endfunction
                            
                            " Section: :Gwrite, :Gwq
                            
    1              0.000005 function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, args) abort
                              exe s:VersionCheck()
                              if s:cpath(expand('%:p'), fugitive#Find('.git/COMMIT_EDITMSG')) && empty(a:arg)
                                return (empty($GIT_INDEX_FILE) ? 'write|bdelete' : 'wq') . (a:bang ? '!' : '')
                              elseif get(b:, 'fugitive_type', '') ==# 'index' && empty(a:arg)
                                return 'Git commit'
                              elseif &buftype ==# 'nowrite' && getline(4) =~# '^[+-]\{3\} '
                                return 'echoerr ' . string('fugitive: :Gwrite from :Git diff has been removed in favor of :Git add --edit')
                              endif
                              let mytab = tabpagenr()
                              let mybufnr = bufnr('')
                              let args = s:ArgSplit(a:arg)
                              let after = ''
                              if get(args, 0) =~# '^+'
                                let after = '|' . remove(args, 0)[1:-1]
                              endif
                              try
                                let file = len(args) ? s:Generate(s:Expand(join(args, ' '))) : fugitive#Real(@%)
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              endtry
                              if empty(file)
                                return 'echoerr '.string('fugitive: cannot determine file path')
                              endif
                              if file =~# '^fugitive:'
                                return 'write' . (a:bang ? '! ' : ' ') . s:fnameescape(file)
                              endif
                              exe s:DirCheck()
                              let always_permitted = s:cpath(fugitive#Real(@%), file) && empty(s:DirCommitFile(@%)[1])
                              if !always_permitted && !a:bang && (len(s:TreeChomp('diff', '--name-status', 'HEAD', '--', file)) || len(s:TreeChomp('ls-files', '--others', '--', file)))
                                let v:errmsg = 'fugitive: file has uncommitted changes (use ! to override)'
                                return 'echoerr v:errmsg'
                              endif
                              let treebufnr = 0
                              for nr in range(1,bufnr('$'))
                                if fnamemodify(bufname(nr),':p') ==# file
                                  let treebufnr = nr
                                endif
                              endfor
                            
                              if treebufnr > 0 && treebufnr != bufnr('')
                                let temp = tempname()
                                silent execute 'keepalt %write '.temp
                                for tab in [mytab] + range(1,tabpagenr('$'))
                                  for winnr in range(1,tabpagewinnr(tab,'$'))
                                    if tabpagebuflist(tab)[winnr-1] == treebufnr
                                      execute 'tabnext '.tab
                                      if winnr != winnr()
                                        execute winnr.'wincmd w'
                                        let restorewinnr = 1
                                      endif
                                      try
                                        let lnum = line('.')
                                        let last = line('$')
                                        silent execute '$read '.temp
                                        silent execute '1,'.last.'delete_'
                                        silent write!
                                        silent execute lnum
                                        diffupdate
                                        let did = 1
                                      finally
                                        if exists('restorewinnr')
                                          wincmd p
                                        endif
                                        execute 'tabnext '.mytab
                                      endtry
                                      break
                                    endif
                                  endfor
                                endfor
                                if !exists('did')
                                  call writefile(readfile(temp,'b'),file,'b')
                                endif
                              else
                                execute 'write! '.s:fnameescape(file)
                              endif
                            
                              if a:bang
                                let [error, exec_error] = s:ChompError(['add', '--force', '--', file])
                              else
                                let [error, exec_error] = s:ChompError(['add', '--', file])
                              endif
                              if exec_error
                                let v:errmsg = 'fugitive: '.error
                                return 'echoerr v:errmsg'
                              endif
                              if s:cpath(fugitive#Real(@%), file) && s:DirCommitFile(@%)[1] =~# '^\d$'
                                setlocal nomodified
                              endif
                            
                              let one = fugitive#Find(':1:'.file)
                              let two = fugitive#Find(':2:'.file)
                              let three = fugitive#Find(':3:'.file)
                              for nr in range(1,bufnr('$'))
                                let name = fnamemodify(bufname(nr), ':p')
                                if bufloaded(nr) && !getbufvar(nr,'&modified') && (name ==# one || name ==# two || name ==# three)
                                  execute nr.'bdelete'
                                endif
                              endfor
                            
                              unlet! restorewinnr
                              let zero = fugitive#Find(':0:'.file)
                              silent exe s:DoAutocmd('BufWritePost ' . s:fnameescape(zero))
                              for tab in range(1,tabpagenr('$'))
                                for winnr in range(1,tabpagewinnr(tab,'$'))
                                  let bufnr = tabpagebuflist(tab)[winnr-1]
                                  let bufname = fnamemodify(bufname(bufnr), ':p')
                                  if bufname ==# zero && bufnr != mybufnr
                                    execute 'tabnext '.tab
                                    if winnr != winnr()
                                      execute winnr.'wincmd w'
                                      let restorewinnr = 1
                                    endif
                                    try
                                      let lnum = line('.')
                                      let last = line('$')
                                      silent execute '$read '.s:fnameescape(file)
                                      silent execute '1,'.last.'delete_'
                                      silent execute lnum
                                      setlocal nomodified
                                      diffupdate
                                    finally
                                      if exists('restorewinnr')
                                        wincmd p
                                      endif
                                      execute 'tabnext '.mytab
                                    endtry
                                    break
                                  endif
                                endfor
                              endfor
                              call fugitive#ReloadStatus(-1, 1)
                              return 'silent checktime' . after
                            endfunction
                            
    1              0.000004 function! fugitive#WqCommand(...) abort
                              let bang = a:4 ? '!' : ''
                              if s:cpath(expand('%:p'), fugitive#Find('.git/COMMIT_EDITMSG'))
                                return 'wq'.bang
                              endif
                              let result = call('fugitive#WriteCommand', a:000)
                              if result =~# '^\%(write\|wq\|echoerr\)'
                                return s:sub(result,'^write','wq')
                              else
                                return result.'|quit'.bang
                              endif
                            endfunction
                            
                            " Section: :Git push, :Git fetch
                            
    1              0.000004 function! fugitive#PushComplete(A, L, P, ...) abort
                              return s:CompleteSub('push', a:A, a:L, a:P, function('s:CompleteRemote'), a:000)
                            endfunction
                            
    1              0.000004 function! fugitive#FetchComplete(A, L, P, ...) abort
                              return s:CompleteSub('fetch', a:A, a:L, a:P, function('s:CompleteRemote'), a:000)
                            endfunction
                            
                            " Section: :Gdiff
                            
    1              0.000006 augroup fugitive_diff
    1              0.000201   autocmd!
    1              0.000031   autocmd BufWinLeave * nested
                                    \ if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 2 |
                                    \   call s:diffoff_all(s:Dir(+expand('<abuf>'))) |
                                    \ endif
    1              0.000019   autocmd BufWinEnter * nested
                                    \ if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 1 |
                                    \   call s:diffoff() |
                                    \ endif
    1              0.000003 augroup END
                            
    1              0.000005 function! s:can_diffoff(buf) abort
                              return getwinvar(bufwinnr(a:buf), '&diff') &&
                                    \ !empty(getwinvar(bufwinnr(a:buf), 'fugitive_diff_restore'))
                            endfunction
                            
    1              0.000003 function! fugitive#CanDiffoff(buf) abort
                              return s:can_diffoff(bufnr(a:buf))
                            endfunction
                            
    1              0.000004 function! s:diff_modifier(count) abort
                              let fdc = matchstr(&diffopt, 'foldcolumn:\zs\d\+')
                              if &diffopt =~# 'horizontal' && &diffopt !~# 'vertical'
                                return ''
                              elseif &diffopt =~# 'vertical'
                                return 'vertical '
                              elseif winwidth(0) <= a:count * ((&tw ? &tw : 80) + (empty(fdc) ? 2 : fdc))
                                return ''
                              else
                                return 'vertical '
                              endif
                            endfunction
                            
    1              0.000003 function! s:diff_window_count() abort
                              let c = 0
                              for nr in range(1,winnr('$'))
                                let c += getwinvar(nr,'&diff')
                              endfor
                              return c
                            endfunction
                            
    1              0.000003 function! s:diff_restore() abort
                              let restore = 'setlocal nodiff noscrollbind'
                                    \ . ' scrollopt=' . &l:scrollopt
                                    \ . (&l:wrap ? ' wrap' : ' nowrap')
                                    \ . ' foldlevel=999'
                                    \ . ' foldmethod=' . &l:foldmethod
                                    \ . ' foldcolumn=' . &l:foldcolumn
                                    \ . ' foldlevel=' . &l:foldlevel
                                    \ . (&l:foldenable ? ' foldenable' : ' nofoldenable')
                              if has('cursorbind')
                                let restore .= (&l:cursorbind ? ' ' : ' no') . 'cursorbind'
                              endif
                              return restore
                            endfunction
                            
    1              0.000002 function! s:diffthis() abort
                              if !&diff
                                let w:fugitive_diff_restore = s:diff_restore()
                                diffthis
                              endif
                            endfunction
                            
    1              0.000003 function! s:diffoff() abort
                              if exists('w:fugitive_diff_restore') && v:version < 704
                                execute w:fugitive_diff_restore
                              endif
                              unlet! w:fugitive_diff_restore
                              diffoff
                            endfunction
                            
    1              0.000003 function! s:diffoff_all(dir) abort
                              let curwin = winnr()
                              for nr in range(1,winnr('$'))
                                if getwinvar(nr, '&diff') && !empty(getwinvar(nr, 'fugitive_diff_restore'))
                                  if v:version < 704
                                    if nr != winnr()
                                      execute nr.'wincmd w'
                                    endif
                                    execute w:fugitive_diff_restore
                                  endif
                                  call setwinvar(nr, 'fugitive_diff_restore', '')
                                endif
                              endfor
                              if curwin != winnr()
                                execute curwin.'wincmd w'
                              endif
                              diffoff!
                            endfunction
                            
    1              0.000004 function! s:CompareAge(mine, theirs) abort
                              let scores = {':0': 1, ':1': 2, ':2': 3, ':': 4, ':3': 5}
                              let mine = substitute(a:mine, '^:', '', '')
                              let theirs = substitute(a:theirs, '^:', '', '')
                              let my_score    = get(scores, ':'.mine, 0)
                              let their_score = get(scores, ':'.theirs, 0)
                              if my_score || their_score
                                return my_score < their_score ? -1 : my_score != their_score
                              elseif mine ==# theirs
                                return 0
                              endif
                              let base = s:TreeChomp('merge-base', mine, theirs)
                              if base ==# mine
                                return -1
                              elseif base ==# theirs
                                return 1
                              endif
                              let my_time    = +s:TreeChomp('log', '--max-count=1', '--pretty=format:%at', a:mine, '--')
                              let their_time = +s:TreeChomp('log', '--max-count=1', '--pretty=format:%at', a:theirs, '--')
                              return my_time < their_time ? -1 : my_time != their_time
                            endfunction
                            
    1              0.000003 function! s:IsConflicted() abort
                              return len(@%) && !empty(s:ChompDefault('', 'ls-files', '--unmerged', '--', expand('%:p')))
                            endfunction
                            
    1              0.000004 function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, args) abort
                              exe s:VersionCheck()
                              let args = s:ArgSplit(a:arg)
                              let post = ''
                              if get(args, 0) =~# '^+'
                                let post = remove(args, 0)[1:-1]
                              endif
                              if exists(':DiffGitCached') && empty(args)
                                return s:Mods(a:mods) . 'DiffGitCached' . (len(post) ? '|' . post : '')
                              endif
                              let commit = s:DirCommitFile(@%)[1]
                              if a:mods =~# '\<tab\>'
                                let mods = substitute(a:mods, '\<tab\>', '', 'g')
                                let pre = 'tab split'
                              else
                                let mods = 'keepalt ' . a:mods
                                let pre = ''
                              endif
                              let back = exists('*win_getid') ? 'call win_gotoid(' . win_getid() . ')' : 'wincmd p'
                              if (empty(args) || args[0] ==# ':') && a:keepfocus
                                exe s:DirCheck()
                                if commit =~# '^1\=$' && s:IsConflicted()
                                  let parents = [s:Relative(':2:'), s:Relative(':3:')]
                                elseif empty(commit)
                                  let parents = [s:Relative(':0:')]
                                elseif commit =~# '^\d\=$'
                                  let parents = [s:Relative('@:')]
                                elseif commit =~# '^\x\x\+$'
                                  let parents = s:LinesError(['rev-parse', commit . '^@'])[0]
                                  call map(parents, 's:Relative(v:val . ":")')
                                endif
                              endif
                              try
                                if exists('parents') && len(parents) > 1
                                  exe pre
                                  let mods = (a:autodir ? s:diff_modifier(len(parents) + 1) : '') . s:Mods(mods, 'leftabove')
                                  let nr = bufnr('')
                                  execute mods 'split' s:fnameescape(fugitive#Find(parents[0]))
                                  call s:Map('n', 'dp', ':diffput '.nr.'<Bar>diffupdate<CR>', '<silent>')
                                  let nr2 = bufnr('')
                                  call s:diffthis()
                                  exe back
                                  call s:Map('n', 'd2o', ':diffget '.nr2.'<Bar>diffupdate<CR>', '<silent>')
                                  let mods = substitute(mods, '\Cleftabove\|rightbelow\|aboveleft\|belowright', '\=submatch(0) =~# "f" ? "rightbelow" : "leftabove"', '')
                                  for i in range(len(parents)-1, 1, -1)
                                    execute mods 'split' s:fnameescape(fugitive#Find(parents[i]))
                                    call s:Map('n', 'dp', ':diffput '.nr.'<Bar>diffupdate<CR>', '<silent>')
                                    let nrx = bufnr('')
                                    call s:diffthis()
                                    exe back
                                    call s:Map('n', 'd' . (i + 2) . 'o', ':diffget '.nrx.'<Bar>diffupdate<CR>', '<silent>')
                                  endfor
                                  call s:diffthis()
                                  if len(parents) > 1
                                    wincmd =
                                  endif
                                  return post
                                elseif len(args)
                                  let arg = join(args, ' ')
                                  if arg ==# ''
                                    return post
                                  elseif arg ==# ':/'
                                    exe s:DirCheck()
                                    let file = s:Relative()
                                  elseif arg ==# ':'
                                    exe s:DirCheck()
                                    let file = s:Relative(':0:')
                                  elseif arg =~# '^:\d$'
                                    exe s:DirCheck()
                                    let file = s:Relative(arg . ':')
                                  elseif arg =~# '^[~^]\d*$'
                                    return 'echoerr ' . string('fugitive: change ' . arg . ' to !' . arg . ' to diff against ancestor')
                                  else
                                    try
                                      let file = arg =~# '^:/.' ? fugitive#RevParse(arg) . s:Relative(':') : s:Expand(arg)
                                    catch /^fugitive:/
                                      return 'echoerr ' . string(v:exception)
                                    endtry
                                  endif
                                elseif exists('parents') && len(parents)
                                  let file = parents[-1]
                                elseif len(commit)
                                  let file = s:Relative()
                                elseif s:IsConflicted()
                                  let file = s:Relative(':1:')
                                  let post = 'echohl WarningMsg|echo "Use :Gdiffsplit! for 3 way diff"|echohl NONE|' . post
                                else
                                  exe s:DirCheck()
                                  let file = s:Relative(':0:')
                                endif
                                let spec = s:Generate(file)
                                if spec =~# '^fugitive:' && empty(s:DirCommitFile(spec)[2])
                                  let spec = FugitiveVimPath(spec . s:Relative('/'))
                                endif
                                exe pre
                                let restore = s:diff_restore()
                                let w:fugitive_diff_restore = restore
                                if len(spec) && s:CompareAge(commit, s:DirCommitFile(spec)[1]) < 0
                                  let mods = s:Mods(mods, 'rightbelow')
                                else
                                  let mods = s:Mods(mods, 'leftabove')
                                endif
                                let mods = (a:autodir ? s:diff_modifier(2) : '') . mods
                                if &diffopt =~# 'vertical'
                                  let diffopt = &diffopt
                                  set diffopt-=vertical
                                endif
                                execute mods 'diffsplit' s:fnameescape(spec)
                                let &l:readonly = &l:readonly
                                redraw
                                let w:fugitive_diff_restore = restore
                                let winnr = winnr()
                                if getwinvar('#', '&diff')
                                  if a:keepfocus
                                    exe back
                                  endif
                                endif
                                return post
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              finally
                                if exists('diffopt')
                                  let &diffopt = diffopt
                                endif
                              endtry
                            endfunction
                            
                            " Section: :GMove, :GRemove
                            
    1              0.000004 function! s:Move(force, rename, destination) abort
                              let dir = s:Dir()
                              exe s:DirCheck(dir)
                              if s:DirCommitFile(@%)[1] !~# '^0\=$' || empty(@%)
                                return 'echoerr ' . string('fugitive: mv not supported for this buffer')
                              endif
                              if a:destination =~# '^\a\+:\|^/'
                                let destination = a:destination
                              elseif a:destination =~# '^:/:\='
                                let destination = s:Tree(dir) . substitute(a:destination, '^:/:\=', '', '')
                              elseif a:destination =~# '^:(\%(top\|top,literal\|literal,top\))'
                                let destination = s:Tree(dir) . matchstr(a:destination, ')\zs.*')
                              elseif a:destination =~# '^:(literal)'
                                let destination = simplify(getcwd() . '/' . matchstr(a:destination, ')\zs.*'))
                              elseif a:rename
                                let destination = simplify(expand('%:p:s?[\/]$??:h') . '/' . a:destination)
                              elseif a:destination =~# '^\.\.\=\%(/\|$\)'
                                let destination = simplify(getcwd() . '/' . a:destination)
                              else
                                let destination = s:Tree(dir) . '/' . a:destination
                              endif
                              let destination = s:Slash(destination)
                              if isdirectory(@%)
                                setlocal noswapfile
                              endif
                              let [message, exec_error] = s:ChompError(['mv'] + (a:force ? ['-f'] : []) + ['--', expand('%:p'), destination], dir)
                              if exec_error
                                let v:errmsg = 'fugitive: '.message
                                return 'echoerr v:errmsg'
                              endif
                              if isdirectory(destination)
                                let destination = fnamemodify(s:sub(destination,'/$','').'/'.expand('%:t'),':.')
                              endif
                              let reload = '|call fugitive#ReloadStatus(' . string(dir) . ', 1)'
                              if empty(s:DirCommitFile(@%)[1])
                                if isdirectory(destination)
                                  return 'keepalt edit '.s:fnameescape(destination) . reload
                                else
                                  return 'keepalt saveas! '.s:fnameescape(destination) . reload
                                endif
                              else
                                return 'file '.s:fnameescape(fugitive#Find(':0:'.destination, dir)) . reload
                              endif
                            endfunction
                            
    1              0.000003 function! fugitive#RenameComplete(A,L,P) abort
                              if a:A =~# '^[.:]\=/'
                                return fugitive#CompletePath(a:A)
                              else
                                let pre = s:Slash(fnamemodify(expand('%:p:s?[\/]$??'), ':h')) . '/'
                                return map(fugitive#CompletePath(pre.a:A), 'strpart(v:val, len(pre))')
                              endif
                            endfunction
                            
    1              0.000005 function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, args) abort
                              return s:Move(a:bang, 0, a:arg)
                            endfunction
                            
    1              0.000005 function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, args) abort
                              return s:Move(a:bang, 1, a:arg)
                            endfunction
                            
    1              0.000003 function! s:Remove(after, force) abort
                              let dir = s:Dir()
                              exe s:DirCheck(dir)
                              if len(@%) && s:DirCommitFile(@%)[1] ==# ''
                                let cmd = ['rm']
                              elseif s:DirCommitFile(@%)[1] ==# '0'
                                let cmd = ['rm','--cached']
                              else
                                return 'echoerr ' . string('fugitive: rm not supported for this buffer')
                              endif
                              if a:force
                                let cmd += ['--force']
                              endif
                              let [message, exec_error] = s:ChompError(cmd + ['--', expand('%:p')], dir)
                              if exec_error
                                let v:errmsg = 'fugitive: '.s:sub(message,'error:.*\zs\n\(.*-f.*',' (add ! to force)')
                                return 'echoerr '.string(v:errmsg)
                              else
                                return a:after . (a:force ? '!' : ''). '|call fugitive#ReloadStatus(' . string(dir) . ', 1)'
                              endif
                            endfunction
                            
    1              0.000006 function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, args) abort
                              return s:Remove('edit', a:bang)
                            endfunction
                            
    1              0.000005 function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, args) abort
                              return s:Remove('bdelete', a:bang)
                            endfunction
                            
                            " Section: :Git blame
                            
    1              0.000003 function! s:Keywordprg() abort
                              let args = ' --git-dir='.escape(s:Dir(),"\\\"' ")
                              if has('gui_running') && !has('win32')
                                return s:GitShellCmd() . ' --no-pager' . args . ' log -1'
                              else
                                return s:GitShellCmd() . args . ' show'
                              endif
                            endfunction
                            
    1              0.000003 function! s:linechars(pattern) abort
                              let chars = strlen(s:gsub(matchstr(getline('.'), a:pattern), '.', '.'))
                              if exists('*synconcealed') && &conceallevel > 1
                                for col in range(1, chars)
                                  let chars -= synconcealed(line('.'), col)[0]
                                endfor
                              endif
                              return chars
                            endfunction
                            
    1              0.000003 function! s:BlameBufnr(...) abort
                              let state = s:TempState(bufname(a:0 ? a:1 : ''))
                              if get(state, 'filetype', '') ==# 'fugitiveblame'
                                return get(state, 'origin_bufnr', -1)
                              else
                                return -1
                              endif
                            endfunction
                            
    1              0.000003 function! s:BlameCommitFileLnum(...) abort
                              let line = a:0 ? a:1 : getline('.')
                              let state = a:0 > 1 ? a:2 : s:TempState()
                              if get(state, 'filetype', '') !=# 'fugitiveblame'
                                return ['', '', 0]
                              endif
                              let commit = matchstr(line, '^\^\=[?*]*\zs\x\+')
                              if commit =~# '^0\+$'
                                let commit = ''
                              elseif has_key(state, 'blame_reverse_end')
                                let commit = get(s:LinesError(state.dir, 'rev-list', '--ancestry-path', '--reverse', commit . '..' . state.blame_reverse_end)[0], 0, '')
                              endif
                              let lnum = +matchstr(line, ' \zs\d\+\ze \%((\| *\d\+)\)')
                              let path = matchstr(line, '^\^\=[?*]*\x* \+\%(\d\+ \+\d\+ \+\)\=\zs.\{-\}\ze\s*\d\+ \%((\| *\d\+)\)')
                              if empty(path) && lnum
                                let path = get(state, 'blame_file', '')
                              endif
                              return [commit, path, lnum]
                            endfunction
                            
    1              0.000002 function! s:BlameLeave() abort
                              let bufwinnr = bufwinnr(s:BlameBufnr())
                              if bufwinnr > 0
                                let bufnr = bufnr('')
                                exe bufwinnr . 'wincmd w'
                                return bufnr . 'bdelete'
                              endif
                              return ''
                            endfunction
                            
    1              0.000002 function! s:BlameQuit() abort
                              let cmd = s:BlameLeave()
                              if empty(cmd)
                                return 'bdelete'
                              elseif len(s:DirCommitFile(@%)[1])
                                return cmd . '|Gedit'
                              else
                                return cmd
                              endif
                            endfunction
                            
    1              0.000003 function! fugitive#BlameComplete(A, L, P) abort
                              return s:CompleteSub('blame', a:A, a:L, a:P)
                            endfunction
                            
    1              0.000004 function! s:BlameSubcommand(line1, count, range, bang, mods, options) abort
                              let dir = s:Dir()
                              exe s:DirCheck(dir)
                              let flags = copy(a:options.subcommand_args)
                              let i = 0
                              let raw = 0
                              let commits = []
                              let files = []
                              let ranges = []
                              if a:line1 > 0 && a:count > 0 && a:range != 1
                                call extend(ranges, ['-L', a:line1 . ',' . a:count])
                              endif
                              while i < len(flags)
                                let match = matchlist(flags[i], '^\(-[a-zABDFH-KN-RT-Z]\)\ze\(.*\)')
                                if len(match) && len(match[2])
                                  call insert(flags, match[1])
                                  let flags[i+1] = '-' . match[2]
                                  continue
                                endif
                                let arg = flags[i]
                                if arg =~# '^-p$\|^--\%(help\|porcelain\|line-porcelain\|incremental\)$'
                                  let raw = 1
                                elseif arg ==# '--contents' && i + 1 < len(flags)
                                  call extend(commits, remove(flags, i, i+1))
                                  continue
                                elseif arg ==# '-L' && i + 1 < len(flags)
                                  call extend(ranges, remove(flags, i, i+1))
                                  continue
                                elseif arg =~# '^--contents='
                                  call add(commits, remove(flags, i))
                                  continue
                                elseif arg =~# '^-L.'
                                  call add(ranges, remove(flags, i))
                                  continue
                                elseif arg =~# '^-[GLS]$\|^--\%(date\|encoding\|contents\|ignore-rev\|ignore-revs-file\)$'
                                  let i += 1
                                  if i == len(flags)
                                    echohl ErrorMsg
                                    echo s:ChompError(['blame', arg])[0]
                                    echohl NONE
                                    return ''
                                  endif
                                elseif arg ==# '--'
                                  if i + 1 < len(flags)
                                    call extend(files, remove(flags, i + 1, -1))
                                  endif
                                  call remove(flags, i)
                                  break
                                elseif arg !~# '^-' && (s:HasOpt(flags, '--not') || arg !~# '^\^')
                                  if index(flags, '--') >= 0
                                    call add(commits, remove(flags, i))
                                    continue
                                  endif
                                  if arg =~# '\.\.' && arg !~# '^\.\.\=\%(/\|$\)' && empty(commits)
                                    call add(commits, remove(flags, i))
                                    continue
                                  endif
                                  try
                                    let dcf = s:DirCommitFile(fugitive#Find(arg, dir))
                                    if len(dcf[1]) && empty(dcf[2])
                                      call add(commits, remove(flags, i))
                                      continue
                                    endif
                                  catch /^fugitive:/
                                  endtry
                                  call add(files, remove(flags, i))
                                  continue
                                endif
                                let i += 1
                              endwhile
                              let file = substitute(get(files, 0, get(s:TempState(), 'blame_file', s:Relative('./', dir))), '^\.\%(/\|$\)', '', '')
                              if empty(commits) && len(files) > 1
                                call add(commits, remove(files, 1))
                              endif
                              exe s:BlameLeave()
                              try
                                let cmd = a:options.flags + ['--no-pager', '-c', 'blame.coloring=none', '-c', 'blame.blankBoundary=false', a:options.subcommand, '--show-number']
                                call extend(cmd, filter(copy(flags), 'v:val !~# "\\v^%(-b|--%(no-)=color-.*|--progress)$"'))
                                if a:count > 0 && empty(ranges)
                                  let cmd += ['-L', (a:line1 ? a:line1 : line('.')) . ',' . (a:line1 ? a:line1 : line('.'))]
                                endif
                                call extend(cmd, ranges)
                                let tempname = tempname()
                                let temp = tempname . (raw ? '' : '.fugitiveblame')
                                if len(commits)
                                  let cmd += commits
                                elseif empty(files) && len(matchstr(s:DirCommitFile(@%)[1], '^\x\x\+$'))
                                  let cmd += [matchstr(s:DirCommitFile(@%)[1], '^\x\x\+$')]
                                elseif empty(files) && !s:HasOpt(flags, '--reverse')
                                  let cmd += ['--contents', tempname . '.in']
                                  silent execute 'noautocmd keepalt %write ' . s:fnameescape(tempname . '.in')
                                  let delete_in = 1
                                endif
                                let basecmd = [{'git': a:options.git, 'dir': dir}] + ['--literal-pathspecs'] + cmd + ['--'] + (len(files) ? files : [file])
                                let [err, exec_error] = s:TempCmd(temp, basecmd)
                                if exists('delete_in')
                                  call delete(tempname . '.in')
                                endif
                                redraw
                                try
                                  if exec_error
                                    let lines = split(err, "\n")
                                    if empty(lines)
                                      let lines = readfile(temp)
                                    endif
                                    for i in range(len(lines))
                                      if lines[i] =~# '^error: \|^fatal: '
                                        echohl ErrorMsg
                                        echon lines[i]
                                        echohl NONE
                                        break
                                      else
                                        echon lines[i]
                                      endif
                                      if i != len(lines) - 1
                                        echon "\n"
                                      endif
                                    endfor
                                    return ''
                                  endif
                                  let temp_state = {
                                        \ 'git': a:options.git,
                                        \ 'flags': a:options.flags,
                                        \ 'args': [a:options.subcommand] + a:options.subcommand_args,
                                        \ 'dir': dir,
                                        \ 'git_dir': dir,
                                        \ 'cwd': s:UserCommandCwd(dir),
                                        \ 'filetype': (raw ? 'git' : 'fugitiveblame'),
                                        \ 'blame_options': a:options,
                                        \ 'blame_flags': flags,
                                        \ 'blame_file': file}
                                  if s:HasOpt(flags, '--reverse')
                                    let temp_state.blame_reverse_end = matchstr(get(commits, 0, ''), '\.\.\zs.*')
                                  endif
                                  if (a:line1 == 0 || a:range == 1) && a:count > 0
                                    let edit = s:Mods(a:mods) . get(['edit', 'split', 'pedit', 'vsplit', 'tabedit'], a:count - (a:line1 ? a:line1 : 1), 'split')
                                    return s:BlameCommit(edit, get(readfile(temp), 0, ''), temp_state)
                                  else
                                    let temp = s:Resolve(temp)
                                    let temp_state.file = temp
                                    call s:RunSave(temp_state)
                                    if len(ranges + commits + files) || raw
                                      let reload = '|call fugitive#ReloadStatus(fugitive#Result(' . string(temp_state.file) . '), 1)'
                                      let mods = s:Mods(a:mods)
                                      if a:count != 0
                                        exe 'silent keepalt' mods 'split' s:fnameescape(temp)
                                      elseif !&modified || a:bang || &bufhidden ==# 'hide' || (empty(&bufhidden) && &hidden)
                                        exe 'silent' mods 'edit' . (a:bang ? '! ' : ' ') . s:fnameescape(temp)
                                      else
                                        return mods . 'edit ' . s:fnameescape(temp) . reload
                                      endif
                                      return reload[1 : -1]
                                    endif
                                    if a:mods =~# '\<tab\>'
                                      silent tabedit %
                                    endif
                                    let bufnr = bufnr('')
                                    let temp_state.origin_bufnr = bufnr
                                    let restore = []
                                    let mods = substitute(a:mods, '\<tab\>', '', 'g')
                                    for winnr in range(winnr('$'),1,-1)
                                      if getwinvar(winnr, '&scrollbind')
                                        if !&l:scrollbind
                                          call setwinvar(winnr, '&scrollbind', 0)
                                        elseif winnr != winnr() && getwinvar(winnr, '&foldenable')
                                          call setwinvar(winnr, '&foldenable', 0)
                                          call add(restore, 'call setwinvar(bufwinnr('.winbufnr(winnr).'),"&foldenable",1)')
                                        endif
                                      endif
                                      if exists('+cursorbind') && !&l:cursorbind && getwinvar(winnr, '&cursorbind')
                                        call setwinvar(winnr, '&cursorbind', 0)
                                      endif
                                      if s:BlameBufnr(winbufnr(winnr)) > 0
                                        execute winbufnr(winnr).'bdelete'
                                      endif
                                    endfor
                                    let restore_winnr = 'bufwinnr(' . bufnr . ')'
                                    if !&l:scrollbind
                                      call add(restore, 'call setwinvar(' . restore_winnr . ',"&scrollbind",0)')
                                    endif
                                    if exists('+cursorbind') && !&l:cursorbind
                                      call add(restore, 'call setwinvar(' . restore_winnr . ',"&cursorbind",0)')
                                    endif
                                    if &l:wrap
                                      call add(restore, 'call setwinvar(' . restore_winnr . ',"&wrap",1)')
                                    endif
                                    if &l:foldenable
                                      call add(restore, 'call setwinvar(' . restore_winnr . ',"&foldenable",1)')
                                    endif
                                    setlocal scrollbind nowrap nofoldenable
                                    if exists('+cursorbind')
                                      setlocal cursorbind
                                    endif
                                    let top = line('w0') + &scrolloff
                                    let current = line('.')
                                    exe 'silent keepalt' (a:bang ? s:Mods(mods) . 'split' : s:Mods(mods, 'leftabove') . 'vsplit') s:fnameescape(temp)
                                    let w:fugitive_leave = join(restore, '|')
                                    execute top
                                    normal! zt
                                    execute current
                                    if exists('+cursorbind')
                                      setlocal cursorbind
                                    endif
                                    setlocal nonumber scrollbind nowrap foldcolumn=0 nofoldenable winfixwidth
                                    if exists('+relativenumber')
                                      setlocal norelativenumber
                                    endif
                                    if exists('+signcolumn')
                                      setlocal signcolumn=no
                                    endif
                                    execute "vertical resize ".(s:linechars('.\{-\}\s\+\d\+\ze)')+1)
                                    call s:Map('n', 'A', ":<C-u>exe 'vertical resize '.(<SID>linechars('.\\{-\\}\\ze [0-9:/+-][0-9:/+ -]* \\d\\+)')+1+v:count)<CR>", '<silent>')
                                    call s:Map('n', 'C', ":<C-u>exe 'vertical resize '.(<SID>linechars('^\\S\\+')+1+v:count)<CR>", '<silent>')
                                    call s:Map('n', 'D', ":<C-u>exe 'vertical resize '.(<SID>linechars('.\\{-\\}\\ze\\d\\ze\\s\\+\\d\\+)')+1-v:count)<CR>", '<silent>')
                                    redraw
                                    syncbind
                                    exe s:DoAutocmdChanged(temp_state)
                                  endif
                                endtry
                                return ''
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              endtry
                            endfunction
                            
    1              0.000011 function! s:BlameCommit(cmd, ...) abort
                              let line = a:0 ? a:1 : getline('.')
                              let state = a:0 ? a:2 : s:TempState()
                              let sigil = has_key(state, 'blame_reverse_end') ? '-' : '+'
                              let mods = (s:BlameBufnr() < 0 ? '' : &splitbelow ? "botright " : "topleft ")
                              let [commit, path, lnum] = s:BlameCommitFileLnum(line, state)
                              if empty(commit) && len(path) && has_key(state, 'blame_reverse_end')
                                let path = (len(state.blame_reverse_end) ? state.blame_reverse_end . ':' : ':(top)') . path
                                return fugitive#Open(mods . a:cmd, 0, '', '+' . lnum . ' ' . s:fnameescape(path), ['+' . lnum, path])
                              endif
                              if commit =~# '^0*$'
                                return 'echoerr ' . string('fugitive: no commit')
                              endif
                              if line =~# '^\^' && !has_key(state, 'blame_reverse_end')
                                let path = commit . ':' . path
                                return fugitive#Open(mods . a:cmd, 0, '', '+' . lnum . ' ' . s:fnameescape(path), ['+' . lnum, path])
                              endif
                              let cmd = fugitive#Open(mods . a:cmd, 0, '', commit, [commit])
                              if cmd =~# '^echoerr'
                                return cmd
                              endif
                              execute cmd
                              if a:cmd ==# 'pedit' || empty(path)
                                return ''
                              endif
                              if search('^diff .* b/\M'.escape(path,'\').'$','W')
                                call search('^+++')
                                let head = line('.')
                                while search('^@@ \|^diff ') && getline('.') =~# '^@@ '
                                  let top = +matchstr(getline('.'),' ' . sigil .'\zs\d\+')
                                  let len = +matchstr(getline('.'),' ' . sigil . '\d\+,\zs\d\+')
                                  if lnum >= top && lnum <= top + len
                                    let offset = lnum - top
                                    if &scrolloff
                                      +
                                      normal! zt
                                    else
                                      normal! zt
                                      +
                                    endif
                                    while offset > 0 && line('.') < line('$')
                                      +
                                      if getline('.') =~# '^[ ' . sigil . ']'
                                        let offset -= 1
                                      endif
                                    endwhile
                                    return 'normal! zv'
                                  endif
                                endwhile
                                execute head
                                normal! zt
                              endif
                              return ''
                            endfunction
                            
    1              0.000008 function! s:BlameJump(suffix, ...) abort
                              let suffix = a:suffix
                              let [commit, path, lnum] = s:BlameCommitFileLnum()
                              if empty(path)
                                return 'echoerr ' . string('fugitive: could not determine filename for blame')
                              endif
                              if commit =~# '^0*$'
                                let commit = '@'
                                let suffix = ''
                              endif
                              let offset = line('.') - line('w0')
                              let state = s:TempState()
                              let flags = get(state, 'blame_flags', [])
                              if a:0 && a:1
                                if s:HasOpt(flags, '--reverse')
                                  call remove(flags, '--reverse')
                                else
                                  call add(flags, '--reverse')
                                endif
                              endif
                              let blame_bufnr = s:BlameBufnr()
                              if blame_bufnr > 0
                                let bufnr = bufnr('')
                                let winnr = bufwinnr(blame_bufnr)
                                if winnr > 0
                                  exe winnr.'wincmd w'
                                  exe bufnr.'bdelete'
                                endif
                                execute 'Gedit' s:fnameescape(commit . suffix . ':' . path)
                                execute lnum
                              endif
                              let my_bufnr = bufnr('')
                              if blame_bufnr < 0
                                let blame_args = flags + [commit . suffix, '--', path]
                                let result = s:BlameSubcommand(0, 0, 0, 0, '', extend({'subcommand_args': blame_args}, state.blame_options, 'keep'))
                              else
                                let blame_args = flags
                                let result = s:BlameSubcommand(-1, -1, 0, 0, '', extend({'subcommand_args': blame_args}, state.blame_options, 'keep'))
                              endif
                              if bufnr('') == my_bufnr
                                return result
                              endif
                              execute result
                              execute lnum
                              let delta = line('.') - line('w0') - offset
                              if delta > 0
                                execute 'normal! '.delta."\<C-E>"
                              elseif delta < 0
                                execute 'normal! '.(-delta)."\<C-Y>"
                              endif
                              keepjumps syncbind
                              redraw
                              echo ':Git blame' s:fnameescape(blame_args)
                              return ''
                            endfunction
                            
    1              0.000013 let s:hash_colors = {}
                            
    1              0.000005 function! fugitive#BlameSyntax() abort
                              let conceal = has('conceal') ? ' conceal' : ''
                              let flags = get(s:TempState(), 'blame_flags', [])
                              syn spell notoplevel
                              syn match FugitiveblameBlank                      "^\s\+\s\@=" nextgroup=FugitiveblameAnnotation,FugitiveblameScoreDebug,FugitiveblameOriginalFile,FugitiveblameOriginalLineNumber skipwhite
                              syn match FugitiveblameHash       "\%(^\^\=[?*]*\)\@<=\<\x\{7,\}\>" nextgroup=FugitiveblameAnnotation,FugitiveblameScoreDebug,FugitiveblameOriginalLineNumber,FugitiveblameOriginalFile skipwhite
                              if s:HasOpt(flags, '-b') || FugitiveConfigGet('blame.blankBoundary') =~# '^1$\|^true$'
                                syn match FugitiveblameBoundaryIgnore "^\^[*?]*\x\{7,\}\>" nextgroup=FugitiveblameAnnotation,FugitiveblameScoreDebug,FugitiveblameOriginalLineNumber,FugitiveblameOriginalFile skipwhite
                              else
                                syn match FugitiveblameBoundary "^\^"
                              endif
                              syn match FugitiveblameScoreDebug        " *\d\+\s\+\d\+\s\@=" nextgroup=FugitiveblameAnnotation,FugitiveblameOriginalLineNumber,fugitiveblameOriginalFile contained skipwhite
                              syn region FugitiveblameAnnotation matchgroup=FugitiveblameDelimiter start="(" end="\%(\s\d\+\)\@<=)" contained keepend oneline
                              syn match FugitiveblameTime "\<[0-9:/+-][0-9:/+ -]*[0-9:/+-]\%(\s\+\d\+)\)\@=" contained containedin=FugitiveblameAnnotation
                              exec 'syn match FugitiveblameLineNumber         "\s[[:digit:][:space:]]\{0,' . (len(line('$'))-1). '\}\d)\@=" contained containedin=FugitiveblameAnnotation' conceal
                              exec 'syn match FugitiveblameOriginalFile       "\s\%(\f\+\D\@<=\|\D\@=\f\+\)\%(\%(\s\+\d\+\)\=\s\%((\|\s*\d\+)\)\)\@=" contained nextgroup=FugitiveblameOriginalLineNumber,FugitiveblameAnnotation skipwhite' (s:HasOpt(flags, '--show-name', '-f') ? '' : conceal)
                              exec 'syn match FugitiveblameOriginalLineNumber "\s*\d\+\%(\s(\)\@=" contained nextgroup=FugitiveblameAnnotation skipwhite' (s:HasOpt(flags, '--show-number', '-n') ? '' : conceal)
                              exec 'syn match FugitiveblameOriginalLineNumber "\s*\d\+\%(\s\+\d\+)\)\@=" contained nextgroup=FugitiveblameShort skipwhite' (s:HasOpt(flags, '--show-number', '-n') ? '' : conceal)
                              syn match FugitiveblameShort              " \d\+)" contained contains=FugitiveblameLineNumber
                              syn match FugitiveblameNotCommittedYet "(\@<=Not Committed Yet\>" contained containedin=FugitiveblameAnnotation
                              hi def link FugitiveblameBoundary           Keyword
                              hi def link FugitiveblameHash               Identifier
                              hi def link FugitiveblameBoundaryIgnore     Ignore
                              hi def link FugitiveblameUncommitted        Ignore
                              hi def link FugitiveblameScoreDebug         Debug
                              hi def link FugitiveblameTime               PreProc
                              hi def link FugitiveblameLineNumber         Number
                              hi def link FugitiveblameOriginalFile       String
                              hi def link FugitiveblameOriginalLineNumber Float
                              hi def link FugitiveblameShort              FugitiveblameDelimiter
                              hi def link FugitiveblameDelimiter          Delimiter
                              hi def link FugitiveblameNotCommittedYet    Comment
                              if !get(g:, 'fugitive_dynamic_colors', 1) && !s:HasOpt(flags, '--color-lines') || s:HasOpt(flags, '--no-color-lines')
                                return
                              endif
                              let seen = {}
                              for lnum in range(1, line('$'))
                                let orig_hash = matchstr(getline(lnum), '^\^\=[*?]*\zs\x\{6\}')
                                let hash = orig_hash
                                let hash = substitute(hash, '\(\x\)\x', '\=submatch(1).printf("%x", 15-str2nr(submatch(1),16))', 'g')
                                let hash = substitute(hash, '\(\x\x\)', '\=printf("%02x", str2nr(submatch(1),16)*3/4+32)', 'g')
                                if hash ==# '' || orig_hash ==# '000000' || has_key(seen, hash)
                                  continue
                                endif
                                let seen[hash] = 1
                                if &t_Co == 256
                                  let [s, r, g, b; __] = map(matchlist(orig_hash, '\(\x\)\x\(\x\)\x\(\x\)\x'), 'str2nr(v:val,16)')
                                  let color = 16 + (r + 1) / 3 * 36 + (g + 1) / 3 * 6 + (b + 1) / 3
                                  if color == 16
                                    let color = 235
                                  elseif color == 231
                                    let color = 255
                                  endif
                                  let s:hash_colors[hash] = ' ctermfg='.color
                                else
                                  let s:hash_colors[hash] = ''
                                endif
                                let pattern = substitute(orig_hash, '^\(\x\)\x\(\x\)\x\(\x\)\x$', '\1\\x\2\\x\3\\x', '') . '*\>'
                                exe 'syn match FugitiveblameHash'.hash.'       "\%(^\^\=[*?]*\)\@<='.pattern.'" nextgroup=FugitiveblameAnnotation,FugitiveblameOriginalLineNumber,fugitiveblameOriginalFile skipwhite'
                              endfor
                              syn match FugitiveblameUncommitted "\%(^\^\=[?*]*\)\@<=\<0\{7,\}\>" nextgroup=FugitiveblameAnnotation,FugitiveblameScoreDebug,FugitiveblameOriginalLineNumber,FugitiveblameOriginalFile skipwhite
                              call s:BlameRehighlight()
                            endfunction
                            
    1              0.000009 function! s:BlameRehighlight() abort
                              for [hash, cterm] in items(s:hash_colors)
                                if !empty(cterm) || has('gui_running') || has('termguicolors') && &termguicolors
                                  exe 'hi FugitiveblameHash'.hash.' guifg=#' . hash . cterm
                                else
                                  exe 'hi link FugitiveblameHash'.hash.' Identifier'
                                endif
                              endfor
                            endfunction
                            
    1              0.000005 function! fugitive#BlameFileType() abort
                              setlocal nomodeline
                              setlocal foldmethod=manual
                              if len(s:Dir())
                                let &l:keywordprg = s:Keywordprg()
                              endif
                              let b:undo_ftplugin = 'setl keywordprg= foldmethod<'
                              if exists('+concealcursor')
                                setlocal concealcursor=nc conceallevel=2
                                let b:undo_ftplugin .= ' concealcursor< conceallevel<'
                              endif
                              if &modifiable
                                return ''
                              endif
                              call s:Map('n', '<F1>', ':help :Git_blame<CR>', '<silent>')
                              call s:Map('n', 'g?',   ':help :Git_blame<CR>', '<silent>')
                              if mapcheck('q', 'n') =~# '^$\|bdelete'
                                call s:Map('n', 'q',  ':echoerr "fugitive: q removed in favor of gq (or :q)"<CR>', '<silent>')
                              endif
                              call s:Map('n', 'gq',   ':exe <SID>BlameQuit()<CR>', '<silent>')
                              call s:Map('n', '<2-LeftMouse>', ':<C-U>exe <SID>BlameCommit("exe <SID>BlameLeave()<Bar>edit")<CR>', '<silent>')
                              call s:Map('n', '<CR>', ':<C-U>exe <SID>BlameCommit("exe <SID>BlameLeave()<Bar>edit")<CR>', '<silent>')
                              call s:Map('n', '-',    ':<C-U>exe <SID>BlameJump("")<CR>', '<silent>')
                              call s:Map('n', 's',    ':<C-U>exe <SID>BlameJump("")<CR>', '<silent>')
                              call s:Map('n', 'u',    ':<C-U>exe <SID>BlameJump("")<CR>', '<silent>')
                              call s:Map('n', 'P',    ':<C-U>exe <SID>BlameJump("^".v:count1)<CR>', '<silent>')
                              call s:Map('n', '~',    ':<C-U>exe <SID>BlameJump("~".v:count1)<CR>', '<silent>')
                              call s:Map('n', 'i',    ':<C-U>exe <SID>BlameCommit("exe <SID>BlameLeave()<Bar>edit")<CR>', '<silent>')
                              call s:Map('n', 'o',    ':<C-U>exe <SID>BlameCommit("split")<CR>', '<silent>')
                              call s:Map('n', 'O',    ':<C-U>exe <SID>BlameCommit("tabedit")<CR>', '<silent>')
                              call s:Map('n', 'p',    ':<C-U>exe <SID>BlameCommit("pedit")<CR>', '<silent>')
                              call s:Map('n', '.',    ":<C-U> <C-R>=substitute(<SID>BlameCommitFileLnum()[0],'^$','@','')<CR><Home>")
                            endfunction
                            
    1              0.000021 augroup fugitive_blame
    1              0.000210   autocmd!
    1              0.000077   autocmd ColorScheme,GUIEnter * call s:BlameRehighlight()
    1              0.000031   autocmd BufWinLeave * execute getwinvar(+bufwinnr(+expand('<abuf>')), 'fugitive_leave')
    1              0.000005 augroup END
                            
                            " Section: :GBrowse
                            
    1              0.000011 function! s:BrowserOpen(url, mods, echo_copy) abort
                              let url = substitute(a:url, '[ <>\|"]', '\="%".printf("%02X",char2nr(submatch(0)))', 'g')
                              let mods = s:Mods(a:mods)
                              if a:echo_copy
                                if has('clipboard')
                                  let @+ = url
                                endif
                                return 'echo '.string(url)
                              elseif exists(':Browse') == 2
                                return 'echo '.string(url).'|' . mods . 'Browse '.url
                              elseif exists(':OpenBrowser') == 2
                                return 'echo '.string(url).'|' . mods . 'OpenBrowser '.url
                              else
                                if !exists('g:loaded_netrw')
                                  runtime! autoload/netrw.vim
                                endif
                                if exists('*netrw#BrowseX')
                                  return 'echo '.string(url).'|' . mods . 'call netrw#BrowseX('.string(url).', 0)'
                                elseif exists('*netrw#NetrwBrowseX')
                                  return 'echo '.string(url).'|' . mods . 'call netrw#NetrwBrowseX('.string(url).', 0)'
                                else
                                  return 'echoerr ' . string('Netrw not found. Define your own :Browse to use :GBrowse')
                                endif
                              endif
                            endfunction
                            
    1              0.000023 function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, args) abort
                              exe s:VersionCheck()
                              let dir = s:Dir()
                              try
                                let arg = a:arg
                                if arg =~# '^++remote='
                                  let remote = matchstr(arg, '^++remote=\zs\S\+')
                                  let arg = matchstr(arg, '\s\zs\S.*')
                                endif
                                let validremote = '\.\|\.\=/.*\|[[:alnum:]_-]\+\%(://.\{-\}\)\='
                                if arg ==# '-'
                                  let remote = ''
                                  let rev = ''
                                  let result = fugitive#Result()
                                  if filereadable(get(result, 'file', ''))
                                    for line in readfile(result.file, 4096)
                                      let rev = s:fnameescape(matchstr(line, '\<https\=://[^[:space:]<>]*[^[:space:]<>.,;:"''!?]'))
                                      if len(rev)
                                        break
                                      endif
                                    endfor
                                    if empty(rev)
                                      return 'echoerr ' . string('fugitive: no URL found in output of last :Git')
                                    endif
                                  endif
                                elseif !exists('l:remote')
                                  let remote = matchstr(arg, '@\zs\%('.validremote.'\)$')
                                  let rev = substitute(arg, '@\%('.validremote.'\)$','','')
                                else
                                  let rev = arg
                                endif
                                if rev =~? '^\a\a\+:[\/][\/]' && rev !~? '^fugitive:'
                                  let rev = substitute(rev, '\\\@<![#!]\|\\\@<!%\ze\w', '\\&', 'g')
                                elseif rev ==# ':'
                                  let rev = ''
                                endif
                                let expanded = s:Expand(rev)
                                if expanded =~? '^\a\a\+:[\/][\/]' && expanded !~? '^fugitive:'
                                  return s:BrowserOpen(s:Slash(expanded), a:mods, a:bang)
                                endif
                                exe s:DirCheck(dir)
                                if empty(expanded)
                                  let bufname = s:BufName('%')
                                  let expanded = s:DirRev(bufname)[1]
                                  if empty(expanded)
                                    let expanded = fugitive#Path(bufname, ':(top)', dir)
                                  endif
                                  if a:count > 0 && bufname !=# bufname('')
                                    let blame = s:BlameCommitFileLnum(getline(a:count))
                                    if len(blame[0])
                                      let expanded = blame[0]
                                    endif
                                  endif
                                endif
                                let cdir = FugitiveVimPath(fugitive#CommonDir(dir))
                                for subdir in ['tags/', 'heads/', 'remotes/']
                                  if expanded !~# '^[./]' && filereadable(cdir . '/refs/' . subdir . expanded)
                                    let expanded = '.git/refs/' . subdir . expanded
                                  endif
                                endfor
                                let full = s:Generate(expanded, dir)
                                let commit = ''
                                if full =~? '^fugitive:'
                                  let [dir, commit, path] = s:DirCommitFile(full)
                                  if commit =~# '^:\=\d$'
                                    let commit = ''
                                  endif
                                  if commit =~ '..'
                                    let type = s:TreeChomp(['cat-file','-t',commit.s:sub(path,'^/',':')], dir)
                                    let branch = matchstr(expanded, '^[^:]*')
                                  elseif empty(path) || path ==# '/'
                                    let type = 'tree'
                                  else
                                    let type = 'blob'
                                  endif
                                  let path = path[1:-1]
                                elseif empty(s:Tree(dir))
                                  let path = '.git/' . full[strlen(dir)+1:-1]
                                  let type = ''
                                else
                                  let path = fugitive#Path(full, '/')[1:-1]
                                  if path =~# '^\.git/'
                                    let type = ''
                                  elseif isdirectory(full) || empty(path)
                                    let type = 'tree'
                                  else
                                    let type = 'blob'
                                  endif
                                endif
                                if type ==# 'tree' && !empty(path)
                                  let path = s:sub(path, '/\=$', '/')
                                endif
                                if path =~# '^\.git/.*HEAD$' && filereadable(dir . '/' . path[5:-1])
                                  let body = readfile(dir . '/' . path[5:-1])[0]
                                  if body =~# '^\x\{40,\}$'
                                    let commit = body
                                    let type = 'commit'
                                    let path = ''
                                  elseif body =~# '^ref: refs/'
                                    let path = '.git/' . matchstr(body,'ref: \zs.*')
                                  endif
                                endif
                            
                                let merge = ''
                                if path =~# '^\.git/refs/remotes/.'
                                  if empty(remote)
                                    let remote = matchstr(path, '^\.git/refs/remotes/\zs[^/]\+')
                                    let branch = matchstr(path, '^\.git/refs/remotes/[^/]\+/\zs.\+')
                                  else
                                    let merge = matchstr(path, '^\.git/refs/remotes/[^/]\+/\zs.\+')
                                    let path = '.git/refs/heads/'.merge
                                  endif
                                elseif path =~# '^\.git/refs/heads/.'
                                  let branch = path[16:-1]
                                elseif !exists('branch')
                                  let branch = FugitiveHead(0, dir)
                                endif
                                if !empty(branch)
                                  let r = FugitiveConfigGet('branch.'.branch.'.remote', dir)
                                  let m = FugitiveConfigGet('branch.'.branch.'.merge', dir)[11:-1]
                                  if r ==# '.' && !empty(m)
                                    let r2 = FugitiveConfigGet('branch.'.m.'.remote', dir)
                                    if r2 !~# '^\.\=$'
                                      let r = r2
                                      let m = FugitiveConfigGet('branch.'.m.'.merge', dir)[11:-1]
                                    endif
                                  endif
                                  if empty(remote)
                                    let remote = r
                                  endif
                                  if r ==# '.' || r ==# remote
                                    let remote_ref = 'refs/remotes/' . remote . '/' . branch
                                    if FugitiveConfigGet('push.default', dir) ==# 'upstream' ||
                                          \ !filereadable(FugitiveFind('.git/' . remote_ref, dir)) && s:ChompError(['rev-parse', '--verify', remote_ref, '--'], dir)[1]
                                      let merge = m
                                      if path =~# '^\.git/refs/heads/.'
                                        let path = '.git/refs/heads/'.merge
                                      endif
                                    else
                                      let merge = branch
                                    endif
                                  endif
                                endif
                            
                                let line1 = a:count > 0 && type ==# 'blob' ? a:line1 : 0
                                let line2 = a:count > 0 && type ==# 'blob' ? a:count : 0
                                if empty(commit) && path !~# '^\.git/'
                                  if a:count < 0 && !empty(merge)
                                    let commit = merge
                                  else
                                    let commit = ''
                                    if len(merge)
                                      let owner = s:Owner(@%, dir)
                                      let [commit, exec_error] = s:ChompError(['merge-base', 'refs/remotes/' . remote . '/' . merge, empty(owner) ? '@' : owner, '--'], dir)
                                      if exec_error
                                        let commit = ''
                                      endif
                                      if line2 > 0 && empty(arg) && commit =~# '^\x\{40,\}$'
                                        let blame_list = tempname()
                                        call writefile([commit, ''], blame_list, 'b')
                                        let blame_in = tempname()
                                        silent exe '%write' blame_in
                                        let [blame, exec_error] = s:LinesError(['-c', 'blame.coloring=none', 'blame', '--contents', blame_in, '-L', line1.','.line2, '-S', blame_list, '-s', '--show-number', './' . path], dir)
                                        if !exec_error
                                          let blame_regex = '^\^\x\+\s\+\zs\d\+\ze\s'
                                          if get(blame, 0) =~# blame_regex && get(blame, -1) =~# blame_regex
                                            let line1 = +matchstr(blame[0], blame_regex)
                                            let line2 = +matchstr(blame[-1], blame_regex)
                                          else
                                            call s:throw("Can't browse to uncommitted change")
                                          endif
                                        endif
                                      endif
                                    endif
                                  endif
                                  if empty(commit)
                                    let commit = readfile(fugitive#Find('.git/HEAD', dir), '', 1)[0]
                                  endif
                                  let i = 0
                                  while commit =~# '^ref: ' && i < 10
                                    let ref_file = cdir . '/' . commit[5:-1]
                                    if getfsize(ref_file) > 0
                                      let commit = readfile(ref_file, '', 1)[0]
                                    else
                                      let commit = fugitive#RevParse(commit[5:-1], dir)
                                    endif
                                    let i -= 1
                                  endwhile
                                endif
                            
                                if empty(remote)
                                  let remote = '.'
                                endif
                                let raw = fugitive#RemoteUrl(remote, dir)
                                if empty(raw)
                                  let raw = remote
                                endif
                            
                                let opts = {
                                      \ 'git_dir': dir,
                                      \ 'dir': dir,
                                      \ 'repo': fugitive#repo(dir),
                                      \ 'remote': raw,
                                      \ 'revision': 'No longer provided',
                                      \ 'commit': commit,
                                      \ 'path': path,
                                      \ 'type': type,
                                      \ 'line1': line1,
                                      \ 'line2': line2}
                            
                                let url = ''
                                for Handler in get(g:, 'fugitive_browse_handlers', [])
                                  let url = call(Handler, [copy(opts)])
                                  if !empty(url)
                                    break
                                  endif
                                endfor
                            
                                if empty(url)
                                  call s:throw("No GBrowse handler installed for '".raw."'")
                                endif
                            
                                return s:BrowserOpen(url, a:mods, a:bang)
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              endtry
                            endfunction
                            
                            " Section: Go to file
                            
    1              0.000014 let s:ref_header = '\%(Merge\|Rebase\|Upstream\|Pull\|Push\)'
                            
    1              0.000075 nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>
    1              0.000009 function! fugitive#MapCfile(...) abort
                              exe 'cnoremap <buffer> <expr> <Plug><cfile>' (a:0 ? a:1 : 'fugitive#Cfile()')
                              let b:undo_ftplugin = get(b:, 'undo_ftplugin', 'exe') . '|sil! exe "cunmap <buffer> <Plug><cfile>"'
                              if !exists('g:fugitive_no_maps')
                                call s:Map('n', 'gf',          '<SID>:find <Plug><cfile><CR>', '<silent><unique>', 1)
                                call s:Map('n', '<C-W>f',     '<SID>:sfind <Plug><cfile><CR>', '<silent><unique>', 1)
                                call s:Map('n', '<C-W><C-F>', '<SID>:sfind <Plug><cfile><CR>', '<silent><unique>', 1)
                                call s:Map('n', '<C-W>gf',  '<SID>:tabfind <Plug><cfile><CR>', '<silent><unique>', 1)
                                call s:Map('c', '<C-R><C-F>', '<Plug><cfile>', '<silent><unique>', 1)
                              endif
                            endfunction
                            
    1              0.000008 function! s:ContainingCommit() abort
                              let commit = s:Owner(@%)
                              return empty(commit) ? '@' : commit
                            endfunction
                            
    1              0.000005 function! s:SquashArgument(...) abort
                              if &filetype == 'fugitive'
                                let commit = matchstr(getline('.'), '^\%(\%(\x\x\x\)\@!\l\+\s\+\)\=\zs[0-9a-f]\{4,\}\ze \|^' . s:ref_header . ': \zs\S\+')
                              elseif has_key(s:temp_files, s:cpath(expand('%:p')))
                                let commit = matchstr(getline('.'), '\S\@<!\x\{4,\}\>')
                              else
                                let commit = s:Owner(@%)
                              endif
                              return len(commit) && a:0 ? printf(a:1, commit) : commit
                            endfunction
                            
    1              0.000005 function! s:RebaseArgument() abort
                              return s:SquashArgument(' %s^')
                            endfunction
                            
    1              0.000006 function! s:NavigateUp(count) abort
                              let rev = substitute(s:DirRev(@%)[1], '^$', ':', 'g')
                              let c = a:count
                              while c
                                if rev =~# ':.*/.'
                                  let rev = matchstr(rev, '.*\ze/.\+', '')
                                elseif rev =~# '.:.'
                                  let rev = matchstr(rev, '^.[^:]*:')
                                elseif rev =~# '^:'
                                  let rev = '@^{}'
                                elseif rev =~# ':$'
                                  let rev = rev[0:-2]
                                else
                                  return rev.'~'.c
                                endif
                                let c -= 1
                              endwhile
                              return rev
                            endfunction
                            
    1              0.000009 function! s:MapMotion(lhs, rhs) abort
                              call s:Map('n', a:lhs, ":<C-U>" . a:rhs . "<CR>", "<silent>")
                              call s:Map('o', a:lhs, ":<C-U>" . a:rhs . "<CR>", "<silent>")
                              call s:Map('x', a:lhs, ":<C-U>exe 'normal! gv'<Bar>" . a:rhs . "<CR>", "<silent>")
                            endfunction
                            
    1              0.000004 function! fugitive#MapJumps(...) abort
                              if !&modifiable
                                if get(b:, 'fugitive_type', '') ==# 'blob'
                                  let blame_map = 'Git blame<C-R>=v:count ? " --reverse" : ""<CR><CR>'
                                  call s:Map('n', '<2-LeftMouse>', ':<C-U>0,1' . blame_map, '<silent>')
                                  call s:Map('n', '<CR>', ':<C-U>0,1' . blame_map, '<silent>')
                                  call s:Map('n', 'o',    ':<C-U>0,2' . blame_map, '<silent>')
                                  call s:Map('n', 'p',    ':<C-U>0,3' . blame_map, '<silent>')
                                  call s:Map('n', 'gO',   ':<C-U>0,4' . blame_map, '<silent>')
                                  call s:Map('n', 'O',    ':<C-U>0,5' . blame_map, '<silent>')
                            
                                  call s:Map('n', 'D', ":echoerr 'fugitive: D has been removed in favor of dd'<CR>", '<silent>')
                                  call s:Map('n', 'dd', ":<C-U>call fugitive#DiffClose()<Bar>Gdiffsplit!<CR>", '<silent>')
                                  call s:Map('n', 'dh', ":<C-U>call fugitive#DiffClose()<Bar>Ghdiffsplit!<CR>", '<silent>')
                                  call s:Map('n', 'ds', ":<C-U>call fugitive#DiffClose()<Bar>Ghdiffsplit!<CR>", '<silent>')
                                  call s:Map('n', 'dv', ":<C-U>call fugitive#DiffClose()<Bar>Gvdiffsplit!<CR>", '<silent>')
                                  call s:Map('n', 'd?', ":<C-U>help fugitive_d<CR>", '<silent>')
                            
                                else
                                  call s:Map('n', '<2-LeftMouse>', ':<C-U>exe <SID>GF("edit")<CR>', '<silent>')
                                  call s:Map('n', '<CR>', ':<C-U>exe <SID>GF("edit")<CR>', '<silent>')
                                  call s:Map('n', 'o',    ':<C-U>exe <SID>GF("split")<CR>', '<silent>')
                                  call s:Map('n', 'gO',   ':<C-U>exe <SID>GF("vsplit")<CR>', '<silent>')
                                  call s:Map('n', 'O',    ':<C-U>exe <SID>GF("tabedit")<CR>', '<silent>')
                                  call s:Map('n', 'p',    ':<C-U>exe <SID>GF("pedit")<CR>', '<silent>')
                            
                                  if !exists('g:fugitive_no_maps')
                                    if exists(':CtrlP') && get(g:, 'ctrl_p_map') =~? '^<c-p>$'
                                      nnoremap <buffer> <silent> <C-P> :<C-U>execute line('.') == 1 ? 'CtrlP ' . fnameescape(<SID>Tree()) : <SID>PreviousItem(v:count1)<CR>
                                    else
                                      nnoremap <buffer> <silent> <C-P> :<C-U>execute <SID>PreviousItem(v:count1)<CR>
                                    endif
                                    nnoremap <buffer> <silent> <C-N> :<C-U>execute <SID>NextItem(v:count1)<CR>
                                  endif
                                  call s:MapMotion('(', 'exe <SID>PreviousItem(v:count1)')
                                  call s:MapMotion(')', 'exe <SID>NextItem(v:count1)')
                                  call s:MapMotion('K', 'exe <SID>PreviousHunk(v:count1)')
                                  call s:MapMotion('J', 'exe <SID>NextHunk(v:count1)')
                                  call s:MapMotion('[c', 'exe <SID>PreviousHunk(v:count1)')
                                  call s:MapMotion(']c', 'exe <SID>NextHunk(v:count1)')
                                  call s:MapMotion('[/', 'exe <SID>PreviousFile(v:count1)')
                                  call s:MapMotion(']/', 'exe <SID>NextFile(v:count1)')
                                  call s:MapMotion('[m', 'exe <SID>PreviousFile(v:count1)')
                                  call s:MapMotion(']m', 'exe <SID>NextFile(v:count1)')
                                  call s:MapMotion('[[', 'exe <SID>PreviousSection(v:count1)')
                                  call s:MapMotion(']]', 'exe <SID>NextSection(v:count1)')
                                  call s:MapMotion('[]', 'exe <SID>PreviousSectionEnd(v:count1)')
                                  call s:MapMotion('][', 'exe <SID>NextSectionEnd(v:count1)')
                                  call s:Map('nxo', '*', '<SID>PatchSearchExpr(0)', '<expr>')
                                  call s:Map('nxo', '#', '<SID>PatchSearchExpr(1)', '<expr>')
                                endif
                                call s:Map('n', 'S',    ':<C-U>echoerr "Use gO"<CR>', '<silent>')
                                call s:Map('n', 'dq', ":<C-U>call fugitive#DiffClose()<CR>", '<silent>')
                                call s:Map('n', '-', ":<C-U>exe 'Gedit ' . <SID>fnameescape(<SID>NavigateUp(v:count1))<Bar> if getline(1) =~# '^tree \x\{40,\}$' && empty(getline(2))<Bar>call search('^'.escape(expand('#:t'),'.*[]~\').'/\=$','wc')<Bar>endif<CR>", '<silent>')
                                call s:Map('n', 'P',     ":<C-U>exe 'Gedit ' . <SID>fnameescape(<SID>ContainingCommit().'^'.v:count1.<SID>Relative(':'))<CR>", '<silent>')
                                call s:Map('n', '~',     ":<C-U>exe 'Gedit ' . <SID>fnameescape(<SID>ContainingCommit().'~'.v:count1.<SID>Relative(':'))<CR>", '<silent>')
                                call s:Map('n', 'C',     ":<C-U>exe 'Gedit ' . <SID>fnameescape(<SID>ContainingCommit())<CR>", '<silent>')
                                call s:Map('n', 'cp',    ":<C-U>echoerr 'Use gC'<CR>", '<silent>')
                                call s:Map('n', 'gC',    ":<C-U>exe 'Gpedit ' . <SID>fnameescape(<SID>ContainingCommit())<CR>", '<silent>')
                                call s:Map('n', 'gc',    ":<C-U>exe 'Gpedit ' . <SID>fnameescape(<SID>ContainingCommit())<CR>", '<silent>')
                                call s:Map('n', 'gi',    ":<C-U>exe 'Gsplit' (v:count ? '.gitignore' : '.git/info/exclude')<CR>", '<silent>')
                                call s:Map('x', 'gi',    ":<C-U>exe 'Gsplit' (v:count ? '.gitignore' : '.git/info/exclude')<CR>", '<silent>')
                            
                                call s:Map('n', 'c<Space>', ':Git commit<Space>')
                                call s:Map('n', 'c<CR>', ':Git commit<CR>')
                                call s:Map('n', 'cv<Space>', ':tab Git commit -v<Space>')
                                call s:Map('n', 'cv<CR>', ':tab Git commit -v<CR>')
                                call s:Map('n', 'ca', ':<C-U>Git commit --amend<CR>', '<silent>')
                                call s:Map('n', 'cc', ':<C-U>Git commit<CR>', '<silent>')
                                call s:Map('n', 'ce', ':<C-U>Git commit --amend --no-edit<CR>', '<silent>')
                                call s:Map('n', 'cw', ':<C-U>Git commit --amend --only<CR>', '<silent>')
                                call s:Map('n', 'cva', ':<C-U>tab Git commit -v --amend<CR>', '<silent>')
                                call s:Map('n', 'cvc', ':<C-U>tab Git commit -v<CR>', '<silent>')
                                call s:Map('n', 'cRa', ':<C-U>Git commit --reset-author --amend<CR>', '<silent>')
                                call s:Map('n', 'cRe', ':<C-U>Git commit --reset-author --amend --no-edit<CR>', '<silent>')
                                call s:Map('n', 'cRw', ':<C-U>Git commit --reset-author --amend --only<CR>', '<silent>')
                                call s:Map('n', 'cf', ':<C-U>Git commit --fixup=<C-R>=<SID>SquashArgument()<CR>')
                                call s:Map('n', 'cF', ':<C-U><Bar>Git -c sequence.editor=true rebase --interactive --autosquash<C-R>=<SID>RebaseArgument()<CR><Home>Git commit --fixup=<C-R>=<SID>SquashArgument()<CR>')
                                call s:Map('n', 'cs', ':<C-U>Git commit --no-edit --squash=<C-R>=<SID>SquashArgument()<CR>')
                                call s:Map('n', 'cS', ':<C-U><Bar>Git -c sequence.editor=true rebase --interactive --autosquash<C-R>=<SID>RebaseArgument()<CR><Home>Git commit --no-edit --squash=<C-R>=<SID>SquashArgument()<CR>')
                                call s:Map('n', 'cA', ':<C-U>Git commit --edit --squash=<C-R>=<SID>SquashArgument()<CR>')
                                call s:Map('n', 'c?', ':<C-U>help fugitive_c<CR>', '<silent>')
                            
                                call s:Map('n', 'cr<Space>', ':Git revert<Space>')
                                call s:Map('n', 'cr<CR>', ':Git revert<CR>')
                                call s:Map('n', 'crc', ':<C-U>Git revert <C-R>=<SID>SquashArgument()<CR><CR>', '<silent>')
                                call s:Map('n', 'crn', ':<C-U>Git revert --no-commit <C-R>=<SID>SquashArgument()<CR><CR>', '<silent>')
                                call s:Map('n', 'cr?', ':<C-U>help fugitive_cr<CR>', '<silent>')
                            
                                call s:Map('n', 'cm<Space>', ':Git merge<Space>')
                                call s:Map('n', 'cm<CR>', ':Git merge<CR>')
                                call s:Map('n', 'cmt', ':Git mergetool')
                                call s:Map('n', 'cm?', ':<C-U>help fugitive_cm<CR>', '<silent>')
                            
                                call s:Map('n', 'cz<Space>', ':Git stash<Space>')
                                call s:Map('n', 'cz<CR>', ':Git stash<CR>')
                                call s:Map('n', 'cza', ':<C-U>Git stash apply --quiet --index stash@{<C-R>=v:count<CR>}<CR>')
                                call s:Map('n', 'czA', ':<C-U>Git stash apply --quiet stash@{<C-R>=v:count<CR>}<CR>')
                                call s:Map('n', 'czp', ':<C-U>Git stash pop --quiet --index stash@{<C-R>=v:count<CR>}<CR>')
                                call s:Map('n', 'czP', ':<C-U>Git stash pop --quiet stash@{<C-R>=v:count<CR>}<CR>')
                                call s:Map('n', 'czv', ':<C-U>exe "Gedit" fugitive#RevParse("stash@{" . v:count . "}")<CR>', '<silent>')
                                call s:Map('n', 'czw', ':<C-U>Git stash --keep-index<C-R>=v:count > 1 ? " --all" : v:count ? " --include-untracked" : ""<CR><CR>')
                                call s:Map('n', 'czz', ':<C-U>Git stash <C-R>=v:count > 1 ? " --all" : v:count ? " --include-untracked" : ""<CR><CR>')
                                call s:Map('n', 'cz?', ':<C-U>help fugitive_cz<CR>', '<silent>')
                            
                                call s:Map('n', 'co<Space>', ':Git checkout<Space>')
                                call s:Map('n', 'co<CR>', ':Git checkout<CR>')
                                call s:Map('n', 'coo', ':<C-U>Git checkout <C-R>=substitute(<SID>SquashArgument(),"^$",get(<SID>TempState(),"filetype","") ==# "git" ? expand("<cfile>") : "","")<CR> --<CR>')
                                call s:Map('n', 'co?', ':<C-U>help fugitive_co<CR>', '<silent>')
                            
                                call s:Map('n', 'cb<Space>', ':Git branch<Space>')
                                call s:Map('n', 'cb<CR>', ':Git branch<CR>')
                                call s:Map('n', 'cb?', ':<C-U>help fugitive_cb<CR>', '<silent>')
                            
                                call s:Map('n', 'r<Space>', ':Git rebase<Space>')
                                call s:Map('n', 'r<CR>', ':Git rebase<CR>')
                                call s:Map('n', 'ri', ':<C-U>Git rebase --interactive<C-R>=<SID>RebaseArgument()<CR><CR>', '<silent>')
                                call s:Map('n', 'rf', ':<C-U>Git -c sequence.editor=true rebase --interactive --autosquash<C-R>=<SID>RebaseArgument()<CR><CR>', '<silent>')
                                call s:Map('n', 'ru', ':<C-U>Git rebase --interactive @{upstream}<CR>', '<silent>')
                                call s:Map('n', 'rp', ':<C-U>Git rebase --interactive @{push}<CR>', '<silent>')
                                call s:Map('n', 'rw', ':<C-U>Git rebase --interactive<C-R>=<SID>RebaseArgument()<CR><Bar>s/^pick/reword/e<CR>', '<silent>')
                                call s:Map('n', 'rm', ':<C-U>Git rebase --interactive<C-R>=<SID>RebaseArgument()<CR><Bar>s/^pick/edit/e<CR>', '<silent>')
                                call s:Map('n', 'rd', ':<C-U>Git rebase --interactive<C-R>=<SID>RebaseArgument()<CR><Bar>s/^pick/drop/e<CR>', '<silent>')
                                call s:Map('n', 'rk', ':<C-U>Git rebase --interactive<C-R>=<SID>RebaseArgument()<CR><Bar>s/^pick/drop/e<CR>', '<silent>')
                                call s:Map('n', 'rx', ':<C-U>Git rebase --interactive<C-R>=<SID>RebaseArgument()<CR><Bar>s/^pick/drop/e<CR>', '<silent>')
                                call s:Map('n', 'rr', ':<C-U>Git rebase --continue<CR>', '<silent>')
                                call s:Map('n', 'rs', ':<C-U>Git rebase --skip<CR>', '<silent>')
                                call s:Map('n', 're', ':<C-U>Git rebase --edit-todo<CR>', '<silent>')
                                call s:Map('n', 'ra', ':<C-U>Git rebase --abort<CR>', '<silent>')
                                call s:Map('n', 'r?', ':<C-U>help fugitive_r<CR>', '<silent>')
                            
                                call s:Map('n', '.',     ":<C-U> <C-R>=<SID>fnameescape(fugitive#Real(@%))<CR><Home>")
                                call s:Map('x', '.',     ":<C-U> <C-R>=<SID>fnameescape(fugitive#Real(@%))<CR><Home>")
                                call s:Map('n', 'g?',    ":<C-U>help fugitive-map<CR>", '<silent>')
                                call s:Map('n', '<F1>',  ":<C-U>help fugitive-map<CR>", '<silent>')
                              endif
                            
                              let old_browsex = maparg('<Plug>NetrwBrowseX', 'n')
                              let new_browsex = substitute(old_browsex, '\Cnetrw#CheckIfRemote(\%(netrw#GX()\)\=)', '0', 'g')
                              let new_browsex = substitute(new_browsex, 'netrw#GX()\|expand((exists("g:netrw_gx")? g:netrw_gx : ''<cfile>''))', 'fugitive#GX()', 'g')
                              if new_browsex !=# old_browsex
                                exe 'nnoremap <silent> <buffer> <Plug>NetrwBrowseX' new_browsex
                              endif
                            endfunction
                            
    1              0.000007 function! fugitive#GX() abort
                              try
                                let results = &filetype ==# 'fugitive' ? s:StatusCfile() : &filetype ==# 'git' ? s:cfile() : []
                                if len(results) && len(results[0])
                                  return FugitiveReal(s:Generate(results[0]))
                                endif
                              catch /^fugitive:/
                              endtry
                              return expand(get(g:, 'netrw_gx', expand('<cfile>')))
                            endfunction
                            
    1              0.000006 function! s:StatusCfile(...) abort
                              let tree = s:Tree()
                              if empty(tree)
                                return ['']
                              endif
                              let lead = s:cpath(tree, getcwd()) ? './' : tree . '/'
                              let info = s:StageInfo()
                              let line = getline('.')
                              if len(info.sigil) && len(info.section) && len(info.paths)
                                if info.section ==# 'Unstaged' && info.sigil !=# '-'
                                  return [lead . info.relative[0], info.offset, 'normal!zv']
                                elseif info.section ==# 'Staged' && info.sigil ==# '-'
                                  return ['@:' . info.relative[0], info.offset, 'normal!zv']
                                else
                                  return [':0:' . info.relative[0], info.offset, 'normal!zv']
                                endif
                              elseif len(info.paths)
                                return [lead . info.relative[0]]
                              elseif len(info.commit)
                                return [info.commit]
                              elseif line =~# '^' . s:ref_header . ': \|^Head: '
                                return [matchstr(line, ' \zs.*')]
                              else
                                return ['']
                              endif
                            endfunction
                            
    1              0.000008 function! fugitive#StatusCfile() abort
                              let file = fugitive#Find(s:StatusCfile()[0])
                              return empty(file) ? fugitive#Cfile() : s:fnameescape(file)
                            endfunction
                            
    1              0.000011 function! s:MessageCfile(...) abort
                              let tree = s:Tree()
                              if empty(tree)
                                return ''
                              endif
                              let lead = s:cpath(tree, getcwd()) ? './' : tree . '/'
                              if getline('.') =~# '^.\=\trenamed:.* -> '
                                return lead . matchstr(getline('.'),' -> \zs.*')
                              elseif getline('.') =~# '^.\=\t\(\k\| \)\+\p\?: *.'
                                return lead . matchstr(getline('.'),': *\zs.\{-\}\ze\%( ([^()[:digit:]]\+)\)\=$')
                              elseif getline('.') =~# '^.\=\t.'
                                return lead . matchstr(getline('.'),'\t\zs.*')
                              elseif getline('.') =~# ': needs merge$'
                                return lead . matchstr(getline('.'),'.*\ze: needs merge$')
                              elseif getline('.') =~# '^\%(. \)\=Not currently on any branch.$'
                                return 'HEAD'
                              elseif getline('.') =~# '^\%(. \)\=On branch '
                                return 'refs/heads/'.getline('.')[12:]
                              elseif getline('.') =~# "^\\%(. \\)\=Your branch .*'"
                                return matchstr(getline('.'),"'\\zs\\S\\+\\ze'")
                              else
                                return ''
                              endif
                            endfunction
                            
    1              0.000006 function! fugitive#MessageCfile() abort
                              let file = fugitive#Find(s:MessageCfile())
                              return empty(file) ? fugitive#Cfile() : s:fnameescape(file)
                            endfunction
                            
    1              0.000007 function! s:cfile() abort
                              if empty(FugitiveGitDir())
                                return []
                              endif
                              try
                                let myhash = s:DirRev(@%)[1]
                                if len(myhash)
                                  try
                                    let myhash = fugitive#RevParse(myhash)
                                  catch /^fugitive:/
                                    let myhash = ''
                                  endtry
                                endif
                                if empty(myhash) && get(s:TempState(), 'filetype', '') ==# 'git'
                                  let lnum = line('.')
                                  while lnum > 0
                                    if getline(lnum) =~# '^\%(commit\|tag\) \w'
                                      let myhash = matchstr(getline(lnum),'^\w\+ \zs\S\+')
                                      break
                                    endif
                                    let lnum -= 1
                                  endwhile
                                endif
                            
                                let showtree = (getline(1) =~# '^tree ' && getline(2) == "")
                            
                                let treebase = substitute(s:DirCommitFile(@%)[1], '^\d$', ':&', '') . ':' .
                                      \ s:Relative('') . (s:Relative('') =~# '^$\|/$' ? '' : '/')
                            
                                if getline('.') =~# '^\d\{6\} \l\{3,8\} \x\{40,\}\t'
                                  return [treebase . s:sub(matchstr(getline('.'),'\t\zs.*'),'/$','')]
                                elseif showtree
                                  return [treebase . s:sub(getline('.'),'/$','')]
                            
                                else
                            
                                  let dcmds = []
                            
                                  " Index
                                  if getline('.') =~# '^\d\{6\} \x\{40,\} \d\t'
                                    let ref = matchstr(getline('.'),'\x\{40,\}')
                                    let file = ':'.s:sub(matchstr(getline('.'),'\d\t.*'),'\t',':')
                                    return [file]
                                  endif
                            
                                  if getline('.') =~# '^ref: '
                                    let ref = strpart(getline('.'),5)
                            
                                  elseif getline('.') =~# '^commit \x\{40,\}\>'
                                    let ref = matchstr(getline('.'),'\x\{40,\}')
                                    return [ref]
                            
                                  elseif getline('.') =~# '^parent \x\{40,\}\>'
                                    let ref = matchstr(getline('.'),'\x\{40,\}')
                                    let line = line('.')
                                    let parent = 0
                                    while getline(line) =~# '^parent '
                                      let parent += 1
                                      let line -= 1
                                    endwhile
                                    return [ref]
                            
                                  elseif getline('.') =~# '^tree \x\{40,\}$'
                                    let ref = matchstr(getline('.'),'\x\{40,\}')
                                    if len(myhash) && fugitive#RevParse(myhash.':') ==# ref
                                      let ref = myhash.':'
                                    endif
                                    return [ref]
                            
                                  elseif getline('.') =~# '^object \x\{40,\}$' && getline(line('.')+1) =~ '^type \%(commit\|tree\|blob\)$'
                                    let ref = matchstr(getline('.'),'\x\{40,\}')
                                    let type = matchstr(getline(line('.')+1),'type \zs.*')
                            
                                  elseif getline('.') =~# '^\l\{3,8\} '.myhash.'$'
                                    let ref = s:DirRev(@%)[1]
                            
                                  elseif getline('.') =~# '^\l\{3,8\} \x\{40,\}\>'
                                    let ref = matchstr(getline('.'),'\x\{40,\}')
                                    echoerr "warning: unknown context ".matchstr(getline('.'),'^\l*')
                            
                                  elseif getline('.') =~# '^[+-]\{3\} [abciow12]\=/'
                                    let ref = getline('.')[4:]
                            
                                  elseif getline('.') =~# '^[+-]' && search('^@@ -\d\+\%(,\d\+\)\= +\d\+','bnW')
                                    let type = getline('.')[0]
                                    let lnum = line('.') - 1
                                    let offset = 0
                                    while getline(lnum) !~# '^@@ -\d\+\%(,\d\+\)\= +\d\+'
                                      if getline(lnum) =~# '^[ '.type.']'
                                        let offset += 1
                                      endif
                                      let lnum -= 1
                                    endwhile
                                    let offset += matchstr(getline(lnum), type.'\zs\d\+')
                                    let ref = getline(search('^'.type.'\{3\} [abciow12]/','bnW'))[4:-1]
                                    let dcmds = [offset, 'normal!zv']
                            
                                  elseif getline('.') =~# '^rename from '
                                    let ref = 'a/'.getline('.')[12:]
                                  elseif getline('.') =~# '^rename to '
                                    let ref = 'b/'.getline('.')[10:]
                            
                                  elseif getline('.') =~# '^@@ -\d\+\%(,\d\+\)\= +\d\+'
                                    let diff = getline(search('^diff --git \%([abciow12]/.*\|/dev/null\) \%([abciow12]/.*\|/dev/null\)', 'bcnW'))
                                    let offset = matchstr(getline('.'), '+\zs\d\+')
                            
                                    let dref = matchstr(diff, '\Cdiff --git \zs\%([abciow12]/.*\|/dev/null\)\ze \%([abciow12]/.*\|/dev/null\)')
                                    let ref = matchstr(diff, '\Cdiff --git \%([abciow12]/.*\|/dev/null\) \zs\%([abciow12]/.*\|/dev/null\)')
                                    let dcmd = 'Gdiffsplit! +'.offset
                            
                                  elseif getline('.') =~# '^diff --git \%([abciow12]/.*\|/dev/null\) \%([abciow12]/.*\|/dev/null\)'
                                    let dref = matchstr(getline('.'),'\Cdiff --git \zs\%([abciow12]/.*\|/dev/null\)\ze \%([abciow12]/.*\|/dev/null\)')
                                    let ref = matchstr(getline('.'),'\Cdiff --git \%([abciow12]/.*\|/dev/null\) \zs\%([abciow12]/.*\|/dev/null\)')
                                    let dcmd = 'Gdiffsplit!'
                            
                                  elseif getline('.') =~# '^index ' && getline(line('.')-1) =~# '^diff --git \%([abciow12]/.*\|/dev/null\) \%([abciow12]/.*\|/dev/null\)'
                                    let line = getline(line('.')-1)
                                    let dref = matchstr(line,'\Cdiff --git \zs\%([abciow12]/.*\|/dev/null\)\ze \%([abciow12]/.*\|/dev/null\)')
                                    let ref = matchstr(line,'\Cdiff --git \%([abciow12]/.*\|/dev/null\) \zs\%([abciow12]/.*\|/dev/null\)')
                                    let dcmd = 'Gdiffsplit!'
                            
                                  elseif line('$') == 1 && getline('.') =~ '^\x\{40,\}$'
                                    let ref = getline('.')
                            
                                  elseif expand('<cword>') =~# '^\x\{7,\}\>'
                                    return [expand('<cword>')]
                            
                                  else
                                    let ref = ''
                                  endif
                            
                                  let prefixes = {
                                        \ '1': '',
                                        \ '2': '',
                                        \ 'b': ':0:',
                                        \ 'i': ':0:',
                                        \ 'o': '',
                                        \ 'w': ''}
                            
                                  if len(myhash)
                                    let prefixes.a = myhash.'^:'
                                    let prefixes.b = myhash.':'
                                  endif
                                  let ref = substitute(ref, '^\(\w\)/', '\=get(prefixes, submatch(1), "@:")', '')
                                  if exists('dref')
                                    let dref = substitute(dref, '^\(\w\)/', '\=get(prefixes, submatch(1), "@:")', '')
                                  endif
                            
                                  if ref ==# '/dev/null'
                                    " Empty blob
                                    let ref = 'e69de29bb2d1d6434b8b29ae775ad8c2e48c5391'
                                  endif
                            
                                  if exists('dref')
                                    return [ref, dcmd . ' ' . s:fnameescape(dref)] + dcmds
                                  elseif ref != ""
                                    return [ref] + dcmds
                                  endif
                            
                                endif
                                return []
                              endtry
                            endfunction
                            
    1              0.000011 function! s:GF(mode) abort
                              try
                                let results = &filetype ==# 'fugitive' ? s:StatusCfile() : &filetype ==# 'gitcommit' ? [s:MessageCfile()] : s:cfile()
                              catch /^fugitive:/
                                return 'echoerr ' . string(v:exception)
                              endtry
                              if len(results) > 1
                                return 'G' . a:mode .
                                      \ ' +' . escape(results[1], ' ') . ' ' .
                                      \ s:fnameescape(results[0]) . join(map(results[2:-1], '"|" . v:val'), '')
                              elseif len(results) && len(results[0])
                                return 'G' . a:mode . ' ' . s:fnameescape(results[0])
                              else
                                return ''
                              endif
                            endfunction
                            
    1              0.000005 function! fugitive#Cfile() abort
                              let pre = ''
                              let results = s:cfile()
                              if empty(results)
                                let cfile = expand('<cfile>')
                                if &includeexpr =~# '\<v:fname\>'
                                  sandbox let cfile = eval(substitute(&includeexpr, '\C\<v:fname\>', '\=string(cfile)', 'g'))
                                endif
                                return cfile
                              elseif len(results) > 1
                                let pre = '+' . join(map(results[1:-1], 'escape(v:val, " ")'), '\|') . ' '
                              endif
                              return pre . s:fnameescape(s:Generate(results[0]))
                            endfunction
                            
                            " Section: Statusline
                            
    1              0.000009 function! fugitive#Statusline(...) abort
                              let dir = s:Dir(bufnr(''))
                              if empty(dir)
                                return ''
                              endif
                              let status = ''
                              let commit = s:DirCommitFile(@%)[1]
                              if len(commit)
                                let status .= ':' . commit[0:6]
                              endif
                              let status .= '('.FugitiveHead(7, dir).')'
                              return '[Git'.status.']'
                            endfunction
                            
    1              0.000006 function! fugitive#statusline(...) abort
                              return fugitive#Statusline()
                            endfunction
                            
    1              0.000004 function! fugitive#head(...) abort
                              if empty(s:Dir())
                                return ''
                              endif
                            
                              return fugitive#Head(a:0 ? a:1 : 0)
                            endfunction
                            
                            " Section: Folding
                            
    1              0.000004 function! fugitive#Foldtext() abort
                              if &foldmethod !=# 'syntax'
                                return foldtext()
                              endif
                            
                              let line_foldstart = getline(v:foldstart)
                              if line_foldstart =~# '^diff '
                                let [add, remove] = [-1, -1]
                                let filename = ''
                                for lnum in range(v:foldstart, v:foldend)
                                  let line = getline(lnum)
                                  if filename ==# '' && line =~# '^[+-]\{3\} [abciow12]/'
                                    let filename = line[6:-1]
                                  endif
                                  if line =~# '^+'
                                    let add += 1
                                  elseif line =~# '^-'
                                    let remove += 1
                                  elseif line =~# '^Binary '
                                    let binary = 1
                                  endif
                                endfor
                                if filename ==# ''
                                  let filename = matchstr(line_foldstart, '^diff .\{-\} [abciow12]/\zs.*\ze [abciow12]/')
                                endif
                                if filename ==# ''
                                  let filename = line_foldstart[5:-1]
                                endif
                                if exists('binary')
                                  return 'Binary: '.filename
                                else
                                  return '+-' . v:folddashes . ' ' . (add<10&&remove<100?' ':'') . add . '+ ' . (remove<10&&add<100?' ':'') . remove . '- ' . filename
                                endif
                              elseif line_foldstart =~# '^@@\+ .* @@'
                                return '+-' . v:folddashes . ' ' . line_foldstart
                              elseif &filetype ==# 'gitcommit' && line_foldstart =~# '^# .*:$'
                                let lines = getline(v:foldstart, v:foldend)
                                call filter(lines, 'v:val =~# "^#\t"')
                                cal map(lines, "s:sub(v:val, '^#\t%(modified: +|renamed: +)=', '')")
                                cal map(lines, "s:sub(v:val, '^([[:alpha:] ]+): +(.*)', '\\2 (\\1)')")
                                return line_foldstart.' '.join(lines, ', ')
                              endif
                              return foldtext()
                            endfunction
                            
    1              0.000004 function! fugitive#foldtext() abort
                              return fugitive#Foldtext()
                            endfunction
                            
                            " Section: Initialization
                            
    1              0.000006 function! fugitive#Init() abort
                              throw 'Third party code is using fugitive#Init() which has been removed. Contact the author if you have a reason to still use it'
                            endfunction
                            
    1              0.000006 function! fugitive#is_git_dir(path) abort
                              throw 'Third party code is using fugitive#is_git_dir() which has been removed. Change it to FugitiveIsGitDir()'
                            endfunction
                            
    1              0.000011 function! fugitive#extract_git_dir(path) abort
                              throw 'Third party code is using fugitive#extract_git_dir() which has been removed. Change it to FugitiveExtractGitDir()'
                            endfunction
                            
    1              0.000007 function! fugitive#detect(path) abort
                              throw 'Third party code is using fugitive#detect() which has been removed. Contact the author if you have a reason to still use it'
                            endfunction
                            
                            " Section: End

SCRIPT  c:\vim\.vim\plugged\coc.nvim\autoload\coc\prompt.vim
Sourced 1 time
Total time:   0.000734
 Self time:   0.000734

count  total (s)   self (s)
    1              0.000014 scriptencoding utf-8
    1              0.000042 let s:is_vim = !has('nvim')
    1              0.000004 let s:activated = 0
    1              0.000004 let s:session_names = []
    1              0.000005 let s:saved_ve = &t_ve
    1              0.000005 let s:saved_cursor = &guicursor
    1              0.000043 let s:gui = has('gui_running') || has('nvim')
                            
    1              0.000308 let s:char_map = {
                                  \ "\<Plug>": '<plug>',
                                  \ "\<Esc>": '<esc>',
                                  \ "\<Tab>": '<tab>',
                                  \ "\<S-Tab>": '<s-tab>',
                                  \ "\<bs>": '<bs>',
                                  \ "\<right>": '<right>',
                                  \ "\<left>": '<left>',
                                  \ "\<up>": '<up>',
                                  \ "\<down>": '<down>',
                                  \ "\<home>": '<home>',
                                  \ "\<end>": '<end>',
                                  \ "\<cr>": '<cr>',
                                  \ "\<PageUp>":'<PageUp>' ,
                                  \ "\<PageDown>":'<PageDown>' ,
                                  \ "\<FocusGained>":'<FocusGained>' ,
                                  \ "\<ScrollWheelUp>": '<ScrollWheelUp>',
                                  \ "\<ScrollWheelDown>": '<ScrollWheelDown>',
                                  \ "\<LeftMouse>": '<LeftMouse>',
                                  \ "\<LeftDrag>": '<LeftDrag>',
                                  \ "\<LeftRelease>": '<LeftRelease>',
                                  \ "\<2-LeftMouse>": '<2-LeftMouse>',
                                  \ "\<C-a>": '<C-a>',
                                  \ "\<C-b>": '<C-b>',
                                  \ "\<C-c>": '<C-c>',
                                  \ "\<C-d>": '<C-d>',
                                  \ "\<C-e>": '<C-e>',
                                  \ "\<C-f>": '<C-f>',
                                  \ "\<C-g>": '<C-g>',
                                  \ "\<C-h>": '<C-h>',
                                  \ "\<C-j>": '<C-j>',
                                  \ "\<C-k>": '<C-k>',
                                  \ "\<C-l>": '<C-l>',
                                  \ "\<C-n>": '<C-n>',
                                  \ "\<C-o>": '<C-o>',
                                  \ "\<C-p>": '<C-p>',
                                  \ "\<C-q>": '<C-q>',
                                  \ "\<C-r>": '<C-r>',
                                  \ "\<C-s>": '<C-s>',
                                  \ "\<C-t>": '<C-t>',
                                  \ "\<C-u>": '<C-u>',
                                  \ "\<C-v>": '<C-v>',
                                  \ "\<C-w>": '<C-w>',
                                  \ "\<C-x>": '<C-x>',
                                  \ "\<C-y>": '<C-y>',
                                  \ "\<C-z>": '<C-z>',
                                  \ "\<A-a>": '<A-a>',
                                  \ "\<A-b>": '<A-b>',
                                  \ "\<A-c>": '<A-c>',
                                  \ "\<A-d>": '<A-d>',
                                  \ "\<A-e>": '<A-e>',
                                  \ "\<A-f>": '<A-f>',
                                  \ "\<A-g>": '<A-g>',
                                  \ "\<A-h>": '<A-h>',
                                  \ "\<A-i>": '<A-i>',
                                  \ "\<A-j>": '<A-j>',
                                  \ "\<A-k>": '<A-k>',
                                  \ "\<A-l>": '<A-l>',
                                  \ "\<A-m>": '<A-m>',
                                  \ "\<A-n>": '<A-n>',
                                  \ "\<A-o>": '<A-o>',
                                  \ "\<A-p>": '<A-p>',
                                  \ "\<A-q>": '<A-q>',
                                  \ "\<A-r>": '<A-r>',
                                  \ "\<A-s>": '<A-s>',
                                  \ "\<A-t>": '<A-t>',
                                  \ "\<A-u>": '<A-u>',
                                  \ "\<A-v>": '<A-v>',
                                  \ "\<A-w>": '<A-w>',
                                  \ "\<A-x>": '<A-x>',
                                  \ "\<A-y>": '<A-y>',
                                  \ "\<A-z>": '<A-z>',
                                  \ }
                            
    1              0.000012 function! coc#prompt#getc() abort
                              let c = getchar()
                              return type(c) == type(0) ? nr2char(c) : c
                            endfunction
                            
    1              0.000003 function! coc#prompt#getchar() abort
                              let input = coc#prompt#getc()
                              if 1 != &iminsert
                                return input
                              endif
                              "a language keymap is activated, so input must be resolved to the mapped values.
                              let partial_keymap = mapcheck(input, "l")
                              while partial_keymap !=# ""
                                let full_keymap = maparg(input, "l")
                                if full_keymap ==# "" && len(input) >= 3 "HACK: assume there are no keymaps longer than 3.
                                  return input
                                elseif full_keymap ==# partial_keymap
                                  return full_keymap
                                endif
                                let c = coc#prompt#getc()
                                if c ==# "\<Esc>" || c ==# "\<CR>"
                                  "if the short sequence has a valid mapping, return that.
                                  if !empty(full_keymap)
                                    return full_keymap
                                  endif
                                  return input
                                endif
                                let input .= c
                                let partial_keymap = mapcheck(input, "l")
                              endwhile
                              return input
                            endfunction
                            
    1              0.000004 function! coc#prompt#start_prompt(session) abort
                              let s:session_names = s:filter(s:session_names, a:session)
                              call add(s:session_names, a:session)
                              if s:activated | return | endif
                              if s:is_vim
                                call s:start_prompt_vim()
                              else
                                call s:start_prompt()
                              endif
                            endfunction
                            
    1              0.000005 function! s:start_prompt_vim() abort
                              call timer_start(10, {-> s:start_prompt()})
                            endfunction
                            
    1              0.000003 function! s:start_prompt()
                              if s:activated | return | endif
                              if !get(g:, 'coc_disable_transparent_cursor', 0)
                                if s:gui
                                  if has('nvim-0.5.0') && !empty(s:saved_cursor)
                                    set guicursor+=a:ver1-CocCursorTransparent/lCursor
                                  endif
                                elseif s:is_vim
                                  set t_ve=
                                endif
                              endif
                              let s:activated = 1
                              try
                                while s:activated
                                  let ch = coc#prompt#getchar()
                                  if ch ==# "\<FocusLost>" || ch ==# "\<FocusGained>" || ch ==# "\<CursorHold>"
                                    continue
                                  else
                                    let curr = s:current_session()
                                    let mapped = get(s:char_map, ch, ch)
                                    if !empty(curr)
                                      call coc#rpc#notify('InputChar', [curr, mapped, getcharmod()])
                                    endif
                                    if mapped == '<esc>'
                                      let s:session_names = []
                                      call s:reset()
                                      break
                                    endif
                                  endif
                                endwhile
                              catch /^Vim:Interrupt$/
                                let s:activated = 0
                                call coc#rpc#notify('InputChar', [s:current_session(), '<esc>'])
                                return
                              endtry
                              let s:activated = 0
                            endfunction
                            
    1              0.000004 function! coc#prompt#stop_prompt(session)
                              let s:session_names = s:filter(s:session_names, a:session)
                              if len(s:session_names)
                                return
                              endif
                              if s:activated
                                let s:activated = 0
                                call s:reset()
                                call feedkeys("\<esc>", 'int')
                              endif
                            endfunction
                            
    1              0.000003 function! coc#prompt#activated() abort
                              return s:activated
                            endfunction
                            
    1              0.000003 function! s:reset() abort
                              if !get(g:, 'coc_disable_transparent_cursor',0)
                                " neovim has bug with revert empty &guicursor
                                if s:gui && !empty(s:saved_cursor)
                                  if has('nvim-0.5.0')
                                    set guicursor+=a:ver1-Cursor/lCursor
                                    let &guicursor = s:saved_cursor
                                  endif
                                elseif s:is_vim
                                  let &t_ve = s:saved_ve
                                endif
                              endif
                              echo ""
                            endfunction
                            
    1              0.000003 function! s:current_session() abort
                              if empty(s:session_names)
                                return v:null
                              endif
                              return s:session_names[len(s:session_names) - 1]
                            endfunction
                            
    1              0.000003 function! s:filter(list, id) abort
                              return filter(copy(a:list), 'v:val !=# a:id')
                            endfunction

SCRIPT  c:\vim\.vim\plugged\coc.nvim\autoload\coc\helper.vim
Sourced 1 time
Total time:   0.000239
 Self time:   0.000239

count  total (s)   self (s)
    1              0.000013 scriptencoding utf-8
                            " Helper methods for viml
                            
                            " insert inserted to line at position, use ... when result is too long
                            " line should only contains character has strwidth equals 1
    1              0.000011 function! coc#helper#str_compose(line, position, inserted) abort
                              let width = strwidth(a:line)
                              let text = a:inserted
                              let res = a:line
                              let need_truncate = a:position + strwidth(text) + 1 > width
                              if need_truncate
                                let remain = width - a:position - 3
                                if remain < 2
                                  " use text for full line, use first & end of a:line, ignore position
                                  let res = strcharpart(a:line, 0, 1)
                                  let w = strwidth(res)
                                  for i in range(strchars(text))
                                    let c = strcharpart(text, i, 1)
                                    let a = strwidth(c)
                                    if w + a <= width - 1
                                      let w = w + a
                                      let res = res.c
                                    endif
                                  endfor
                                  let res = res.strcharpart(a:line, w)
                                else
                                  let res = strcharpart(a:line, 0, a:position)
                                  let w = strwidth(res)
                                  for i in range(strchars(text))
                                    let c = strcharpart(text, i, 1)
                                    let a = strwidth(c)
                                    if w + a <= width - 3
                                      let w = w + a
                                      let res = res.c
                                    endif
                                  endfor
                                  let res = res.'..'
                                  let w = w + 2
                                  let res = res.strcharpart(a:line, w)
                                endif
                              else
                                let first = strcharpart(a:line, 0, a:position)
                                let res = first.text.strcharpart(a:line, a:position + strwidth(text))
                              endif
                              return res
                            endfunction
                            
                            " Return new dict with keys removed
    1              0.000004 function! coc#helper#dict_omit(dict, keys) abort
                              let res = {}
                              for key in keys(a:dict)
                                if index(a:keys, key) == -1
                                  let res[key] = a:dict[key]
                                endif
                              endfor
                              return res
                            endfunction
                            
                            " Return new dict with keys only
    1              0.000007 function! coc#helper#dict_pick(dict, keys) abort
                              let res = {}
                              for key in keys(a:dict)
                                if index(a:keys, key) != -1
                                  let res[key] = a:dict[key]
                                endif
                              endfor
                              return res
                            endfunction
                            
                            " support for float values
    1              0.000003 function! coc#helper#min(first, ...) abort
                              let val = a:first
                              for i in range(0, len(a:000) - 1)
                                if a:000[i] < val
                                  let val = a:000[i]
                                endif
                              endfor
                              return val
                            endfunction
                            
                            " support for float values
    1              0.000003 function! coc#helper#max(first, ...) abort
                              let val = a:first
                              for i in range(0, len(a:000) - 1)
                                if a:000[i] > val
                                  let val = a:000[i]
                                endif
                              endfor
                              return val
                            endfunction

SCRIPT  c:\vim\.vim\plugged\coc.nvim\autoload\coc\compat.vim
Sourced 1 time
Total time:   0.000346
 Self time:   0.000346

count  total (s)   self (s)
    1              0.000014 scriptencoding utf-8
    1              0.000040 let s:is_vim = !has('nvim')
                            
                            " first window id for bufnr
                            " builtin bufwinid returns window of current tab only
    1              0.000007 function! coc#compat#buf_win_id(bufnr) abort
                              let info = filter(getwininfo(), 'v:val["bufnr"] =='.a:bufnr)
                              if empty(info)
                                return -1
                              endif
                              return info[0]['winid']
                            endfunction
                            
    1              0.000003 function! coc#compat#win_is_valid(winid) abort
                              if exists('*nvim_win_is_valid')
                                return nvim_win_is_valid(a:winid)
                              endif
                              return !empty(getwininfo(a:winid))
                            endfunction
                            
                            " clear matches by window id, not throw on none exists window.
                            " may not work on vim < 8.1.1084 & neovim < 0.4.0
    1              0.000003 function! coc#compat#clear_matches(winid) abort
                              if !coc#compat#win_is_valid(a:winid)
                                return
                              endif
                              let curr = win_getid()
                              if curr == a:winid
                                call clearmatches()
                                return
                              endif
                              if s:is_vim
                                if has('patch-8.1.1084')
                                  call clearmatches(a:winid)
                                endif
                              else
                                if exists('*nvim_set_current_win')
                                  noa call nvim_set_current_win(a:winid)
                                  call clearmatches()
                                  noa call nvim_set_current_win(curr)
                                endif
                              endif
                            endfunction
                            
    1              0.000005 function! coc#compat#matchaddpos(group, pos, priority, winid) abort
                              let curr = win_getid()
                              if curr == a:winid
                                call matchaddpos(a:group, a:pos, a:priority, -1)
                              else
                                if s:is_vim
                                  if has('patch-8.1.0218')
                                    call matchaddpos(a:group, a:pos, a:priority, -1, {'window': a:winid})
                                  endif
                                else
                                  if has('nvim-0.4.0')
                                    call matchaddpos(a:group, a:pos, a:priority, -1, {'window': a:winid})
                                  elseif exists('*nvim_set_current_win')
                                    noa call nvim_set_current_win(a:winid)
                                    call matchaddpos(a:group, a:pos, a:priority, -1)
                                    noa call nvim_set_current_win(curr)
                                  endif
                                endif
                              endif
                            endfunction
                            
                            " hlGroup, pos, priority
    1              0.000004 function! coc#compat#matchaddgroups(winid, groups) abort
                              " add by winid
                              if s:is_vim && has('patch-8.1.0218') || has('nvim-0.4.0')
                                for group in a:groups
                                  call matchaddpos(group['hlGroup'], [group['pos']], group['priority'], -1, {'window': a:winid})
                                endfor
                              endif
                              let curr = win_getid()
                              if curr == a:winid
                                for group in a:groups
                                  call matchaddpos(group['hlGroup'], [group['pos']], group['priority'], -1)
                                endfor
                              elseif exists('*nvim_set_current_win')
                                noa call nvim_set_current_win(a:winid)
                                for group in a:groups
                                  call matchaddpos(group['hlGroup'], [group['pos']], group['priority'], -1)
                                endfor
                                noa call nvim_set_current_win(curr)
                              endif
                            endfunction
                            
                            " remove keymap for specfic buffer
    1              0.000004 function! coc#compat#buf_del_keymap(bufnr, mode, lhs) abort
                              if !bufloaded(a:bufnr)
                                return
                              endif
                              if exists('*nvim_buf_del_keymap')
                                try
                                  call nvim_buf_del_keymap(a:bufnr, a:mode, a:lhs)
                                catch /^Vim\%((\a\+)\)\=:E5555/
                                  " ignore keymap not exists.
                                endtry
                                return
                              endif
                              if bufnr == a:bufnr
                                execute 'silent! '.a:mode.'unmap <buffer> '.a:lhs
                                return
                              endif
                              if exists('*win_execute')
                                let winid = coc#compat#buf_win_id(a:bufnr)
                                if winid != -1
                                  call win_execute(winid, 'silent! '.a:mode.'unmap <buffer> '.a:lhs)
                                endif
                              endif
                            endfunction
                            
                            " execute command or list of commands in window
    1              0.000004 function! coc#compat#execute(winid, command) abort
                              if s:is_vim
                                if !exists('*win_execute')
                                  throw 'win_execute function not exists, please upgrade your vim.'
                                endif
                                if type(a:command) == v:t_string
                                  keepalt call win_execute(a:winid, a:command)
                                elseif type(a:command) == v:t_list
                                  keepalt call win_execute(a:winid, join(a:command, "\n"))
                                endif
                              else
                                let curr = nvim_get_current_win()
                                noa keepalt call nvim_set_current_win(a:winid)
                                if type(a:command) == v:t_string
                                  exec a:command
                                elseif type(a:command) == v:t_list
                                  exec join(a:command, "\n")
                                endif
                                noa keepalt call nvim_set_current_win(curr)
                              endif
                            endfunc

FUNCTION  FugitiveExtractGitDir()
    Defined: ~\.vim\plugged\vim-fugitive\plugin\fugitive.vim:274
Called 1 time
Total time:   0.001064
 Self time:   0.000775

count  total (s)   self (s)
    1   0.000020   0.000013   let path = s:Slash(a:path)
    1              0.000011   if path =~# '^fugitive:'
                                return matchstr(path, '\C^fugitive:\%(//\)\=\zs.\{-\}\ze\%(//\|::\|$\)')
    1              0.000003   elseif empty(path)
                                return ''
    1              0.000059   elseif isdirectory(path)
                                let path = fnamemodify(path, ':p:s?/$??')
    1              0.000001   else
    1              0.000059     let path = fnamemodify(path, ':p:h:s?/$??')
    1              0.000002   endif
    1              0.000020   let pre = substitute(matchstr(path, '^\a\a\+\ze:'), '^.', '\u&', '')
    1              0.000005   if len(pre) && exists('*' . pre . 'Real')
                                let path = s:Slash({pre}Real(path))
    1              0.000001   endif
    1              0.000028   let root = resolve(path)
    1              0.000003   if root !=# path
                                silent! exe (haslocaldir() ? 'lcd' : exists(':tcd') && haslocaldir(-1) ? 'tcd' : 'cd') '.'
    1              0.000001   endif
    1              0.000002   let previous = ""
    1              0.000028   let env_git_dir = len($GIT_DIR) ? s:Slash(simplify(fnamemodify(FugitiveVimPath($GIT_DIR), ':p:s?[\/]$??'))) : ''
    1   0.000038   0.000017   call s:Tree(env_git_dir)
    3              0.000009   while root !=# previous
    2              0.000024     if root =~# '\v^//%([^/]+/?)?$'
                                  break
    2              0.000002     endif
    2   0.000160   0.000034     if index(s:CeilingDirectories(), root) >= 0
                                  break
    2              0.000002     endif
    2              0.000029     if root ==# $GIT_WORK_TREE && FugitiveIsGitDir(env_git_dir)
                                  return env_git_dir
    2              0.000009     elseif has_key(s:dir_for_worktree, root)
                                  return s:dir_for_worktree[root]
    2              0.000001     endif
    2              0.000033     let dir = substitute(root, '[\/]$', '', '') . '/.git'
    2              0.000114     let type = getftype(dir)
    2              0.000011     if type ==# 'dir' && FugitiveIsGitDir(dir)
                                  return dir
    2              0.000007     elseif type ==# 'link' && FugitiveIsGitDir(dir)
                                  return resolve(dir)
    2              0.000007     elseif type !=# '' && filereadable(dir)
                                  let line = get(readfile(dir, '', 1), 0, '')
                                  let file_dir = s:Slash(FugitiveVimPath(matchstr(line, '^gitdir: \zs.*')))
                                  if file_dir !~# '^/\|^\a:' && FugitiveIsGitDir(root . '/' . file_dir)
                                    return simplify(root . '/' . file_dir)
                                  elseif len(file_dir) && FugitiveIsGitDir(file_dir)
                                    return file_dir
                                  endif
    2   0.000161   0.000027     elseif FugitiveIsGitDir(root)
                                  return root
    2              0.000002     endif
    2              0.000005     let previous = root
    2              0.000015     let root = fnamemodify(root, ':h')
    3              0.000006   endwhile
    1              0.000001   return ''

FUNCTION  <SNR>3_SynSet()
    Defined: C:\Neovim\share\nvim\runtime\syntax\synload.vim:33
Called 7 times
Total time:   0.520215
 Self time:   0.060484

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    7              0.000046   syn clear
    7              0.000054   if exists("b:current_syntax")
                                unlet b:current_syntax
    7              0.000010   endif
                            
    7              0.000053   let s = expand("<amatch>")
    7              0.000021   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    7              0.000017   elseif s == "OFF"
                                let s = ""
    7              0.000005   endif
                            
    7              0.000013   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
   14              0.000131     for name in split(s, '\.')
    7              0.000027       if !empty(name)
    7   0.519543   0.059812 	exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
    7              0.000021       endif
   14              0.000025     endfor
    7              0.000011   endif

FUNCTION  airline#extensions#quickfix#inactive_qf_window()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\quickfix.vim:28
Called 142 times
Total time:   0.002874
 Self time:   0.002874

count  total (s)   self (s)
  142              0.001907   if getbufvar(a:2.bufnr, '&filetype') is# 'qf' && !empty(airline#util#getwinvar(a:2.winnr, 'quickfix_title', ''))
                                call setwinvar(a:2.winnr, 'airline_section_c', '[%{get(w:, "quickfix_title", "")}] %f %m')
  142              0.000135   endif

FUNCTION  <SNR>26_notify()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\client.vim:187
Called 254 times
Total time:   0.040394
 Self time:   0.037025

count  total (s)   self (s)
  254   0.008431   0.005062   let channel = coc#client#get_channel(self)
  254              0.001051   if empty(channel)
                                return ''
  254              0.000240   endif
  254              0.000455   try
  254              0.000500     if s:is_vim
                                  call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
  254              0.000385     else
  254              0.010815       call call('rpcnotify', [channel, a:method] + a:args)
  254              0.000476     endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0)
                                    return
                                  endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
                                endif
  254              0.000509   endtry

FUNCTION  <SNR>27_Tree()
    Defined: ~\.vim\plugged\vim-fugitive\plugin\fugitive.vim:223
Called 1 time
Total time:   0.000021
 Self time:   0.000021

count  total (s)   self (s)
    1              0.000003   let dir = a:path
    1              0.000008   if dir =~# '/\.git$'
                                return len(dir) ==# 5 ? '/' : dir[0:-6]
    1              0.000002   elseif dir ==# ''
    1              0.000001     return ''
                              endif
                              if !has_key(s:worktree_for_dir, dir)
                                let s:worktree_for_dir[dir] = ''
                                let config_file = dir . '/config'
                                if filereadable(config_file)
                                  let config = readfile(config_file,'',10)
                                  call filter(config,'v:val =~# "^\\s*worktree *="')
                                  if len(config) == 1
                                    let worktree = FugitiveVimPath(matchstr(config[0], '= *\zs.*'))
                                  endif
                                elseif filereadable(dir . '/gitdir')
                                  let worktree = fnamemodify(FugitiveVimPath(readfile(dir . '/gitdir')[0]), ':h')
                                  if worktree ==# '.'
                                    unlet! worktree
                                  endif
                                endif
                                if exists('worktree')
                                  let s:worktree_for_dir[dir] = s:Slash(resolve(worktree))
                                  let s:dir_for_worktree[s:worktree_for_dir[dir]] = dir
                                endif
                              endif
                              if s:worktree_for_dir[dir] =~# '^\.'
                                return simplify(dir . '/' . s:worktree_for_dir[dir])
                              else
                                return s:worktree_for_dir[dir]
                              endif

FUNCTION  coc#client#get_channel()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\client.vim:147
Called 254 times
Total time:   0.003369
 Self time:   0.003369

count  total (s)   self (s)
  254              0.000680   if s:is_vim
                                return a:client['channel']
  254              0.000265   endif
  254              0.001048   return a:client['chan_id']

FUNCTION  <SNR>79_group_not_done()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:29
Called 579 times
Total time:   0.009903
 Self time:   0.009903

count  total (s)   self (s)
  579              0.003666   if index(a:list, a:name) == -1
  447              0.002595     call add(a:list, a:name)
  447              0.000792     return 1
  132              0.000110   else
  132              0.000278     if &vbs
                                  echomsg printf("airline: group: %s already done, skipping", a:name)
  132              0.000098     endif
  132              0.000176     return 0
                              endif

FUNCTION  airline#extensions#undotree#apply()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\undotree.vim:11
Called 37 times
Total time:   0.001066
 Self time:   0.001066

count  total (s)   self (s)
   37              0.000152   if exists('t:undotree')
                                if &ft == 'undotree'
                                  if exists('*t:undotree.GetStatusLine')
                                    call airline#extensions#apply_left_override('undo', '%{exists("t:undotree") ? t:undotree.GetStatusLine() : ""}')
                                  else
                                    call airline#extensions#apply_left_override('undotree', '%f')
                                  endif
                                endif
                            
                                if &ft == 'diff' && exists('*t:diffpanel.GetStatusLine')
                                  call airline#extensions#apply_left_override('diff', '%{exists("t:diffpanel") ? t:diffpanel.GetStatusLine() : ""}')
                                endif
   37              0.000029   endif

FUNCTION  airline#util#exec_funcrefs()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:93
Called 179 times
Total time:   0.263332
 Self time:   0.021821

count  total (s)   self (s)
  864              0.002386     for Fn in a:list
  864   0.255894   0.014383       let code = call(Fn, a:000)
  864              0.001631       if code != 0
  179              0.000287         return code
  685              0.000587       endif
  685              0.000707     endfor
                                return 0

FUNCTION  <SNR>98_close_win()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:1499
Called 2 times
Total time:   0.001864
 Self time:   0.000135

count  total (s)   self (s)
    2              0.000005   if a:winid <= 0
                                return
    2              0.000002   endif
                              " vim not throw for none exists winid
    2              0.000003   if s:is_vim
                                call popup_close(a:winid)
    2              0.000002   else
    2              0.000008     if nvim_win_is_valid(a:winid)
    2   0.001825   0.000095       call nvim_win_close(a:winid, 1)
    2              0.000002     endif
    2              0.000001   endif

FUNCTION  airline#extensions#coc#get_error()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\coc.vim:14
Called 173 times
Total time:   0.019259
 Self time:   0.003365

count  total (s)   self (s)
  173   0.019035   0.003140   return airline#extensions#coc#get('error')

FUNCTION  coc#highlight#add_highlight()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\highlight.vim:46
Called 5 times
Total time:   0.000381
 Self time:   0.000381

count  total (s)   self (s)
    5              0.000148   if has('nvim')
    5              0.000168     call nvim_buf_add_highlight(a:bufnr, a:src_id, a:hl_group, a:line, a:col_start, a:col_end)
                              else
                                call coc#api#call('buf_add_highlight', [a:bufnr, a:src_id, a:hl_group, a:line, a:col_start, a:col_end])
    5              0.000005   endif

FUNCTION  <SNR>82_update_git_branch()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\branch.vim:87
Called 173 times
Total time:   0.057880
 Self time:   0.013683

count  total (s)   self (s)
  173   0.007174   0.003567   call airline#util#ignore_next_focusgain()
  173   0.006299   0.002930   if airline#util#has_fugitive()
  173   0.040627   0.003407     call s:config_fugitive_branch()
                              elseif airline#util#has_gina()
                                call s:config_gina_branch()
                              else
                                let s:vcs_config['git'].branch = ''
                                return
  173              0.000199   endif

FUNCTION  coc#util#do_autocmd()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\util.vim:717
Called 5 times
Total time:   0.000090
 Self time:   0.000090

count  total (s)   self (s)
    5              0.000063   if exists('#User#'.a:name)
                                exe 'doautocmd <nomodeline> User '.a:name
    5              0.000004   endif

FUNCTION  airline#check_mode()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline.vim:199
Called 192 times
Total time:   1.586176
 Self time:   0.062627

count  total (s)   self (s)
  192              0.001599   if !has_key(s:contexts, a:winnr)
                                return ''
  192              0.000343   endif
  192              0.001525   let context = s:contexts[a:winnr]
                            
  192              0.001376   if get(w:, 'airline_active', 1)
  185              0.001233     let l:m = mode(1)
  185              0.000875     if l:m ==# "i"
   39              0.000254       let l:mode = ['insert']
  146              0.000787     elseif l:m[0] ==# "i"
    2              0.000008       let l:mode = ['insert']
  144              0.000469     elseif l:m ==# "Rv"
                                  let l:mode =['replace']
  144              0.000528     elseif l:m[0] ==# "R"
                                  let l:mode = ['replace']
  144              0.003750     elseif l:m[0] =~# '\v(v|V||s|S|)'
                                  let l:mode = ['visual']
  144              0.000442     elseif l:m ==# "t"
                                  let l:mode = ['terminal']
  144              0.000498     elseif l:m[0] ==# "c"
    4              0.000031       let l:mode = ['commandline']
  140              0.000428     elseif l:m ==# "no"   " does not work, most likely, Vim does not refresh the statusline in OP mode
    1              0.000003       let l:mode = ['normal']
  139              0.000604     elseif l:m[0:1] ==# 'ni'
                                  let l:mode = ['insert']
                                  let l:m = 'ni'
  139              0.000195     else
  139              0.000706       let l:mode = ['normal']
  185              0.000264     endif
  185              0.002257     if exists("*VMInfos") && !empty(VMInfos())
                                  " Vim plugin Multiple Cursors https://github.com/mg979/vim-visual-multi
                                  let l:m = 'multi'
  185              0.000241     endif
  185              0.002788     if index(['Rv', 'no', 'ni', 'ix', 'ic', 'multi'], l:m) == -1
  182              0.000895       let l:m = l:m[0]
  185              0.000259     endif
  185              0.002157     let w:airline_current_mode = get(g:airline_mode_map, l:m, l:m)
    7              0.000007   else
    7              0.000025     let l:mode = ['inactive']
    7              0.000045     let w:airline_current_mode = get(g:airline_mode_map, '__')
  192              0.000273   endif
                            
  192              0.001513   if g:airline_detect_modified && &modified
  121              0.001083     call add(l:mode, 'modified')
  192              0.000254   endif
                            
  192              0.000843   if g:airline_detect_paste && &paste
                                call add(l:mode, 'paste')
  192              0.000227   endif
                            
  192              0.002999   if g:airline_detect_crypt && exists("+key") && !empty(&key)
                                call add(l:mode, 'crypt')
  192              0.000211   endif
                            
  192              0.000859   if g:airline_detect_spell && &spell
                                call add(l:mode, 'spell')
  192              0.000227   endif
                            
  192              0.000720   if &readonly || ! &modifiable
   17              0.000139     call add(l:mode, 'readonly')
  192              0.000210   endif
                            
  192              0.002053   let mode_string = join(l:mode)
  192              0.001834   if get(w:, 'airline_lastmode', '') != mode_string
   16   0.016701   0.000511     call airline#highlighter#highlight_modified_inactive(context.bufnr)
   16   1.505286   0.000621     call airline#highlighter#highlight(l:mode, context.bufnr)
   16   0.002923   0.000229     call airline#util#doautocmd('AirlineModeChanged')
   16              0.000075     let w:airline_lastmode = mode_string
  192              0.000210   endif
                            
  192              0.000482   return ''

FUNCTION  <SNR>23_AsyncRequest()
    Defined: ~\.vim\plugged\coc.nvim\plugin\coc.vim:113
Called 19 times
Total time:   0.007168
 Self time:   0.001807

count  total (s)   self (s)
   19              0.000470   let Cb = empty(a:args)? v:null : a:args[len(a:args) - 1]
   19              0.000169   if type(Cb) == 2
                                if !coc#rpc#ready()
                                  call Cb('service not started', v:null)
                                else
                                  call coc#rpc#request_async(a:name, a:args[0:-2], Cb)
                                endif
                                return ''
   19              0.000030   endif
   19   0.005795   0.000434   call coc#rpc#notify(a:name, a:args)
   19              0.000039   return ''

FUNCTION  airline#util#append()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:49
Called 1211 times
Total time:   0.033015
 Self time:   0.033015

count  total (s)   self (s)
 1211              0.007267   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
 1211              0.001295   endif
 1211              0.009723   let prefix = s:spc == "\ua0" ? s:spc : s:spc.s:spc
 1211              0.009313   return empty(a:text) ? '' : prefix.g:airline_left_alt_sep.s:spc.a:text

FUNCTION  <SNR>82_config_fugitive_branch()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\branch.vim:99
Called 173 times
Total time:   0.037220
 Self time:   0.008155

count  total (s)   self (s)
  173   0.034100   0.005036   let s:vcs_config['git'].branch = exists('*FugitiveHead') ? FugitiveHead(s:sha1size) : fugitive#head(s:sha1size)
  173              0.001678   if s:vcs_config['git'].branch is# 'master' && airline#util#winwidth() < 81
                                " Shorten default a bit
                                let s:vcs_config['git'].branch='mas'
  173              0.000200   endif

FUNCTION  coc#highlight#compose_hlgroup()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\highlight.vim:145
Called 3 times
Total time:   0.000052
 Self time:   0.000052

count  total (s)   self (s)
    3              0.000025   let hlGroup = 'Fg'.a:fgGroup.'Bg'.a:bgGroup
    3              0.000012   if a:fgGroup == a:bgGroup
    3              0.000008     return a:fgGroup
                              endif
                              if hlexists(hlGroup)
                                return hlGroup
                              endif
                              let fg = synIDattr(synIDtrans(hlID(a:fgGroup)), 'fg', 'gui')
                              let bg = synIDattr(synIDtrans(hlID(a:bgGroup)), 'bg', 'gui')
                              if fg =~# '^#' || bg =~# '^#'
                                call s:create_gui_hlgroup(hlGroup, fg, bg, '')
                              else
                                let fg = synIDattr(synIDtrans(hlID(a:fgGroup)), 'fg', 'cterm')
                                let bg = synIDattr(synIDtrans(hlID(a:bgGroup)), 'bg', 'cterm')
                                call s:create_cterm_hlgroup(hlGroup, fg, bg, '')
                              endif
                              return hlGroup

FUNCTION  <SNR>18_on_cursor_moved()
    Defined: ~\.vim\plugged\vim-airline\plugin\airline.vim:83
Called 48 times
Total time:   0.004099
 Self time:   0.003086

count  total (s)   self (s)
   48              0.001102   if winnr() != s:active_winnr || !exists('w:airline_active')
                                call s:on_window_changed('CursorMoved')
   48              0.000115   endif
   48   0.002148   0.001134   call airline#update_tabline()

FUNCTION  coc#float#create_buf()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:1187
Called 6 times
Total time:   0.002093
 Self time:   0.002056

count  total (s)   self (s)
    6              0.000035   if a:bufnr > 0 && bufloaded(a:bufnr)
    2              0.000007     let bufnr = a:bufnr
    4              0.000004   else
    4              0.000007     if s:is_vim
                                  noa let bufnr = bufadd('')
                                  noa call bufload(bufnr)
                                  call setbufvar(bufnr, '&buflisted', 0)
    4              0.000005     else
    4              0.000703       noa let bufnr = nvim_create_buf(v:false, v:true)
    4              0.000008     endif
    4              0.000034     let bufhidden = get(a:, 2, 'wipe')
    4   0.000100   0.000084     call setbufvar(bufnr, '&buftype', 'nofile')
    4   0.000072   0.000066     call setbufvar(bufnr, '&bufhidden', bufhidden)
    4   0.000063   0.000058     call setbufvar(bufnr, '&swapfile', 0)
    4   0.000074   0.000068     call setbufvar(bufnr, '&undolevels', -1)
                                " neovim's bug
    4   0.000058   0.000053     call setbufvar(bufnr, '&modifiable', 1)
    6              0.000008   endif
    6              0.000040   let lines = get(a:, 1, v:null)
    6              0.000028   if type(lines) != 7
    6              0.000178     if has('nvim')
    6              0.000216       call nvim_buf_set_lines(bufnr, 0, -1, v:false, lines)
                                else
                                  silent call deletebufline(bufnr, 1, '$')
                                  silent call setbufline(bufnr, 1, lines)
    6              0.000007     endif
    6              0.000007   endif
    6              0.000015   return bufnr

FUNCTION  airline#extensions#branch#update_untracked_config()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\branch.vim:190
Called 166 times
Total time:   0.006416
 Self time:   0.006416

count  total (s)   self (s)
  166              0.001720   if !has_key(s:vcs_config[a:vcs].untracked, a:file)
                                return
  166              0.001958   elseif s:vcs_config[a:vcs].untracked[a:file] != b:buffer_vcs_config[a:vcs].untracked
                                let b:buffer_vcs_config[a:vcs].untracked = s:vcs_config[a:vcs].untracked[a:file]
                                unlet! b:airline_head
  166              0.000202   endif

FUNCTION  <SNR>79_get_array()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:57
Called 5454 times
Total time:   0.061530
 Self time:   0.061530

count  total (s)   self (s)
 5454              0.056574   return [ a:guifg, a:guibg, a:ctermfg, a:ctermbg, empty(a:opts) ? '' : join(a:opts, ',') ]

FUNCTION  airline#section#create()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\section.vim:74
Called 7 times
Total time:   0.002098
 Self time:   0.000108

count  total (s)   self (s)
    7   0.002094   0.000104   return s:create(a:parts, 0)

FUNCTION  airline#themes#get_highlight()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\themes.vim:31
Called 2722 times
Total time:   0.989557
 Self time:   0.053075

count  total (s)   self (s)
 2722   0.987467   0.050985   return call('airline#highlighter#get_highlight', [a:group] + a:000)

FUNCTION  <SNR>82_init_buffer()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\branch.vim:51
Called 1 time
Total time:   0.000046
 Self time:   0.000046

count  total (s)   self (s)
    1              0.000004   let b:buffer_vcs_config = {}
    3              0.000011   for vcs in keys(s:vcs_config)
    2              0.000019     let b:buffer_vcs_config[vcs] = {     'branch': '',     'untracked': '',     'dirty': 0,   }
    3              0.000004   endfor
    1              0.000003   unlet! b:airline_head

FUNCTION  airline#extensions#fugitiveline#bufname()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\fugitiveline.vim:15
Called 175 times
Total time:   0.108552
 Self time:   0.085900

count  total (s)   self (s)
  175              0.001468   if !exists('b:fugitive_name')
    1              0.000006     let b:fugitive_name = ''
    1              0.000002     try
    1              0.000028       if bufname('%') =~? '^fugitive:' && exists('*FugitiveReal')
                                    let b:fugitive_name = FugitiveReal(bufname('%'))
    1              0.000013       elseif exists('b:git_dir') && exists('*fugitive#repo')
                                    if get(b:, 'fugitive_type', '') is# 'blob'
                                      let b:fugitive_name = fugitive#repo().translate(FugitivePath(@%, ''))
                                    endif
    1              0.000011       elseif exists('b:git_dir') && !exists('*fugitive#repo')
    1   0.083799   0.063262         let buffer = fugitive#buffer()
    1   0.000040   0.000035         if buffer.type('blob')
                                      let b:fugitive_name = buffer.repo().translate(buffer.path('/'))
    1              0.000002         endif
    1              0.000001       endif
                                catch
    1              0.000002     endtry
  175              0.000281   endif
                            
  175   0.005622   0.003511   let fmod = s:ModifierFlags()
  175              0.000926   if empty(b:fugitive_name)
  175              0.003777     return fnamemodify(bufname('%'), fmod)
                              else
                                return fnamemodify(b:fugitive_name, fmod). " [git]"
                              endif

FUNCTION  airline#util#has_custom_scm()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:172
Called 173 times
Total time:   0.001961
 Self time:   0.001961

count  total (s)   self (s)
  173              0.001713   return !empty(get(g:, 'airline#extensions#branch#custom_head', ''))

FUNCTION  airline#extensions#coc#get_warning()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\coc.vim:10
Called 173 times
Total time:   0.023718
 Self time:   0.003689

count  total (s)   self (s)
  173   0.023508   0.003480   return airline#extensions#coc#get('warning')

FUNCTION  airline#extensions#coc#get_status()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\coc.vim:46
Called 175 times
Total time:   0.016937
 Self time:   0.004307

count  total (s)   self (s)
                              " Shorten text for windows < 91 characters
  175   0.016448   0.003818   return airline#util#shorten(get(g:, 'coc_status', ''), 91, 9)

FUNCTION  airline#extensions#nvimlsp#get()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\nvimlsp.vim:17
Called 346 times
Total time:   0.023908
 Self time:   0.023908

count  total (s)   self (s)
  346              0.022033   if luaeval('vim.tbl_isempty(vim.lsp.buf_get_clients(0))')
  346              0.001039     return ''
                              endif
                            
                              let error_symbol = get(g:, 'airline#extensions#nvimlsp#error_symbol', 'E:')
                              let warning_symbol = get(g:, 'airline#extensions#nvimlsp#warning_symbol', 'W:')
                            
                              let is_err = a:type ==# 'Error'
                            
                              let symbol = is_err ? error_symbol : warning_symbol
                            
                              if luaeval("pcall(require, 'vim.lsp.diagnostic')")
                                let num = v:lua.vim.lsp.diagnostic.get_count(0, a:type)
                              else
                                let num = v:lua.vim.lsp.util.buf_diagnostics_count(a:type)
                              endif
                            
                              return s:airline_nvimlsp_count(num, symbol)

FUNCTION  <SNR>102_create_namespace()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\highlight.vim:327
Called 10 times
Total time:   0.000286
 Self time:   0.000286

count  total (s)   self (s)
   10              0.000059   if type(a:key) == 0
    3              0.000011     return a:key
    7              0.000007   endif
    7              0.000042   if has_key(s:namespace_map, a:key)
    6              0.000026     return s:namespace_map[a:key]
    1              0.000001   endif
    1              0.000048   if has('nvim')
    1              0.000024     let s:namespace_map[a:key] = nvim_create_namespace('coc-'.a:key)
                              else
                                let s:namespace_map[a:key] = s:ns_id
                                let s:ns_id = s:ns_id + 1
    1              0.000001   endif
    1              0.000007   return s:namespace_map[a:key]

FUNCTION  nerdtree#slash()
    Defined: ~\.vim\plugged\nerdtree\autoload\nerdtree.vim:47
Called 17 times
Total time:   0.001601
 Self time:   0.000663

count  total (s)   self (s)
   17   0.001278   0.000340     if nerdtree#runningWindows()
   17              0.000141         if exists('+shellslash') && &shellslash
                                        return '/'
   17              0.000023         endif
                            
   17              0.000039         return '\'
                                endif
                            
                                return '/'

FUNCTION  coc#float#check_related()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:787
Called 19 times
Total time:   0.005920
 Self time:   0.001722

count  total (s)   self (s)
   19              0.000124   let invalids = []
   19   0.004769   0.000571   let ids = coc#float#get_float_win_list(1)
   23              0.000095   for id in ids
    4              0.000035     let target = getwinvar(id, 'target_winid', 0)
    4              0.000048     if (target && index(ids, target) == -1) || getwinvar(id, 'kind', '') == 'pum'
                                  call add(invalids, id)
    4              0.000005     endif
   23              0.000055   endfor
   19              0.000078   for id in invalids
                                call coc#float#close(id)
   19              0.000054   endfor

FUNCTION  airline#util#has_fugitive()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:143
Called 180 times
Total time:   0.003522
 Self time:   0.003522

count  total (s)   self (s)
  180              0.001204   if !exists("s:has_fugitive")
                                let s:has_fugitive = exists('*fugitive#head') || exists('*FugitiveHead')
  180              0.000207   endif
  180              0.000529   return s:has_fugitive

FUNCTION  fugitive#buffer()
    Defined: ~\.vim\plugged\vim-fugitive\autoload\fugitive.vim:1630
Called 1 time
Total time:   0.000143
 Self time:   0.000143

count  total (s)   self (s)
    1              0.000026   let buffer = {'#': bufnr(a:0 ? a:1 : '%')}
    1              0.000106   call extend(buffer, s:buffer_prototype, 'keep')
    1              0.000006   return buffer

FUNCTION  coc#util#cursor()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\util.vim:36
Called 15 times
Total time:   0.000658
 Self time:   0.000658

count  total (s)   self (s)
   15              0.000565   return [line('.') - 1, strchars(strpart(getline('.'), 0, col('.') - 1))]

FUNCTION  coc#util#cursor_pos()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\util.vim:166
Called 6 times
Total time:   0.000124
 Self time:   0.000124

count  total (s)   self (s)
    6              0.000023   let nr = winnr()
    6              0.000046   let [row, col] = win_screenpos(nr)
    6              0.000045   return [row + winline() - 2, col + wincol() - 2]

FUNCTION  <SNR>132_set_clean_jobs_variable()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\async.vim:80
Called 1 time
Total time:   0.000039
 Self time:   0.000039

count  total (s)   self (s)
    1              0.000015   if !has_key(s:clean_jobs, a:vcs)
                                let s:clean_jobs[a:vcs] = {}
    1              0.000003   endif
    1              0.000012   let s:clean_jobs[a:vcs][a:file]=a:id

FUNCTION  coc#float#create_float_win()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:55
Called 3 times
Total time:   0.008624
 Self time:   0.001388

count  total (s)   self (s)
    3              0.000022   let lines = get(a:config, 'lines', v:null)
    3   0.000862   0.000056   let bufnr = coc#float#create_buf(a:bufnr, lines, 'hide')
                              " use exists
    3   0.000098   0.000030   if a:winid && coc#float#valid(a:winid)
    1              0.000003     if s:is_vim
                                  let [line, col] = s:popup_position(a:config)
                                  let opts = { 'firstline': 1, 'line': line, 'col': col, 'minwidth': a:config['width'], 'minheight': a:config['height'], 'maxwidth': a:config['width'], 'maxheight': a:config['height'], 'cursorline': get(a:config, 'cursorline', 0), 'title': get(a:config, 'title', ''), }
                                  if !s:empty_border(get(a:config, 'border', []))
                                    let opts['border'] = a:config['border']
                                  endif
                                  call popup_setoptions(a:winid, opts)
                                  call coc#float#vim_buttons(a:winid, a:config)
                                  return [a:winid, winbufnr(a:winid)]
    1              0.000002     else
    1   0.000601   0.000032       let config = s:convert_config_nvim(a:config)
    1              0.000027       call nvim_win_set_buf(a:winid, bufnr)
    1              0.000026       call nvim_win_set_config(a:winid, config)
    1              0.000017       call nvim_win_set_cursor(a:winid, [1, 0])
    1   0.003778   0.000035       call coc#float#nvim_create_related(a:winid, config, a:config)
    1              0.000011       return [a:winid, bufnr]
                                endif
    2              0.000002   endif
    2              0.000007   let winid = 0
    2              0.000003   if s:is_vim
                                let [line, col] = s:popup_position(a:config)
                                let title = get(a:config, 'title', '')
                                let buttons = get(a:config, 'buttons', [])
                                let hlgroup = get(a:config, 'highlight',  'CocFloating')
                                let opts = { 'title': title, 'line': line, 'col': col, 'fixed': 1, 'padding': empty(title) ?  [0, 1, 0, 1] : [0, 0, 0, 0], 'borderchars': s:borderchars, 'highlight': hlgroup, 'cursorline': get(a:config, 'cursorline', 0), 'minwidth': a:config['width'], 'minheight': a:config['height'], 'maxwidth': a:config['width'], 'maxheight': a:config['height'] }
                                if get(a:config, 'close', 0)
                                  let opts['close'] = 'button'
                                endif
                                if !empty(get(a:config, 'borderhighlight', []))
                                  let opts['borderhighlight'] = map(a:config['borderhighlight'], 'coc#highlight#compose_hlgroup(v:val,"'.hlgroup.'")')
                                endif
                                if !s:empty_border(get(a:config, 'border', []))
                                  let opts['border'] = a:config['border']
                                endif
                                let winid = popup_create(bufnr, opts)
                                if winid == 0
                                  return []
                                endif
                                call coc#float#vim_buttons(winid, a:config)
                                if has("patch-8.1.2281")
                                  call setwinvar(winid, '&showbreak', 'NONE')
                                endif
    2              0.000002   else
    2   0.000593   0.000037     let config = s:convert_config_nvim(a:config)
    2              0.000222     noa let winid = nvim_open_win(bufnr, 0, config)
    2              0.000005     if winid == 0
                                  return []
    2              0.000002     endif
    2              0.000012     let hlgroup = get(a:config, 'highlight', 'CocFloating')
    2              0.000084     call setwinvar(winid, '&winhl', 'Normal:'.hlgroup.',NormalNC:'.hlgroup.',FoldColumn:'.hlgroup)
    2              0.000017     call setwinvar(winid, '&signcolumn', 'no')
                                " cursorline highlight not work on old neovim
    2              0.000017     call setwinvar(winid, '&cursorline', 0)
    2              0.000014     call setwinvar(winid, 'border', get(a:config, 'border', []))
                                " no left border
    2   0.000045   0.000034     if s:empty_border(get(a:config, 'border', [])) || a:config['border'][3] == 0
    2              0.000015       call setwinvar(winid, '&foldcolumn', 1)
    2              0.000002     endif
    2              0.000019     call nvim_win_set_cursor(winid, [1, 0])
    2   0.001483   0.000032     call coc#float#nvim_create_related(winid, config, a:config)
    2              0.000002   endif
    2              0.000008   if get(a:config, 'autohide', 0)
    2              0.000008     call setwinvar(winid, 'autohide', 1)
    2              0.000001   endif
    2              0.000050   if s:is_vim || has('nvim-0.5.0')
    2              0.000016     call setwinvar(winid, '&scrolloff', 0)
    2              0.000001   endif
    2              0.000008   call setwinvar(winid, 'float', 1)
    2              0.000012   call setwinvar(winid, '&list', 0)
    2              0.000011   call setwinvar(winid, '&number', 0)
    2              0.000011   call setwinvar(winid, '&relativenumber', 0)
    2              0.000013   call setwinvar(winid, '&cursorcolumn', 0)
    2              0.000013   call setwinvar(winid, '&colorcolumn', 0)
    2              0.000011   call setwinvar(winid, '&wrap', 1)
    2              0.000010   call setwinvar(winid, '&linebreak', 1)
    2              0.000011   call setwinvar(winid, '&conceallevel', 0)
    2              0.000012   let g:coc_last_float_win = winid
    2   0.000060   0.000028   call coc#util#do_autocmd('CocOpenFloat')
    2              0.000007   return [winid, bufnr]

FUNCTION  airline#parts#filetype()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\parts.vim:102
Called 175 times
Total time:   0.009406
 Self time:   0.005095

count  total (s)   self (s)
  175   0.009089   0.004778   return (airline#util#winwidth() < 90 && strlen(&filetype) > 3) ? matchstr(&filetype, '...'). (&encoding is? 'utf-8' ? '…' : '>') : &filetype

FUNCTION  airline#extensions#netrw#apply()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\netrw.vim:11
Called 37 times
Total time:   0.001275
 Self time:   0.001275

count  total (s)   self (s)
   37              0.000209   if &ft == 'netrw'
                                let spc = g:airline_symbols.space
                            
                                call a:1.add_section('airline_a', spc.'netrw'.spc)
                                if exists('*airline#extensions#branch#get_head')
                                  call a:1.add_section('airline_b', spc.'%{airline#extensions#branch#get_head()}'.spc)
                                endif
                                call a:1.add_section('airline_c', spc.'%f'.spc)
                                call a:1.split()
                                call a:1.add_section('airline_y', spc.'%{airline#extensions#netrw#sortstring()}'.spc)
                                return 1
   37              0.000028   endif

FUNCTION  airline#parts#iminsert()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\parts.vim:82
Called 173 times
Total time:   0.002779
 Self time:   0.002779

count  total (s)   self (s)
  173              0.001121   if g:airline_detect_iminsert && &iminsert && exists('b:keymap_name')
                                return toupper(b:keymap_name)
  173              0.000182   endif
  173              0.000324   return ''

FUNCTION  airline#extensions#term#apply()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\term.vim:14
Called 37 times
Total time:   0.001252
 Self time:   0.001252

count  total (s)   self (s)
   37              0.000288   if &buftype ==? 'terminal' || bufname(a:2.bufnr)[0] ==? '!'
                                call a:1.add_section_spaced('airline_a', s:section_a)
                                call a:1.add_section_spaced('airline_b', s:neoterm_id(a:2.bufnr))
                                call a:1.add_section('airline_term', s:spc.s:termname(a:2.bufnr))
                                call a:1.split()
                                call a:1.add_section('airline_y', '')
                                call a:1.add_section_spaced('airline_z', s:section_z)
                                return 1
   37              0.000031   endif

FUNCTION  coc#compat#execute()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\compat.vim:114
Called 3 times
Total time:   0.000631
 Self time:   0.000631

count  total (s)   self (s)
    3              0.000021   if s:is_vim
                                if !exists('*win_execute')
                                  throw 'win_execute function not exists, please upgrade your vim.'
                                endif
                                if type(a:command) == v:t_string
                                  keepalt call win_execute(a:winid, a:command)
                                elseif type(a:command) == v:t_list
                                  keepalt call win_execute(a:winid, join(a:command, "\n"))
                                endif
    3              0.000005   else
    3              0.000029     let curr = nvim_get_current_win()
    3              0.000145     noa keepalt call nvim_set_current_win(a:winid)
    3              0.000029     if type(a:command) == v:t_string
    3              0.000056       exec a:command
                                elseif type(a:command) == v:t_list
                                  exec join(a:command, "\n")
    3              0.000004     endif
    3              0.000124     noa keepalt call nvim_set_current_win(curr)
    3              0.000006   endif

FUNCTION  coc#float#get_related()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:1177
Called 57 times
Total time:   0.001998
 Self time:   0.001998

count  total (s)   self (s)
   63              0.000862   for winid in getwinvar(a:winid, 'related', [])
    7              0.000042     if getwinvar(winid, 'kind', '') ==# a:kind
    1              0.000004       return winid
    6              0.000005     endif
   62              0.000153   endfor
   56              0.000139   return 0

FUNCTION  coc#_hide()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc.vim:91
Called 1 time
Total time:   0.000016
 Self time:   0.000016

count  total (s)   self (s)
    1              0.000005   if !pumvisible() | return | endif
    1              0.000009   call feedkeys("\<C-e>", 'in')

FUNCTION  airline#extensions#coc#get()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\coc.vim:18
Called 346 times
Total time:   0.035923
 Self time:   0.035923

count  total (s)   self (s)
  346              0.002503   if !exists(':CocCommand')
                                return ''
  346              0.000410   endif
  346              0.002973   let _backup = get(g:, 'coc_stl_format', '')
  346              0.002296   let is_err = (a:type  is# 'error')
  346              0.000771   if is_err
  173              0.002195     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_err', '%E{[%e(#%fe)]}')
  173              0.000217   else
  173              0.002341     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_warn', '%W{[%w(#%fw)]}')
  346              0.000442   endif
  346              0.002637   let info = get(b:, 'coc_diagnostic_info', {})
  346              0.002486   if empty(info) | return '' | endif
                            
                            
  258              0.001869   let cnt = get(info, a:type, 0)
  258              0.001254   if !empty(_backup)
  258              0.001894     let g:coc_stl_format = _backup
  258              0.000323   endif
                            
  258              0.001019   if empty(cnt)
  109              0.000225     return ''
  149              0.000170   else
  149              0.001791     let lnum = printf('(L%d)', (info.lnums)[0])
  149              0.001570     return (is_err ? s:error_symbol : s:warning_symbol).cnt.lnum
                              endif

FUNCTION  provider#python3#Call()
    Defined: C:\Neovim\share\nvim\runtime\autoload\provider\python3.vim:26
Called 20 times
Total time:   0.269427
 Self time:   0.269427

count  total (s)   self (s)
   20              0.000146   if s:err != ''
                                return
   20              0.000028   endif
   20              0.000151   if !exists('s:host')
                                let s:rpcrequest = function('rpcrequest')
                            
                                " Ensure that we can load the Python3 host before bootstrapping
                                try
                                  let s:host = remote#host#Require('legacy-python3-provider')
                                catch
                                  let s:err = v:exception
                                  echohl WarningMsg
                                  echomsg v:exception
                                  echohl None
                                  return
                                endtry
   20              0.000027   endif
   20              0.268211   return call(s:rpcrequest, insert(insert(a:args, 'python_'.a:method), s:host))

FUNCTION  airline#extensions#apply()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions.vim:71
Called 179 times
Total time:   0.062546
 Self time:   0.026159

count  total (s)   self (s)
  179              0.001247   let filetype_overrides = get(s:, 'filetype_overrides', {})
  179              0.008701   call extend(filetype_overrides, get(g:, 'airline_filetype_overrides', {}), 'force')
                            
  179   0.036445   0.002354   if s:is_excluded_window()
                                return -1
  179              0.000129   endif
                            
  179              0.000557   if &buftype == 'terminal'
                                let w:airline_section_x = ''
                                let w:airline_section_y = ''
  179              0.000123   endif
                            
  179              0.000910   if &previewwindow && empty(get(w:, 'airline_section_a', ''))
                                let w:airline_section_a = 'Preview'
                                let w:airline_section_b = ''
                                let w:airline_section_c = bufname(winbufnr(winnr()))
  179              0.000124   endif
                            
  179              0.001736   if has_key(filetype_overrides, &ft) && ((&filetype == 'help' && &buftype == 'help') || &filetype !~ 'help')
                                " for help files only override it, if the buftype is also of type 'help',
                                " else it would trigger when editing Vim help files
    7              0.000043     let args = filetype_overrides[&ft]
    7   0.002419   0.000123     call airline#extensions#apply_left_override(args[0], args[1])
  179              0.000134   endif
                            
  179              0.000421   if &buftype == 'help'
                                let w:airline_section_x = ''
                                let w:airline_section_y = ''
                                let w:airline_render_right = 1
  179              0.000124   endif
                            
  179              0.001080   for item in items(s:filetype_regex_overrides)
                                if match(&ft, item[0]) >= 0
                                  call airline#extensions#apply_left_override(item[1][0], item[1][1])
                                endif
  179              0.000247   endfor

FUNCTION  coc#float#get_config_cursor()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:803
Called 3 times
Total time:   0.014247
 Self time:   0.012948

count  total (s)   self (s)
    3              0.000021   let preferTop = get(a:config, 'preferTop', 0)
    3              0.000017   let title = get(a:config, 'title', '')
    3              0.000023   let border = get(a:config, 'border', [0, 0, 0, 0])
    3   0.000120   0.000061   if s:empty_border(border) && len(title)
                                let border = [1, 1, 1, 1]
    3              0.000003   endif
    3              0.000024   let bh = get(border, 0, 0) + get(border, 2, 0)
    3              0.000018   let vh = &lines - &cmdheight - 1
    3              0.000007   if vh <= 0
                                return v:null
    3              0.000003   endif
    3   0.012641   0.011992   let maxWidth = coc#helper#min(get(a:config, 'maxWidth', &columns - 1), &columns - 1)
    3              0.000008   if maxWidth < 3
                                return v:null
    3              0.000003   endif
    3   0.000158   0.000058   let maxHeight = coc#helper#min(get(a:config, 'maxHeight', vh), vh)
    3              0.000007   let ch = 0
    3   0.000163   0.000060   let width = coc#helper#min(40, strdisplaywidth(title)) + 3
    6              0.000018   for line in a:lines
    3              0.000035     let dw = max([1, strdisplaywidth(line)])
    3              0.000024     let width = max([width, dw + 2])
    3              0.000063     let ch += float2nr(ceil(str2float(string(dw))/(maxWidth - 2)))
    6              0.000009   endfor
    3   0.000143   0.000043   let width = coc#helper#min(maxWidth, width)
    3   0.000129   0.000058   let [lineIdx, colIdx] = coc#util#cursor_pos()
                              " How much we should move left
    3   0.000152   0.000059   let offsetX = coc#helper#min(get(a:config, 'offsetX', 0), colIdx)
    3              0.000012   let showTop = 0
    3              0.000011   let hb = vh - lineIdx -1
    3              0.000019   if lineIdx > bh + 2 && (preferTop || (lineIdx > hb && hb < ch + bh))
                                let showTop = 1
    3              0.000003   endif
    3   0.000179   0.000056   let height = coc#helper#min(maxHeight, ch + bh, showTop ? lineIdx - 1 : hb)
    3              0.000008   if height <= bh
                                return v:null
    3              0.000003   endif
    3              0.000031   let col = - max([offsetX, colIdx - (&columns - 1 - width)])
    3              0.000011   let row = showTop ? - height + bh : 1
    3              0.000033   return { 'row': row, 'col': col, 'width': width - 2, 'height': height - bh }

FUNCTION  airline#mode_changed()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline.vim:279
Called 16 times
Total time:   0.000794
 Self time:   0.000612

count  total (s)   self (s)
                              " airline#visual_active
                              " Boolean: for when to get visual wordcount
                              " needed for the wordcount extension
   16              0.000356   let g:airline#visual_active = (mode() =~? '[vs]')
   16   0.000375   0.000193   call airline#update_tabline()

FUNCTION  <SNR>133_cpath()
    Defined: ~\.vim\plugged\vim-fugitive\autoload\fugitive.vim:136
Called 7 times
Total time:   0.000433
 Self time:   0.000272

count  total (s)   self (s)
    7   0.000159   0.000082   if s:FileIgnoreCase(0)
    7   0.000183   0.000099     let path = FugitiveVimPath(tolower(a:path))
                              else
                                let path = FugitiveVimPath(a:path)
    7              0.000006   endif
    7              0.000037   return a:0 ? path ==# s:cpath(a:1) : path

FUNCTION  coc#_do_complete()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc.vim:62
Called 1 time
Total time:   0.000074
 Self time:   0.000074

count  total (s)   self (s)
    1              0.000029   let g:coc#_context = { 'start': a:start, 'candidates': a:items, 'preselect': a:preselect}
    1              0.000022   if mode() =~# 'i' && &paste != 1
    1              0.000016     call feedkeys("\<Plug>CocRefresh", 'i')
    1              0.000001   endif

FUNCTION  airline#util#winwidth()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:19
Called 2181 times
Total time:   0.047049
 Self time:   0.047049

count  total (s)   self (s)
 2181              0.014085   let nr = get(a:000, 0, 0)
 2181              0.011374   if get(g:, 'airline_statusline_ontop', 0)
                                return &columns
 2181              0.002602   else
 2181              0.009163     return winwidth(nr)
                              endif

FUNCTION  <SNR>75_invoke_funcrefs()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline.vim:177
Called 179 times
Total time:   1.674028
 Self time:   0.015646

count  total (s)   self (s)
  179   0.017324   0.002158   let builder = airline#builder#new(a:context)
  179   0.267544   0.004211   let err = airline#util#exec_funcrefs(a:funcrefs + s:core_funcrefs, builder, a:context)
  179              0.000299   if err == 1
  179   1.382252   0.002368     let a:context.line = builder.build()
  179              0.001549     let s:contexts[a:context.winnr] = a:context
  179              0.001285     let option = get(g:, 'airline_statusline_ontop', 0) ? '&tabline' : '&statusline'
  179              0.002935     call setwinvar(a:context.winnr, option, '%!airline#statusline('.a:context.winnr.')')
  179              0.000165   endif

FUNCTION  airline#util#doautocmd()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:176
Called 16 times
Total time:   0.002694
 Self time:   0.000496

count  total (s)   self (s)
   16   0.002677   0.000479   exe printf("silent doautocmd %s User %s", s:nomodeline, a:event)

FUNCTION  38()
    Defined: ~\.vim\plugged\nerdtree\lib\nerdtree\path.vim:698
Called 17 times
Total time:   0.006293
 Self time:   0.002528

count  total (s)   self (s)
   17              0.000126     let options = a:0 ? a:1 : {}
   17              0.000060     let toReturn = ''
                            
   17              0.000102     if has_key(options, 'format')
                                    let format = options['format']
                                    if has_key(self, '_strFor' . format)
                                        exec 'let toReturn = self._strFor' . format . '()'
                                    else
                                        throw 'NERDTree.UnknownFormatError: unknown format "'. format .'"'
                                    endif
   17              0.000027     else
   17   0.003923   0.000334         let toReturn = self._str()
   17              0.000023     endif
                            
   17   0.000459   0.000282     if nerdtree#has_opt(options, 'escape')
                                    let toReturn = shellescape(toReturn)
   17              0.000022     endif
                            
   17              0.000084     if has_key(options, 'truncateTo')
                                    let limit = options['truncateTo']
                                    if strdisplaywidth(toReturn) > limit-1
                                        while strdisplaywidth(toReturn) > limit-1 && strchars(toReturn) > 0
                                            let toReturn = substitute(toReturn, '^.', '', '')
                                        endwhile
                                        if len(split(toReturn, '/')) > 1
                                            let toReturn = '</' . join(split(toReturn, '/')[1:], '/') . '/'
                                        else
                                            let toReturn = '<' . toReturn
                                        endif
                                    endif
   17              0.000017     endif
                            
   17              0.000049     return toReturn

FUNCTION  <SNR>98_empty_border()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:895
Called 11 times
Total time:   0.000113
 Self time:   0.000113

count  total (s)   self (s)
   11              0.000042   if empty(a:border)
    8              0.000014     return 1
    3              0.000003   endif
    3              0.000024   if a:border[0] == 0 && a:border[1] == 0 && a:border[2] == 0 && a:border[3] == 0
    3              0.000005     return 1
                              endif
                              return 0

FUNCTION  coc#util#get_complete_option()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\util.vim:338
Called 1 time
Total time:   0.000274
 Self time:   0.000274

count  total (s)   self (s)
    1              0.000007   let pos = getcurpos()
    1              0.000006   let line = getline(pos[1])
    1              0.000033   let input = matchstr(strpart(line, 0, pos[2] - 1), '\k*$')
    1              0.000006   let col = pos[2] - strlen(input)
    1              0.000064   let synname = synIDattr(synID(pos[1], col, 1), 'name')
    1              0.000155   return { 'word': matchstr(strpart(line, col - 1), '^\k\+'), 'input': empty(input) ? '' : input, 'line': line, 'filetype': &filetype, 'filepath': expand('%:p'), 'bufnr': bufnr('%'), 'linenr': pos[1], 'colnr' : pos[2], 'col': col - 1, 'synname': synname, 'changedtick': b:changedtick, 'blacklist': get(b:, 'coc_suggest_blacklist', []),}

FUNCTION  FugitiveIsGitDir()
    Defined: ~\.vim\plugged\vim-fugitive\plugin\fugitive.vim:214
Called 2 times
Total time:   0.000135
 Self time:   0.000135

count  total (s)   self (s)
    2              0.000028   let path = substitute(a:path, '[\/]$', '', '') . '/'
    2              0.000102   return len(a:path) && getfsize(path.'HEAD') > 10 && ( isdirectory(path.'objects') && isdirectory(path.'refs') || getftype(path.'commondir') ==# 'file')

FUNCTION  nerdtree#checkForBrowse()
    Defined: ~\.vim\plugged\nerdtree\autoload\nerdtree.vim:61
Called 20 times
Total time:   0.000547
 Self time:   0.000547

count  total (s)   self (s)
   20              0.000480     if !isdirectory(a:dir)
   20              0.000030         return
                                endif
                            
                                if s:reuseWin(a:dir)
                                    return
                                endif
                            
                                call g:NERDTreeCreator.CreateWindowTree(a:dir)

FUNCTION  <SNR>98_convert_config_nvim()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:701
Called 3 times
Total time:   0.001125
 Self time:   0.000346

count  total (s)   self (s)
    3              0.000031   let valids = ['relative', 'win', 'anchor', 'width', 'height', 'bufpos', 'col', 'row', 'focusable', 'style']
    3   0.000811   0.000053   let result = coc#helper#dict_pick(a:config, valids)
    3              0.000020   let border = get(a:config, 'border', [])
    3   0.000068   0.000046   if !s:empty_border(border)
                                if result['relative'] ==# 'cursor' && result['row'] < 0
                                  " move top when has bottom border
                                  if get(border, 2, 0)
                                    let result['row'] = result['row'] - 1
                                  endif
                                else
                                  " move down when has top border
                                  if get(border, 0, 0) && !get(a:config, 'prompt', 0)
                                    let result['row'] = result['row'] + 1
                                  endif
                                endif
                                " move right when has left border
                                if get(border, 3, 0)
                                  let result['col'] = result['col'] + 1
                                endif
                                let result['width'] = float2nr(result['width'] + 1 - get(border,3, 0))
    3              0.000004   else
    3              0.000025     let result['width'] = float2nr(result['width'] + 1)
    3              0.000003   endif
    3              0.000021   let result['height'] = float2nr(result['height'])
    3              0.000006   return result

FUNCTION  43()
    Defined: ~\.vim\plugged\nerdtree\lib\nerdtree\path.vim:793
Called 17 times
Total time:   0.003589
 Self time:   0.001134

count  total (s)   self (s)
   17   0.001883   0.000282     let l:separator = nerdtree#slash()
   17              0.000084     let l:leader = l:separator
                            
   17   0.001135   0.000282     if nerdtree#runningWindows()
   17              0.000131         let l:leader = self.drive . l:separator
   17              0.000023     endif
                            
   17              0.000219     return l:leader . join(self.pathSegments, l:separator)

FUNCTION  coc#float#create_cursor_float()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:443
Called 3 times
Total time:   0.099973
 Self time:   0.035225

count  total (s)   self (s)
    3              0.000018   if !s:float_supported
                                return v:null
    3              0.000004   endif
    3   0.020877   0.000058   if s:is_blocking()
                                return v:null
    3              0.000003   endif
    3              0.000027   let pumAlignTop = get(a:config, 'pumAlignTop', 0)
    3              0.000033   let modes = get(a:config, 'modes', ['n', 'i', 'ic', 's'])
    3              0.000014   let mode = mode()
    3              0.000019   let currbuf = bufnr('%')
    3              0.000026   let pos = [line('.'), col('.')]
    3              0.000019   if index(modes, mode) == -1
                                return v:null
    3              0.000003   endif
    3              0.000099   if has('nvim') && mode ==# 'i'
                                " helps to fix undo issue, don't know why.
                                call feedkeys("\<C-g>u", 'n')
    3              0.000003   endif
    3   0.014322   0.000075   let dimension = coc#float#get_config_cursor(a:lines, a:config)
    3              0.000013   if empty(dimension)
                                return v:null
    3              0.000003   endif
    3              0.000025   if pumvisible() && ((pumAlignTop && dimension['row'] <0)|| (!pumAlignTop && dimension['row'] > 0))
                                return v:null
    3              0.000003   endif
    3              0.000014   let width = dimension['width']
    3   0.000170   0.000104   let lines = map(a:lines, {_, s -> s =~# '^—' ? repeat('—', width) : s})
    3              0.000242   let config = extend({'lines': lines, 'relative': 'cursor'}, a:config)
    3              0.000176   let config = extend(config, dimension)
    3   0.000800   0.000064   call coc#float#close_auto_hide_wins(a:winid)
    3   0.008701   0.000077   let res = coc#float#create_float_win(a:winid, a:bufnr, config)
    3              0.000013   if empty(res)
                                return v:null
    3              0.000004   endif
    3              0.000014   let winid = res[0]
    3              0.000009   let bufnr = res[1]
    3   0.019258   0.000090   call coc#highlight#add_highlights(winid, get(a:config, 'codes', []), get(a:config, 'highlights', []))
    3              0.033713   redraw
    3              0.000075   if has('nvim')
    3   0.001148   0.000060     call coc#float#nvim_scrollbar(winid)
    3              0.000003   endif
    3              0.000013   return [currbuf, pos, winid, bufnr]

FUNCTION  <SNR>132_valid_dir()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\async.vim:50
Called 14 times
Total time:   0.001366
 Self time:   0.001366

count  total (s)   self (s)
   14              0.001155   if empty(a:dir) || !isdirectory(a:dir)
                                return getcwd()
   14              0.000022   endif
   14              0.000047   return a:dir

FUNCTION  <SNR>79_get_syn()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:41
Called 21816 times
Total time:   1.008630
 Self time:   1.008630

count  total (s)   self (s)
21816              0.045702   let color = ''
21816              0.181311   if hlexists(a:group)
18820              0.227783     let color = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)
21816              0.019348   endif
21816              0.087057   if empty(color) || color == -1
                                " should always exist
 2996              0.056819     let color = synIDattr(synIDtrans(hlID('Normal')), a:what, a:mode)
                                " however, just in case
 2996              0.013408     if empty(color) || color == -1
                                  let color = 'NONE'
 2996              0.002536     endif
21816              0.016555   endif
21816              0.040467   return color

FUNCTION  <SNR>86_check_mixed_indent()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\whitespace.vim:17
Called 4 times
Total time:   0.002732
 Self time:   0.002732

count  total (s)   self (s)
    4              0.000038   let indent_algo = get(g:, 'airline#extensions#whitespace#mixed_indent_algo', 0)
    4              0.000012   if indent_algo == 1
                                " [<tab>]<space><tab>
                                " spaces before or between tabs are not allowed
                                let t_s_t = '(^\t* +\t\s*\S)'
                                " <tab>(<space> x count)
                                " count of spaces at the end of tabs should be less than tabstop value
                                let t_l_s = '(^\t+ {' . &ts . ',}' . '\S)'
                                return search('\v' . t_s_t . '|' . t_l_s, 'nw')
    4              0.000012   elseif indent_algo == 2
                                return search('\v(^\t* +\t\s*\S)', 'nw', 0, 500)
    4              0.000005   else
    4              0.002570     return search('\v(^\t+ +)|(^ +\t+)', 'nw', 0, 500)
                              endif

FUNCTION  coc#prompt#activated()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\prompt.vim:181
Called 3 times
Total time:   0.000018
 Self time:   0.000018

count  total (s)   self (s)
    3              0.000013   return s:activated

FUNCTION  <SNR>83_ModifierFlags()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\fugitiveline.vim:11
Called 175 times
Total time:   0.002110
 Self time:   0.002110

count  total (s)   self (s)
  175              0.001853   return (exists("+autochdir") && &autochdir) ? ':p' : ':.'

FUNCTION  274()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\builder.vim:8
Called 179 times
Total time:   0.001299
 Self time:   0.001299

count  total (s)   self (s)
  179              0.001160   call add(self._sections, ['|', a:0 ? a:1 : '%='])

FUNCTION  airline#extensions#default#apply()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\default.vim:79
Called 179 times
Total time:   0.162358
 Self time:   0.020532

count  total (s)   self (s)
  179              0.000673   let winnr = a:context.winnr
  179              0.000562   let active = a:context.active
                            
  179   0.003992   0.002777   if airline#util#getwinvar(winnr, 'airline_render_left', active || (!active && !g:airline_inactive_collapse))
   56   0.027445   0.000892     call s:build_sections(a:builder, a:context, s:layout[0])
  123              0.000130   else
  123   0.010632   0.001645     let text = s:get_section(winnr, 'c')
  123              0.000383     if empty(text)
                                  let text = ' %f%m '
  123              0.000103     endif
  123   0.002616   0.001637     call a:builder.add_section('airline_c'.(a:context.bufnr), text)
  179              0.000159   endif
                            
  179   0.016858   0.003773   call a:builder.split(s:get_section(winnr, 'gutter', '', ''))
                            
  179   0.003066   0.002078   if airline#util#getwinvar(winnr, 'airline_render_right', 1)
  158   0.092343   0.002321     call s:build_sections(a:builder, a:context, s:layout[1])
  179              0.000153   endif
                            
  179              0.000225   return 1

FUNCTION  airline#util#stl_disabled()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:185
Called 216 times
Total time:   0.013092
 Self time:   0.009313

count  total (s)   self (s)
                              " setting the statusline is disabled,
                              " either globally, per window, or per buffer
                              " w:airline_disabled is deprecated!
  216   0.012367   0.008588   return get(g:, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disabled', 0) || airline#util#getbufvar(winbufnr(a:winnr), 'airline_disable_statusline', 0)

FUNCTION  FugitiveVimPath()
    Defined: ~\.vim\plugged\vim-fugitive\plugin\fugitive.vim:360
Called 7 times
Total time:   0.000084
 Self time:   0.000084

count  total (s)   self (s)
    7              0.000035   if exists('+shellslash') && !&shellslash
    7              0.000038     return tr(a:path, '/', '\')
                              else
                                return a:path
                              endif

FUNCTION  airline#highlighter#add_separator()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:217
Called 612 times
Total time:   0.762813
 Self time:   0.017286

count  total (s)   self (s)
  612              0.005629   let s:separators[a:from.a:to] = [a:from, a:to, a:inverse]
  612   0.756448   0.010920   call <sid>exec_separator({}, a:from, a:to, a:inverse, '')

FUNCTION  airline#util#wrap()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:42
Called 2101 times
Total time:   0.041518
 Self time:   0.034204

count  total (s)   self (s)
 2101   0.024954   0.017640   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
 2101              0.002531   endif
 2101              0.005639   return a:text

FUNCTION  FugitiveGitDir()
    Defined: ~\.vim\plugged\vim-fugitive\plugin\fugitive.vim:13
Called 173 times
Total time:   0.024094
 Self time:   0.024094

count  total (s)   self (s)
  173              0.000624   if v:version < 704
                                return ''
  173              0.001569   elseif !a:0 || type(a:1) == type(0) && a:1 < 0
  173              0.001001     if exists('g:fugitive_event')
                                  return g:fugitive_event
  173              0.000223     endif
  173              0.001315     let dir = get(b:, 'git_dir', '')
  173              0.007813     if empty(dir) && (empty(bufname('')) || &buftype =~# '^\%(nofile\|acwrite\|quickfix\|prompt\)$')
                                  return FugitiveExtractGitDir(getcwd())
  173              0.004101     elseif (!exists('b:git_dir') || b:git_dir =~# s:bad_git_dir) && empty(&buftype)
                                  let b:git_dir = FugitiveExtractGitDir(expand('%:p'))
                                  return b:git_dir
  173              0.000199     endif
  173              0.002327     return dir =~# s:bad_git_dir ? '' : dir
                              elseif type(a:1) == type(0)
                                if a:1 == bufnr('') && (!exists('b:git_dir') || b:git_dir =~# s:bad_git_dir) && empty(&buftype)
                                  let b:git_dir = FugitiveExtractGitDir(expand('%:p'))
                                endif
                                let dir = getbufvar(a:1, 'git_dir')
                                return dir =~# s:bad_git_dir ? '' : dir
                              elseif type(a:1) == type('')
                                return substitute(s:Slash(a:1), '/$', '', '')
                              elseif type(a:1) == type({})
                                return get(a:1, 'git_dir', '')
                              else
                                return ''
                              endif

FUNCTION  <SNR>82_update_branch()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\branch.vim:180
Called 173 times
Total time:   0.109310
 Self time:   0.024490

count  total (s)   self (s)
  519              0.003024   for vcs in keys(s:vcs_config)
  346   0.094209   0.009389     call {s:vcs_config[vcs].update_branch}()
  346              0.003408     if b:buffer_vcs_config[vcs].branch != s:vcs_config[vcs].branch
                                  let b:buffer_vcs_config[vcs].branch = s:vcs_config[vcs].branch
                                  unlet! b:airline_head
  346              0.000456     endif
  519              0.001106   endfor

FUNCTION  <SNR>93_get_section()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\default.vim:20
Called 1040 times
Total time:   0.074431
 Self time:   0.059706

count  total (s)   self (s)
 1040              0.004606   if has_key(s:section_truncate_width, a:key)
  626   0.017912   0.008544     if airline#util#winwidth(a:winnr) < s:section_truncate_width[a:key]
  208              0.000283       return ''
  418              0.000315     endif
  832              0.000620   endif
  832              0.002545   let spc = g:airline_symbols.space
  832              0.005715   if !exists('g:airline_section_{a:key}')
                                return ''
  832              0.000599   endif
  832   0.019230   0.013873   let text = airline#util#getwinvar(a:winnr, 'airline_section_'.a:key, g:airline_section_{a:key})
  832              0.009412   let [prefix, suffix] = [get(a:000, 0, '%('.spc), get(a:000, 1, spc.'%)')]
  832              0.005693   return empty(text) ? '' : prefix.text.suffix

FUNCTION  <SNR>133_FileIgnoreCase()
    Defined: ~\.vim\plugged\vim-fugitive\autoload\fugitive.vim:131
Called 7 times
Total time:   0.000077
 Self time:   0.000077

count  total (s)   self (s)
    7              0.000068   return (exists('+fileignorecase') && &fileignorecase) || (a:for_completion && exists('+wildignorecase') && &wildignorecase)

FUNCTION  <SNR>132_set_clean_variables()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\async.vim:67
Called 1 time
Total time:   0.000181
 Self time:   0.000181

count  total (s)   self (s)
    1              0.000065   let var=getbufvar(fnameescape(a:file), 'buffer_vcs_config', {})
    1              0.000050   if has_key(var, a:vcs) && has_key(var[a:vcs], 'dirty') && type(getbufvar(fnameescape(a:file), 'buffer_vcs_config')) == type({})
    1              0.000007     let var[a:vcs].dirty=a:val
    1              0.000002     try
    1              0.000036       call setbufvar(fnameescape(a:file), 'buffer_vcs_config', var)
    1              0.000006       unlet! b:airline_head
                                catch
    1              0.000003     endtry
    1              0.000002   endif

FUNCTION  <SNR>10_detect_indent()
    Defined: ~\.vim\plugged\vim-polyglot\autoload\polyglot\init.vim:2915
Called 20 times
Total time:   0.113930
 Self time:   0.002832

count  total (s)   self (s)
   20              0.000110     if &buftype ==# 'help'
                                  return
   20              0.000020     endif
                            
                                " Do not autodetect indent if language or user sets it
   20              0.000084     if &l:shiftwidth != s:default_shiftwidth
    1              0.000001       return
   19              0.000015     endif
                            
   19              0.001045     let b:sleuth_culprit = expand("<afile>:p")
   19   0.075488   0.000592     if s:guess(getline(1, 128))
    3              0.000003       return
   16              0.000013     endif
   16   0.036446   0.000359     if s:guess(getline(1, 1024))
                                  return
   16              0.000012     endif
   16   0.000373   0.000257     let pattern = polyglot#sleuth#GlobForFiletype(&filetype)
   16              0.000055     if len(pattern) == 0
   16              0.000018       return
                                endif
                                let pattern = '{' . pattern . ',.git,.svn,.hg}'
                                let dir = expand('%:p:h')
                                let level = 3
                                while isdirectory(dir) && dir !=# fnamemodify(dir, ':h') && level > 0
                                  " Ignore files from homedir and root 
                                  if dir == expand('~') || dir == '/'
                                    unlet b:sleuth_culprit
                                    return
                                  endif
                                  for neighbor in glob(dir . '/' . pattern, 0, 1)[0:level]
                                    let b:sleuth_culprit = neighbor
                                    " Do not consider directories above .git, .svn or .hg
                                    if fnamemodify(neighbor, ":h:t")[0] == "."
                                      let level = 0
                                      continue
                                    endif
                                    if neighbor !=# expand('%:p') && filereadable(neighbor)
                                      if s:guess(readfile(neighbor, '', 32))
                                        return
                                      endif
                                    endif
                                  endfor
                            
                                  let dir = fnamemodify(dir, ':h')
                                  let level -= 1
                                endwhile
                            
                                let b:sleuth_culprit = "default"

FUNCTION  186()
    Defined: ~\.vim\plugged\nerdtree\lib\nerdtree\creator.vim:37
Called 21 times
Total time:   0.000057
 Self time:   0.000057

count  total (s)   self (s)
   21              0.000039     return 'NERD_tree_'

FUNCTION  <SNR>10_get_shiftwidth()
    Defined: ~\.vim\plugged\vim-polyglot\autoload\polyglot\init.vim:2760
Called 35 times
Total time:   0.016258
 Self time:   0.016258

count  total (s)   self (s)
   35              0.000095     let shiftwidth = 0
   35              0.000071     let max_count = 0
   35              0.000092     let final_counts = {}
  210              0.000761     for [indent, indent_count] in items(a:indents)
  175              0.000740       let indent_count = indent_count * 1.5
 1050              0.003298       for [indent2, indent2_count] in items(a:indents)
  875              0.002888         if indent2 > indent && indent2 % indent == 0
  175              0.000528           let indent_count = indent_count + indent2_count
  875              0.000633         endif
 1050              0.000894       endfor
  175              0.000653       let final_counts[indent] = indent_count
  210              0.000195     endfor
  210              0.000665     for [indent, final_count] in items(final_counts)
  175              0.000357       if final_count > max_count
    6              0.000015         let shiftwidth = indent
    6              0.000014         let max_count = final_count
  175              0.000128       endif
  210              0.000182     endfor
   35              0.000076     return shiftwidth

FUNCTION  airline#extensions#apply_left_override()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions.vim:63
Called 7 times
Total time:   0.002296
 Self time:   0.000198

count  total (s)   self (s)
    7              0.000027   let w:airline_section_a = a:section1
    7              0.000022   let w:airline_section_b = a:section2
    7   0.002193   0.000095   let w:airline_section_c = airline#section#create(['readonly'])
    7              0.000021   let w:airline_render_left = 1
    7              0.000019   let w:airline_render_right = 0

FUNCTION  airline#util#getwinvar()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:82
Called 1622 times
Total time:   0.010098
 Self time:   0.010098

count  total (s)   self (s)
 1622              0.008963     return getwinvar(a:winnr, a:key, a:def)

FUNCTION  FugitiveDetect()
    Defined: ~\.vim\plugged\vim-fugitive\plugin\fugitive.vim:331
Called 1 time
Total time:   0.001113
 Self time:   0.000048

count  total (s)   self (s)
    1              0.000007   if v:version < 704
                                return ''
    1              0.000001   endif
    1              0.000005   if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir
                                unlet b:git_dir
    1              0.000001   endif
    1              0.000003   if !exists('b:git_dir')
    1   0.001080   0.000016     let b:git_dir = FugitiveExtractGitDir(a:path)
    1              0.000001   endif
    1              0.000005   if empty(b:git_dir) || !exists('#User#Fugitive')
    1              0.000001     return ''
                              endif
                              if v:version >= 704 || (v:version == 703 && has('patch442'))
                                doautocmd <nomodeline> User Fugitive
                              elseif &modelines > 0
                                let modelines = &modelines
                                try
                                  set modelines=0
                                  doautocmd User Fugitive
                                finally
                                  let &modelines = modelines
                                endtry
                              else
                                doautocmd User Fugitive
                              endif
                              return ''

FUNCTION  coc#highlight#ranges()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\highlight.vim:16
Called 4 times
Total time:   0.001914
 Self time:   0.001452

count  total (s)   self (s)
    4              0.000029   let bufnr = a:bufnr == 0 ? bufnr('%') : a:bufnr
    4              0.000032   if !bufloaded(bufnr) || !exists('*getbufline')
                                return
    4              0.000004   endif
    4              0.000071   let synmaxcol = min([getbufvar(a:bufnr, '&synmaxcol', 1000), 1000])
    4   0.000151   0.000070   let srcId = s:create_namespace(a:key)
    9              0.000032   for range in a:ranges
    5              0.000023     let start = range['start']
    5              0.000020     let end = range['end']
   10              0.000091     for lnum in range(start['line'] + 1, end['line'] + 1)
    5              0.000049       let arr = getbufline(bufnr, lnum)
    5              0.000041       let line = empty(arr) ? '' : arr[0]
    5              0.000032       if empty(line)
                                    continue
    5              0.000007       endif
    5              0.000043       if start['character'] > synmaxcol || end['character'] > synmaxcol
                                    continue
    5              0.000006       endif
                                  " TODO don't know how to count UTF16 code point, should work most cases.
    5              0.000090       let colStart = lnum == start['line'] + 1 ? strlen(strcharpart(line, 0, start['character'])) : 0
    5              0.000096       let colEnd = lnum == end['line'] + 1 ? strlen(strcharpart(line, 0, end['character'])) : -1
    5              0.000018       if colStart == colEnd
                                    continue
    5              0.000004       endif
    5   0.000505   0.000123       call coc#highlight#add_highlight(bufnr, srcId, a:hlGroup, lnum - 1, colStart, colEnd)
   10              0.000016     endfor
    9              0.000023   endfor

FUNCTION  airline#extensions#whitespace#check()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\whitespace.vim:64
Called 173 times
Total time:   0.087651
 Self time:   0.070250

count  total (s)   self (s)
  173              0.001882   let max_lines = get(g:, 'airline#extensions#whitespace#max_lines', 20000)
  173              0.002783   if &readonly || !&modifiable || !s:enabled || line('$') > max_lines || get(b:, 'airline_whitespace_disabled', 0)
                                return ''
  173              0.000201   endif
  173              0.016318   let skip_check_ft = extend(s:skip_check_ft, get(g:, 'airline#extensions#whitespace#skip_indent_check_ft', {}), 'force')
                            
  173              0.001544   if !exists('b:airline_whitespace_check')
    4              0.000021     let b:airline_whitespace_check = ''
    4              0.000048     let checks = get(b:, 'airline_whitespace_checks', get(g:, 'airline#extensions#whitespace#checks', s:default_checks))
                            
    4              0.000011     let trailing = 0
    4              0.000010     let check = 'trailing'
    4              0.000077     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
    4              0.000008       try
    4              0.000032         let regexp = get(g:, 'airline#extensions#whitespace#trailing_regexp', '\s$')
    4              0.001128         let trailing = search(regexp, 'nw')
                                  catch
                                    call airline#util#warning(printf('Whitespace: error occurred evaluating "%s"', regexp))
                                    echomsg v:exception
                                    return ''
    4              0.000008       endtry
    4              0.000005     endif
                            
    4              0.000014     let mixed = 0
    4              0.000012     let check = 'indent'
    4              0.000071     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
    4   0.002843   0.000111       let mixed = s:check_mixed_indent()
    4              0.000012     endif
                            
    4              0.000018     let mixed_file = ''
    4              0.000013     let check = 'mixed-indent-file'
    4              0.000084     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
    4   0.000549   0.000115       let mixed_file = s:check_mixed_indent_file()
    4              0.000005     endif
                            
    4              0.000011     let long = 0
    4              0.000024     if index(checks, 'long') > -1 && &tw > 0
                                  let long = search('\%>'.&tw.'v.\+', 'nw')
    4              0.000005     endif
                            
    4              0.000013     let conflicts = 0
    4              0.000021     if index(checks, 'conflicts') > -1
    4   0.000997   0.000088       let conflicts = s:conflict_marker()
    4              0.000007     endif
                            
    4              0.000043     if trailing != 0 || mixed != 0 || long != 0 || !empty(mixed_file) || conflicts != 0
                                  let b:airline_whitespace_check = s:symbol
                                  if strlen(s:symbol) > 0
                                    let space = (g:airline_symbols.space)
                                  else
                                    let space = ''
                                  endif
                            
                                  if s:show_message
                                    if trailing != 0
                                      let trailing_fmt = get(g:, 'airline#extensions#whitespace#trailing_format', '[%s]trailing')
                                      let b:airline_whitespace_check .= space.printf(trailing_fmt, trailing)
                                    endif
                                    if mixed != 0
                                      let mixed_indent_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_format', '[%s]mixed-indent')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_fmt, mixed)
                                    endif
                                    if long != 0
                                      let long_fmt = get(g:, 'airline#extensions#whitespace#long_format', '[%s]long')
                                      let b:airline_whitespace_check .= space.printf(long_fmt, long)
                                    endif
                                    if !empty(mixed_file)
                                      let mixed_indent_file_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_file_format', '[%s]mix-indent-file')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_file_fmt, mixed_file)
                                    endif
                                    if conflicts != 0
                                      let conflicts_fmt = get(g:, 'airline#extensions#whitespace#conflicts_format', '[%s]conflicts')
                                      let b:airline_whitespace_check .= space.printf(conflicts_fmt, conflicts)
                                    endif
                                  endif
    4              0.000005     endif
  173              0.000207   endif
  173   0.017006   0.003680   return airline#util#shorten(b:airline_whitespace_check, 120, 9)

FUNCTION  coc#_cancel()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc.vim:96
Called 1 time
Total time:   0.000177
 Self time:   0.000040

count  total (s)   self (s)
                              " hack for close pum
    1              0.000003   if pumvisible()
    1              0.000011     let g:coc#_context = {'start': 0, 'preselect': -1,'candidates': []}
    1              0.000010     call feedkeys("\<Plug>CocRefresh", 'i')
    1   0.000149   0.000012     call coc#rpc#notify('stopCompletion', [])
    1              0.000001   endif

FUNCTION  GetJSONIndent()
    Defined: ~\.vim\plugged\vim-polyglot\indent\json.vim:93
Called 1 time
Total time:   0.001134
 Self time:   0.000762

count  total (s)   self (s)
                              " 3.1. Setup {{{2
                              " ----------
                            
                              " Set up variables for restoring position in file.  Could use v:lnum here.
    1              0.000025   let vcol = col('.')
                            
                              " 3.2. Work on the current line {{{2
                              " -----------------------------
                            
                              " Get the current line.
    1              0.000012   let line = getline(v:lnum)
    1              0.000005   let ind = -1
                            
                              " If we got a closing bracket on an empty line, find its match and indent
                              " according to it.
    1              0.000099   let col = matchend(line, '^\s*[]}]')
                            
    1              0.000037   if col > 0 && !s:IsInString(v:lnum, col)
                                call cursor(v:lnum, col)
                                let bs = strpart('{}[]', stridx('}]', line[col - 1]) * 2, 2)
                            
                                let pairstart = escape(bs[0], '[')
                                let pairend = escape(bs[1], ']')
                                let pairline = searchpair(pairstart, '', pairend, 'bW')
                            
                                if pairline > 0 
                                  let ind = indent(pairline)
                                else
                                  let ind = virtcol('.') - 1
                                endif
                            
                                return ind
    1              0.000003   endif
                            
                              " If we are in a multi-line string, don't do anything to it.
    1   0.000154   0.000113   if s:IsInString(v:lnum, matchend(line, '^\s*') + 1)
                                return indent('.')
    1              0.000003   endif
                            
                              " 3.3. Work on the previous line. {{{2
                              " -------------------------------
                            
    1              0.000019   let lnum = prevnonblank(v:lnum - 1)
                            
    1              0.000007   if lnum == 0
                                return 0
    1              0.000002   endif
                            
                              " Set up variables for current line.
    1              0.000013   let line = getline(lnum)
    1              0.000012   let ind = indent(lnum)
                            
                              " If the previous line ended with a block opening, add a level of indent.
                              " if s:Match(lnum, s:block_regex)
                              "   if exists('*shiftwidth')
                              "     return indent(lnum) + shiftwidth()
                              "   else
                              "     return indent(lnum) + &sw
                              "   endif
                              " endif
                            
                              " If the previous line contained an opening bracket, and we are still in it,
                              " add indent depending on the bracket type.
    1              0.000041   if line =~ '[[({]'
    1   0.000410   0.000079     let counts = s:LineHasOpeningBrackets(lnum)
    1              0.000022     if counts[0] == '1' || counts[1] == '1' || counts[2] == '1'
    1              0.000017       if exists('*shiftwidth')
    1              0.000013         return ind + shiftwidth()
                                  else
                                    return ind + &sw
                                  endif
                                else
                                  call cursor(v:lnum, vcol)
                                end
                              endif
                            
                              " }}}2
                            
                              return ind

FUNCTION  airline#extensions#hunks#get_raw_hunks()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\hunks.vim:76
Called 173 times
Total time:   0.023379
 Self time:   0.019390

count  total (s)   self (s)
  173              0.002159   if !exists('b:source_func') || get(b:, 'source_func', '') is# 's:get_hunks_empty'
  173              0.001282     if get(g:, 'loaded_signify') && sy#buffer_is_active()
                                  let b:source_func = 's:get_hunks_signify'
  173              0.001316     elseif exists('*GitGutterGetHunkSummary')
                                  let b:source_func = 's:get_hunks_gitgutter'
  173              0.001030     elseif exists('*changes#GetStats')
                                  let b:source_func = 's:get_hunks_changes'
  173              0.001266     elseif exists('*quickfixsigns#vcsdiff#GetHunkSummary')
                                  let b:source_func = 'quickfixsigns#vcsdiff#GetHunkSummary'
  173   0.006717   0.003339     elseif s:coc_git_enabled()
                                  let b:source_func = 's:get_hunks_coc'
  173              0.000225     else
  173              0.000767       let b:source_func = 's:get_hunks_empty'
  173              0.000219     endif
  173              0.000208   endif
  173   0.004662   0.004052   return {b:source_func}()

FUNCTION  airline#async#nvim_vcs_untracked()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\async.vim:336
Called 7 times
Total time:   0.010263
 Self time:   0.009592

count  total (s)   self (s)
    7              0.000096   let cmd = a:cfg.cmd . shellescape(a:file)
    7              0.000021   let id = -1
    7   0.001591   0.000920   let config = { 'buf': '', 'vcs': a:vcs, 'cfg': a:cfg, 'file': a:file, 'cwd': s:valid_dir(fnamemodify(a:file, ':p:h')) }
    7              0.000259   if has("nvim")
    7              0.001227     call extend(config, { 'on_stdout': function('s:nvim_output_handler'), 'on_exit': function('s:nvim_untracked_job_handler')})
    7              0.000072     if has_key(s:untracked_jobs, config.file)
                                  " still running
    6              0.000014       return
    1              0.000001     endif
    1              0.000002     try
    1              0.006857     let id = jobstart(cmd, config)
                                catch
                                  " catch-all, jobstart() failed, fall back to system()
                                  let id=-1
    1              0.000004     endtry
    1              0.000014     let s:untracked_jobs[a:file] = id
    1              0.000002   endif
                              " vim without job feature or nvim jobstart failed
    1              0.000005   if id < 1
                                let output=system(cmd)
                                call s:untracked_output(config, output)
                                call airline#extensions#branch#update_untracked_config(a:file, a:vcs)
    1              0.000001   endif

FUNCTION  <SNR>27_CeilingDirectories()
    Defined: ~\.vim\plugged\vim-fugitive\plugin\fugitive.vim:257
Called 2 times
Total time:   0.000126
 Self time:   0.000126

count  total (s)   self (s)
    2              0.000010   if !exists('s:ceiling_directories')
    1              0.000003     let s:ceiling_directories = []
    1              0.000002     let resolve = 1
    2              0.000032     for dir in split($GIT_CEILING_DIRECTORIES, has('win32') ? ';' : ':', 1)
    1              0.000003       if empty(dir)
    1              0.000002         let resolve = 0
                                  elseif resolve
                                    call add(s:ceiling_directories, resolve(dir))
                                  else
                                    call add(s:ceiling_directories, dir)
    1              0.000001       endif
    2              0.000003     endfor
    2              0.000002   endif
    2              0.000013   return s:ceiling_directories + get(g:, 'ceiling_directories', [])

FUNCTION  airline#highlighter#add_accent()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:222
Called 7 times
Total time:   0.000037
 Self time:   0.000037

count  total (s)   self (s)
    7              0.000031   let s:accents[a:accent] = 1

FUNCTION  airline#update_statusline_inactive()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline.vim:156
Called 37 times
Total time:   1.159404
 Self time:   0.011660

count  total (s)   self (s)
   37   0.002504   0.000426   if airline#util#stl_disabled(winnr())
                                return
   37              0.000027   endif
  179              0.000424   for nr in a:range
  142   0.010554   0.001961     if airline#util#stl_disabled(nr)
                                  continue
  142              0.000141     endif
  142              0.000775     call setwinvar(nr, 'airline_active', 0)
  142              0.001236     let context = { 'winnr': nr, 'active': 0, 'bufnr': winbufnr(nr) }
  142              0.000566     if get(g:, 'airline_inactive_alt_sep', 0)
                                  call extend(context, { 'left_sep': g:airline_left_alt_sep, 'right_sep': g:airline_right_alt_sep }, 'keep')
  142              0.000115     endif
  142   1.140357   0.003283     call s:invoke_funcrefs(context, s:inactive_funcrefs)
  179              0.000286   endfor

FUNCTION  nerdtree#runningWindows()
    Defined: ~\.vim\plugged\nerdtree\autoload\nerdtree.vim:202
Called 34 times
Total time:   0.001792
 Self time:   0.001792

count  total (s)   self (s)
   34              0.001740     return has('win16') || has('win32') || has('win64')

FUNCTION  coc#float#nvim_win_enter()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:1097
Called 4 times
Total time:   0.000079
 Self time:   0.000079

count  total (s)   self (s)
    4              0.000024   let kind = getwinvar(a:winid, 'kind', '')
    4              0.000015   if kind == 'buttons' || kind == 'close'
                                if empty(maparg('<LeftRelease>', 'n'))
                                  nnoremap <buffer><silent> <LeftRelease> :call coc#float#nvim_float_click()<CR>
                                endif
    4              0.000003   endif

FUNCTION  <SNR>130_IsInString()
    Defined: ~\.vim\plugged\vim-polyglot\indent\json.vim:48
Called 1 time
Total time:   0.000041
 Self time:   0.000041

count  total (s)   self (s)
    1              0.000035   return synIDattr(synID(a:lnum, a:col, 1), 'name') == "jsonString"

FUNCTION  airline#async#vcs_untracked()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\async.vim:57
Called 7 times
Total time:   0.010804
 Self time:   0.000541

count  total (s)   self (s)
    7              0.000031   if g:airline#init#vim_async
                                " Vim 8 with async support
                                noa call airline#async#vim_vcs_untracked(a:config, a:file)
    7              0.000011   else
                                " nvim async or vim without job-feature
    7   0.010581   0.000318     noa call airline#async#nvim_vcs_untracked(a:config, a:file, a:vcs)
    7              0.000012   endif

FUNCTION  <SNR>79_exec_separator()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:186
Called 1361 times
Total time:   1.798843
 Self time:   0.108642

count  total (s)   self (s)
 1361              0.003672   if pumvisible()
                                return
 1361              0.001085   endif
 1361              0.008078   let group = a:from.'_to_'.a:to.a:suffix
 1361   0.545339   0.020076   let l:from = airline#themes#get_highlight(a:from.a:suffix)
 1361   0.484591   0.020297   let l:to = airline#themes#get_highlight(a:to.a:suffix)
 1361              0.002253   if a:inverse
  193              0.001407     let colors = [ l:from[1], l:to[1], l:from[3], l:to[3] ]
 1168              0.000997   else
 1168              0.008668     let colors = [ l:to[1], l:from[1], l:to[3], l:from[3] ]
 1361              0.001080   endif
 1361              0.006647   let a:dict[group] = colors
 1361   0.721916   0.021271   call airline#highlighter#exec(group, colors)

FUNCTION  <SNR>86_conflict_marker()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\whitespace.vim:52
Called 4 times
Total time:   0.000909
 Self time:   0.000909

count  total (s)   self (s)
                              " Checks for git conflict markers
    4              0.000017   let annotation = '\%([0-9A-Za-z_.:]\+\)\?'
    4              0.000028   if &ft is# 'rst'
                                " rst filetypes use '=======' as header
                                let pattern = '^\%(\%(<\{7} '.annotation. '\)\|\%(>\{7\} '.annotation.'\)\)$'
    4              0.000005   else
    4              0.000044     let pattern = '^\%(\%(<\{7} '.annotation. '\)\|\%(=\{7\}\)\|\%(>\{7\} '.annotation.'\)\)$'
    4              0.000005   endif
    4              0.000763   return search(pattern, 'nw')

FUNCTION  airline#extensions#term#inactive_apply()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\term.vim:26
Called 142 times
Total time:   0.004911
 Self time:   0.004911

count  total (s)   self (s)
  142              0.000923   if getbufvar(a:2.bufnr, '&buftype') ==? 'terminal'
                                call a:1.add_section_spaced('airline_a', s:section_a)
                                call a:1.add_section_spaced('airline_b', s:neoterm_id(a:2.bufnr))
                                call a:1.add_section('airline_term', s:spc.s:termname(a:2.bufnr))
                                call a:1.split()
                                call a:1.add_section('airline_y', '')
                                call a:1.add_section_spaced('airline_z', s:section_z)
                                return 1
  142              0.000119   endif

FUNCTION  airline#async#vcs_clean()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\async.vim:95
Called 7 times
Total time:   0.010607
 Self time:   0.000975

count  total (s)   self (s)
    7              0.000033   if g:airline#init#vim_async
                                " Vim 8 with async support
                                noa call airline#async#vim_vcs_clean(a:cmd, a:file, a:vcs)
    7              0.000317   elseif has("nvim")
                                " nvim async
    7   0.009941   0.000308     noa call airline#async#nvim_vcs_clean(a:cmd, a:file, a:vcs)
                              else
                                " Vim pre 8 using system()
                                call airline#async#vim7_vcs_clean(a:cmd, a:file, a:vcs)
    7              0.000013   endif

FUNCTION  coc#float#get_float_win_list()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:587
Called 39 times
Total time:   0.009025
 Self time:   0.009025

count  total (s)   self (s)
   39              0.000154   let res = []
   39              0.000307   let all = get(a:, 1, 0)
   39              0.000213   if s:is_vim && exists('*popup_list')
                                return filter(popup_list(), 'popup_getpos(v:val)["visible"]'.(all ? '' : '&& getwinvar(v:val, "float", 0)'))
   39              0.001773   elseif has('nvim') && exists('*nvim_win_get_config')
   39              0.000149     let res = []
  130              0.000651     for i in range(1, winnr('$'))
   91              0.000468       let id = win_getid(i)
   91              0.001407       let config = nvim_win_get_config(id)
   91              0.000733       if empty(config) || empty(config['relative'])
   39              0.000108         continue
   52              0.000059       endif
                                  " ignore border & button window & others
   52              0.000236       if !all && !getwinvar(id, 'float', 0)
    1              0.000002         continue
   51              0.000050       endif
   51              0.000258       call add(res, id)
   90              0.000197     endfor
   39              0.000111     return res
                              endif
                              return []

FUNCTION  coc#float#close()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:559
Called 2 times
Total time:   0.003118
 Self time:   0.000073

count  total (s)   self (s)
    2   0.001215   0.000035   call coc#float#close_related(a:winid)
    2   0.001897   0.000032   call s:close_win(a:winid)
    2              0.000002   return 1

FUNCTION  FugitiveHead()
    Defined: ~\.vim\plugged\vim-fugitive\plugin\fugitive.vim:187
Called 173 times
Total time:   0.029064
 Self time:   0.004970

count  total (s)   self (s)
  173   0.027581   0.003487   let dir = FugitiveGitDir(a:0 > 1 ? a:2 : -1)
  173              0.000735   if empty(dir)
  173              0.000337     return ''
                              endif
                              return fugitive#Head(a:0 ? a:1 : 0, dir)

FUNCTION  <SNR>92_section_is_empty()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\builder.vim:182
Called 970 times
Total time:   0.012239
 Self time:   0.012239

count  total (s)   self (s)
  970              0.002145   let start=1
                            
                              " do not check for inactive windows or the tabline
  970              0.002413   if a:self._context.active == 0
  691              0.000920     return 0
  279              0.001141   elseif get(a:self._context, 'tabline', 0)
                                return 0
  279              0.000205   endif
                            
                              " only check, if airline#skip_empty_sections == 1
  279              0.001153   if get(g:, 'airline_skip_empty_sections', 0) == 0
  279              0.000338     return 0
                              endif
                            
                              " only check, if airline#skip_empty_sections == 1
                              if get(w:, 'airline_skip_empty_sections', -1) == 0
                                return 0
                              endif
                              " assume accents sections to be never empty
                              " (avoides, that on startup the mode message becomes empty)
                              if match(a:content, '%#__accent_[^#]*#.*__restore__#') > -1
                                return 0
                              endif
                              if empty(a:content)
                                return 1
                              endif
                              let list=matchlist(a:content, '%{\zs.\{-}\ze}', 1, start)
                              if empty(list)
                                return 0 " no function in statusline text
                              endif
                              while len(list) > 0
                                let expr = list[0]
                                try
                                  " catch all exceptions, just in case
                                  if !empty(eval(expr))
                                    return 0
                                  endif
                                catch
                                  return 0
                                endtry
                                let start += 1
                                let list=matchlist(a:content, '%{\zs.\{-}\ze}', 1, start)
                              endw
                              return 1

FUNCTION  airline#highlighter#highlight()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:240
Called 16 times
Total time:   1.504665
 Self time:   0.135459

count  total (s)   self (s)
   16              0.000140   let bufnr = a:0 ? a:1 : ''
   16              0.000166   let p = g:airline#themes#{g:airline_theme}#palette
                            
                              " draw the base mode, followed by any overrides
   16              0.000483   let mapped = map(a:modes, 'v:val == a:modes[0] ? v:val : a:modes[0]."_".v:val')
   16              0.000111   let suffix = a:modes[0] == 'inactive' ? '_inactive' : ''
   16              0.000077   let airline_grouplist = []
   16              0.000269   let buffers_in_tabpage = sort(tabpagebuflist())
   16              0.000107   if exists("*uniq")
   16              0.000131     let buffers_in_tabpage = uniq(buffers_in_tabpage)
   16              0.000021   endif
                              " mapped might be something like ['normal', 'normal_modified']
                              " if a group is in both modes available, only define the second
                              " that is how this was done previously overwrite the previous definition
   47              0.000188   for mode in reverse(mapped)
   31              0.000405     if exists('g:airline#themes#{g:airline_theme}#palette[mode]')
   27              0.000238       let dict = g:airline#themes#{g:airline_theme}#palette[mode]
  827              0.003109       for kvp in items(dict)
  800              0.002869         let mode_colors = kvp[1]
  800              0.002451         let name = kvp[0]
  800              0.004744         if name is# 'airline_c' && !empty(bufnr) && suffix is# '_inactive'
    3              0.000010           let name = 'airline_c'.bufnr
  800              0.000838         endif
                                    " do not re-create highlighting for buffers that are no longer visible
                                    " in the current tabpage
  800              0.009330         if name =~# 'airline_c\d\+'
  447              0.006359           let bnr = matchstr(name, 'airline_c\zs\d\+') + 0
  447              0.002787           if bnr > 0 && index(buffers_in_tabpage, bnr) == -1
  439              0.000646             continue
    8              0.000008           endif
  353              0.004289         elseif (name =~# '_to_') || (name[0:10] is# 'airline_tab' && !empty(suffix))
                                      " group will be redefined below at exec_separator
                                      " or is not needed for tabline with '_inactive' suffix
                                      " since active flag is 1 for builder)
  168              0.000255           continue
  193              0.000183         endif
  193   0.007040   0.003598         if s:group_not_done(airline_grouplist, name.suffix)
  149   0.105353   0.002983           call airline#highlighter#exec(name.suffix, mode_colors)
  193              0.000215         endif
                            
  193              0.000982         if !has_key(p, 'accents') 
                                      " work around a broken installation
                                      " shouldn't actually happen, p should always contain accents
                                      continue
  193              0.000232         endif
                            
  579              0.002262         for accent in keys(s:accents)
  386              0.002088           if !has_key(p.accents, accent)
                                        continue
  386              0.000393           endif
  386              0.002932           let colors = copy(mode_colors)
  386              0.002041           if p.accents[accent][0] != ''
  193              0.001145             let colors[0] = p.accents[accent][0]
  386              0.000411           endif
  386              0.001699           if p.accents[accent][2] != ''
  193              0.000924             let colors[2] = p.accents[accent][2]
  386              0.000355           endif
  386              0.001359           if len(colors) >= 5
  386              0.002748             let colors[4] = get(p.accents[accent], 4, '')
                                      else
                                        call add(colors, get(p.accents[accent], 4, ''))
  386              0.000377           endif
  386   0.014190   0.007730           if s:group_not_done(airline_grouplist, name.suffix.'_'.accent)
  298   0.210054   0.006436             call airline#highlighter#exec(name.suffix.'_'.accent, colors)
  386              0.000445           endif
  579              0.000796         endfor
  220              0.000273       endfor
                            
   27              0.000138       if empty(s:separators)
                                    " nothing to be done
                                    continue
   27              0.000028       endif
                                  " TODO: optimize this
  776              0.002860       for sep in items(s:separators)
                                    " we cannot check, that the group already exists, else the separators
                                    " might not be correctly defined. But perhaps we can skip above groups
                                    " that match the '_to_' name, because they would be redefined here...
  749   1.068940   0.015624         call <sid>exec_separator(dict, sep[1][0], sep[1][1], sep[1][2], suffix)
  776              0.000998       endfor
   31              0.000028     endif
   47              0.000120   endfor

FUNCTION  <SNR>79_GetHiCmd()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:161
Called 469 times
Total time:   0.092690
 Self time:   0.092690

count  total (s)   self (s)
                              " a:list needs to have 5 items!
  469              0.001034   let res = ''
  469              0.001004   let i = -1
 2814              0.004968   while i < 4
 2345              0.004816     let i += 1
 2345              0.011186     let item = get(a:list, i, '')
 2345              0.005864     if item is ''
  506              0.000696       continue
 1839              0.001561     endif
 1839              0.002887     if i == 0
  469              0.002225       let res .= ' guifg='.item
 1370              0.002094     elseif i == 1
  425              0.001732       let res .= ' guibg='.item
  945              0.001336     elseif i == 2
  469              0.002076       let res .= ' ctermfg='.item
  476              0.000634     elseif i == 3
  425              0.001685       let res .= ' ctermbg='.item
   51              0.000077     elseif i == 4
   51              0.000505       let res .= printf(' gui=%s cterm=%s term=%s', item, item, item)
 1839              0.001587     endif
 2308              0.003219   endwhile
  469              0.001096   return res

FUNCTION  coc#rpc#ready()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\rpc.vim:32
Called 254 times
Total time:   0.004439
 Self time:   0.004439

count  total (s)   self (s)
  254              0.002412   if empty(s:client) || s:client['running'] == 0
                                return 0
  254              0.000291   endif
  254              0.000510   return 1

FUNCTION  <SNR>78_create()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\section.vim:17
Called 7 times
Total time:   0.001990
 Self time:   0.001728

count  total (s)   self (s)
    7              0.000016   let _ = ''
   14              0.000056   for idx in range(len(a:parts))
    7   0.000125   0.000083     let part = airline#parts#get(a:parts[idx])
    7              0.000013     let val = ''
    7              0.000032     let add_sep = get(l:, 'add_sep', 0)
                            
    7              0.000031     if exists('part.function')
    7              0.000027       let func = (part.function).'()'
                                elseif exists('part.text')
                                  let func = '"'.(part.text).'"'
                                else
                                  if a:append > 0 && idx != 0
                                    let val .= s:spc.g:airline_left_alt_sep.s:spc
                                  endif
                                  if a:append < 0 && idx != 0
                                    let t = ''
                                    if !add_sep
                                      let t = s:spc.g:airline_right_alt_sep.s:spc
                                    endif
                                    let val = t.val
                                  endif
                                  if exists('part.raw')
                                    let _ .= s:wrap_accent(part, val.(part.raw))
                                    continue
                                  else
                                    let _ .= s:wrap_accent(part, val.a:parts[idx])
                                    continue
                                  endif
    7              0.000006     endif
                            
    7              0.000035     let minwidth = get(part, 'minwidth', 0)
                            
    7              0.000018     if a:append > 0 && idx != 0
                                  let partval = printf('%%{airline#util#append(%s,%s)}', func, minwidth)
                                  " will add an extra separator, if minwidth is zero
                                  let add_sep = (minwidth == 0)
    7              0.000028     elseif a:append < 0 && idx != len(a:parts) - 1
                                  let partval = printf('%%{airline#util#prepend(%s,%s)}', func, minwidth)
                                  " will add an extra separator, if minwidth is zero
                                  let add_sep = (minwidth == 0)
    7              0.000006     else
    7              0.000055       let partval = printf('%%{airline#util#wrap(%s,%s)}', func, minwidth)
    7              0.000013       let add_sep = 0
    7              0.000007     endif
                            
    7              0.000025     if exists('part.condition')
                                  let partval = substitute(partval, '{', '\="{".(part.condition)." ? "', '')
                                  let partval = substitute(partval, '}', ' : ""}', '')
    7              0.000006     endif
                            
    7   0.000317   0.000098     let val .= s:wrap_accent(part, partval)
    7              0.000023     let _ .= val
   14              0.000035   endfor
    7              0.000016   return _

FUNCTION  airline#parts#ffenc()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\parts.vim:108
Called 175 times
Total time:   0.012381
 Self time:   0.012381

count  total (s)   self (s)
  175              0.001785   let expected = get(g:, 'airline#parts#ffenc#skip_expected_string', '')
  175              0.000944   let bomb     = &bomb ? '[BOM]' : ''
  175              0.001481   let noeolf   = &eol ? '' : '[!EOL]'
  175              0.002755   let ff       = strlen(&ff) ? '['.&ff.']' : ''
  175              0.002252   if expected is# &fenc.bomb.noeolf.ff
                                return ''
  175              0.000223   else
  175              0.001699     return &fenc.bomb.noeolf.ff
                              endif

FUNCTION  <SNR>132_nvim_output_handler()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\async.vim:232
Called 4 times
Total time:   0.000213
 Self time:   0.000213

count  total (s)   self (s)
    4              0.000083     if a:event == 'stdout' || a:event == 'stderr'
    4              0.000093       let self.buf .=  join(a:data)
    4              0.000011     endif

FUNCTION  coc#float#close_auto_hide_wins()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:730
Called 3 times
Total time:   0.000736
 Self time:   0.000173

count  total (s)   self (s)
    3   0.000630   0.000067   let winids = coc#float#get_float_win_list()
    3              0.000020   let except = get(a:, 1, 0)
    4              0.000015   for id in winids
    1              0.000006     if except && id == except
    1              0.000002       continue
                                endif
                                if getwinvar(id, 'autohide', 0)
                                  call coc#float#close(id)
                                endif
    3              0.000006   endfor

FUNCTION  airline#util#ignore_buf()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:136
Called 175 times
Total time:   0.012926
 Self time:   0.012926

count  total (s)   self (s)
  175              0.003241   let pat = '\c\v'. get(g:, 'airline#ignore_bufadd_pat', ''). get(g:, 'airline#extensions#tabline#ignore_bufadd_pat',  '!|defx|gundo|nerd_tree|startify|tagbar|term://|undotree|vimfiler')
  175              0.009206   return match(a:name, pat) > -1

FUNCTION  <SNR>92_get_seperator()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\builder.vim:155
Called 454 times
Total time:   0.897588
 Self time:   0.015126

count  total (s)   self (s)
  454   0.307632   0.006755   if airline#builder#should_change_group(a:prev_group, a:group)
  454   0.589330   0.007745     return s:get_transitioned_seperator(a:self, a:prev_group, a:group, a:side)
                              else
                                return a:side ? a:self._context.left_alt_sep : a:self._context.right_alt_sep
                              endif

FUNCTION  airline#builder#get_prev_group()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\builder.vim:37
Called 970 times
Total time:   0.019178
 Self time:   0.019178

count  total (s)   self (s)
  970              0.002681   let x = a:i - 1
 1128              0.002620   while x >= 0
  949              0.003611     let group = a:sections[x][0]
  949              0.003400     if group != '' && group != '|'
  791              0.001494       return group
  158              0.000138     endif
  158              0.000281     let x = x - 1
  337              0.000470   endwhile
  179              0.000248   return ''

FUNCTION  airline#update_tabline()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline.vim:273
Called 64 times
Total time:   0.001196
 Self time:   0.001196

count  total (s)   self (s)
   64              0.000597   if get(g:, 'airline_statusline_ontop', 0)
                                call airline#extensions#tabline#redraw()
   64              0.000083   endif

FUNCTION  CocActionAsync()
    Defined: ~\.vim\plugged\coc.nvim\plugin\coc.vim:83
Called 19 times
Total time:   0.007979
 Self time:   0.000811

count  total (s)   self (s)
   19   0.007910   0.000742   return s:AsyncRequest(a:name, a:000)

FUNCTION  airline#parts#get()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\parts.vim:49
Called 353 times
Total time:   0.003633
 Self time:   0.003633

count  total (s)   self (s)
  353              0.003227   return get(s:parts, a:key, {})

FUNCTION  airline#parts#paste()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\parts.vim:63
Called 173 times
Total time:   0.001553
 Self time:   0.001553

count  total (s)   self (s)
  173              0.001293   return g:airline_detect_paste && &paste ? g:airline_symbols.paste : ''

FUNCTION  coc#util#check_refresh()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\util.vim:62
Called 4 times
Total time:   0.000246
 Self time:   0.000246

count  total (s)   self (s)
    4              0.000071   if !bufloaded(a:bufnr)
                                return 0
    4              0.000009   endif
    4              0.000038   if getbufvar(a:bufnr, 'coc_diagnostic_disable', 0)
                                return 0
    4              0.000005   endif
    4              0.000029   if get(g: , 'EasyMotion_loaded', 0)
                                return EasyMotion#is_active() != 1
    4              0.000004   endif
    4              0.000010   return 1

FUNCTION  <SNR>27_Slash()
    Defined: ~\.vim\plugged\vim-fugitive\plugin\fugitive.vim:373
Called 1 time
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    1              0.000006     return tr(a:path, '\', '/')

FUNCTION  airline#update_statusline()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline.vim:127
Called 37 times
Total time:   1.703312
 Self time:   0.004532

count  total (s)   self (s)
   37   0.002876   0.000454   if airline#util#stl_disabled(winnr())
                                return
   37              0.000028   endif
   37              0.000707   let range = filter(range(1, winnr('$')), 'v:val != winnr()')
                              " create inactive statusline
   37   1.159936   0.000532   call airline#update_statusline_inactive(range)
                            
   37              0.000156   unlet! w:airline_render_left w:airline_render_right
   37              0.000879   exe 'unlet! ' 'w:airline_section_'. join(s:sections, ' w:airline_section_')
                            
                              " Now create the active statusline
   37              0.000103   let w:airline_active = 1
   37              0.000382   let context = { 'winnr': winnr(), 'active': 1, 'bufnr': winbufnr(winnr()) }
   37   0.537919   0.000965   call s:invoke_funcrefs(context, g:airline_statusline_funcrefs)

FUNCTION  UltiSnips#TrackChange()
    Defined: ~\.vim\plugged\ultisnips\autoload\UltiSnips.vim:166
Called 20 times
Total time:   0.270424
 Self time:   0.270424

count  total (s)   self (s)
   20              0.270377     py3 UltiSnips_Manager._track_change()

FUNCTION  <SNR>93_add_section()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\default.vim:47
Called 712 times
Total time:   0.095072
 Self time:   0.036726

count  total (s)   self (s)
  712              0.005660     let condition = (a:key is# "warning" || a:key is# "error") && (v:version == 704 && !has("patch1511"))
                                " i have no idea why the warning section needs special treatment, but it's
                                " needed to prevent separators from showing up
  712   0.009785   0.006065     if ((a:key == 'error' || a:key == 'warning') && empty(s:get_section(a:context.winnr, a:key)))
   44              0.000044       return
  668              0.000474     endif
  668              0.000929     if condition
                                  call a:builder.add_raw('%(')
  668              0.000471     endif
  668   0.068509   0.013882     call a:builder.add_section('airline_'.a:key, s:get_section(a:context.winnr, a:key))
  668              0.000988     if condition
                                  call a:builder.add_raw('%)')
  668              0.000499     endif

FUNCTION  coc#float#cursor_relative()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:1352
Called 3 times
Total time:   0.000376
 Self time:   0.000216

count  total (s)   self (s)
    3   0.000140   0.000033   if !coc#float#valid(a:winid)
                                return v:null
    3              0.000002   endif
    3              0.000012   let winid = win_getid()
    3              0.000006   if winid == a:winid
                                return v:null
    3              0.000002   endif
    3   0.000090   0.000037   let [cursorLine, cursorCol] = coc#util#cursor_pos()
    3              0.000064   if has('nvim')
    3              0.000021     let [row, col] = nvim_win_get_position(a:winid)
    3              0.000018     return {'row' : row - cursorLine, 'col' : col - cursorCol}
                              endif
                              let pos = popup_getpos(a:winid)
                              return {'row' : pos['line'] - cursorLine - 1, 'col' : pos['col'] - cursorCol - 1}

FUNCTION  airline#parts#readonly()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\parts.vim:89
Called 192 times
Total time:   0.022186
 Self time:   0.009260

count  total (s)   self (s)
                              " only consider regular buffers (e.g. ones that represent actual files,
                              " but not special ones like e.g. NERDTree)
  192   0.017536   0.004610   if !empty(&buftype) || airline#util#ignore_buf(bufname('%'))
   17              0.000037     return ''
  175              0.000257   endif
  175              0.001209   if &readonly && !filereadable(bufname('%'))
                                return '[noperm]'
  175              0.000219   else
  175              0.000798     return &readonly ? g:airline_symbols.readonly : ''
                              endif

FUNCTION  <SNR>81_get_hunks_empty()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\hunks.vim:72
Called 173 times
Total time:   0.000611
 Self time:   0.000611

count  total (s)   self (s)
  173              0.000394   return ''

FUNCTION  nerdtree#has_opt()
    Defined: ~\.vim\plugged\nerdtree\autoload\nerdtree.vim:170
Called 17 times
Total time:   0.000177
 Self time:   0.000177

count  total (s)   self (s)
   17              0.000155     return has_key(a:options, a:name) && a:options[a:name] ==# 1

FUNCTION  airline#builder#should_change_group()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\builder.vim:130
Called 454 times
Total time:   0.300877
 Self time:   0.020071

count  total (s)   self (s)
  454              0.001383   if a:group1 == a:group2
                                return 0
  454              0.000350   endif
  454   0.149401   0.006749   let color1 = airline#highlighter#get_highlight(a:group1)
  454   0.144966   0.006812   let color2 = airline#highlighter#get_highlight(a:group2)
  454              0.003174   return color1[1] != color2[1] || color1[0] != color2[0] ||  color1[2] != color2[2] || color1[3] != color2[3]

FUNCTION  <SNR>81_coc_git_enabled()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\hunks.vim:18
Called 173 times
Total time:   0.003378
 Self time:   0.003378

count  total (s)   self (s)
  173              0.002056   if !exists("*CocAction") || !get(g:, 'airline#extensions#hunks#coc_git', 0)
                                 " coc-git extension is disabled by default
                                 " unless specifically being enabled by the user
                                 " (as requested from coc maintainer)
  173              0.000352     return 0
                              endif
                              return 1

FUNCTION  <SNR>132_on_exit_clean()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\async.vim:87
Called 1 time
Total time:   0.000273
 Self time:   0.000093

count  total (s)   self (s)
    1              0.000014   let buf=self.buf
    1   0.000229   0.000048   call s:set_clean_variables(self.file, self.vcs, !empty(buf))
    1              0.000014   if has_key(get(s:clean_jobs, self.vcs, {}), self.file)
    1              0.000011     call remove(s:clean_jobs[self.vcs], self.file)
    1              0.000001   endif

FUNCTION  coc#highlight#add_highlights()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\highlight.vim:80
Called 3 times
Total time:   0.019167
 Self time:   0.016098

count  total (s)   self (s)
                              " clear highlights
    3   0.017049   0.015776   call coc#compat#execute(a:winid, 'syntax clear')
    3              0.000026   let bufnr = winbufnr(a:winid)
    3   0.000564   0.000104   call coc#highlight#clear_highlight(bufnr, -1, 0, -1)
    3              0.000014   if !empty(a:codes)
    3   0.001430   0.000094     call coc#highlight#highlight_lines(a:winid, a:codes)
    3              0.000003   endif
    3              0.000015   if !empty(a:highlights)
                                for item in a:highlights
                                  call coc#highlight#add_highlight(bufnr, -1, item['hlGroup'], item['lnum'], item['colStart'], item['colEnd'])
                                endfor
    3              0.000003   endif

FUNCTION  <SNR>10_Observe()
    Defined: ~\.vim\plugged\vim-polyglot\autoload\polyglot\init.vim:2693
Called 17 times
Total time:   0.003500
 Self time:   0.003500

count  total (s)   self (s)
   17              0.000170   let b:PolyglotObserve = function("polyglot#" . a:fn)
   17              0.000049   augroup polyglot-observer
   17              0.002761     au!
   17              0.000437     au CursorHold,CursorHoldI <buffer> if (&ft == "" || &ft == "conf") | call b:PolyglotObserve() | endif
   17              0.000035   augroup END

FUNCTION  nerdtree#exec()
    Defined: ~\.vim\plugged\nerdtree\autoload\nerdtree.vim:157
Called 14 times
Total time:   0.000472
 Self time:   0.000472

count  total (s)   self (s)
   14              0.000053     let old_ei = &eventignore
   14              0.000027     if a:ignoreAll
   14              0.000091         set eventignore=all
   14              0.000012     endif
   14              0.000013     try
   14              0.000119         exec a:cmd
   14              0.000021     finally
   14              0.000072         let &eventignore = old_ei
   14              0.000017     endtry

FUNCTION  airline#extensions#append_to_section()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions.vim:53
Called 37 times
Total time:   0.001524
 Self time:   0.000844

count  total (s)   self (s)
   37   0.001208   0.000528   call <sid>check_defined_section(a:name)
   37              0.000266   let w:airline_section_{a:name} .= a:value

FUNCTION  <SNR>130_LineHasOpeningBrackets()
    Defined: ~\.vim\plugged\vim-polyglot\indent\json.vim:67
Called 1 time
Total time:   0.000331
 Self time:   0.000331

count  total (s)   self (s)
    1              0.000022   let open_0 = 0
    1              0.000007   let open_2 = 0
    1              0.000006   let open_4 = 0
    1              0.000015   let line = getline(a:lnum)
    1              0.000046   let pos = match(line, '[][(){}]', 0)
    2              0.000019   while pos != -1
    1              0.000019     let idx = stridx('(){}[]', line[pos])
    1              0.000008     if idx % 2 == 0
    1              0.000025       let open_{idx} = open_{idx} + 1
                                else
                                  let open_{idx - 1} = open_{idx - 1} - 1
    1              0.000003     endif
    1              0.000045     let pos = match(line, '[][(){}]', pos + 1)
    2              0.000012   endwhile
    1              0.000025   return (open_0 > 0) . (open_2 > 0) . (open_4 > 0)

FUNCTION  coc#highlight#highlight_lines()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\highlight.vim:106
Called 3 times
Total time:   0.001336
 Self time:   0.001071

count  total (s)   self (s)
    3              0.000019   let currwin = win_getid()
    3              0.000100   let switch = has('nvim') && currwin != a:winid
    3              0.000006   if switch
    3              0.000077     noa call nvim_set_current_win(a:winid)
    3              0.000004   endif
    3              0.000010   let defined = []
    3              0.000012   let region_id = 1
    6              0.000024   for config in a:blocks
    3              0.000019     let start = config['startLine'] + 1
    3              0.000043     let end = config['endLine'] == -1 ? len(getbufline(winbufnr(a:winid), 1, '$')) + 1 : config['endLine'] + 1
    3              0.000022     let filetype = get(config, 'filetype', '')
    3              0.000019     let hlGroup = get(config, 'hlGroup', '')
    3              0.000013     if !empty(hlGroup)
    3   0.000363   0.000098       call s:execute(a:winid, 'syntax region '.hlGroup.' start=/\%'.start.'l/ end=/\%'.end.'l/')
                                else
                                  let filetype = matchstr(filetype, '\v^\w+')
                                  if empty(filetype) || filetype == 'txt' || index(get(g:, 'coc_markdown_disabled_languages', []), filetype) != -1
                                    continue
                                  endif
                                  if index(defined, filetype) == -1
                                    call s:execute(a:winid, 'syntax include @'.toupper(filetype).' syntax/'.filetype.'.vim')
                                    if has('nvim')
                                      unlet! b:current_syntax
                                    elseif exists('*win_execute')
                                      call win_execute(a:winid, 'unlet! b:current_syntax')
                                    endif
                                    call add(defined, filetype)
                                  endif
                                  call s:execute(a:winid, 'syntax region CodeBlock'.region_id.' start=/\%'.start.'l/ end=/\%'.end.'l/ contains=@'.toupper(filetype))
                                  let region_id = region_id + 1
    3              0.000003     endif
    6              0.000018   endfor
    3              0.000007   if switch
    3              0.000077     noa call nvim_set_current_win(currwin)
    3              0.000004   endif

FUNCTION  <SNR>133_buffer_type()
    Defined: ~\.vim\plugged\vim-fugitive\autoload\fugitive.vim:1640
Called 1 time
Total time:   0.000005
 Self time:   0.000005

count  total (s)   self (s)
    1              0.000003   return 'see b:fugitive_type'

FUNCTION  coc#float#close_related()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:767
Called 17 times
Total time:   0.006963
 Self time:   0.002699

count  total (s)   self (s)
   17              0.000174   let timer = getwinvar(a:winid, 'timer', 0)
   17              0.000042   if timer
                                call timer_stop(timer)
   17              0.000022   endif
   17              0.000123   let kind = get(a:, 1, '')
   17   0.004971   0.000707   let winids = filter(coc#float#get_float_win_list(1), 'getwinvar(v:val, "target_winid", 0) == '.a:winid)
   22              0.000072   for id in winids
    5              0.000013     if s:is_vim
                                  " vim doesn't throw
                                  call popup_close(id)
    5              0.000034     elseif nvim_win_is_valid(id)
    5              0.000051       if empty(kind) || getwinvar(id, 'kind', '') ==# kind
    2              0.000614         noa call nvim_win_close(id, 1)
    5              0.000007       endif
    5              0.000007     endif
   22              0.000043   endfor

FUNCTION  coc#helper#min()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\helper.vim:71
Called 18 times
Total time:   0.000662
 Self time:   0.000662

count  total (s)   self (s)
   18              0.000062   let val = a:first
   39              0.000192   for i in range(0, len(a:000) - 1)
   21              0.000076     if a:000[i] < val
    8              0.000028       let val = a:000[i]
   21              0.000024     endif
   39              0.000058   endfor
   18              0.000034   return val

FUNCTION  airline#highlighter#exec()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:105
Called 1824 times
Total time:   1.021327
 Self time:   0.214255

count  total (s)   self (s)
 1824              0.004910   if pumvisible()
                                return
 1824              0.001502   endif
 1824              0.005019   let colors = a:colors
 1824              0.003544   if s:is_win32term
                                let colors[2] = s:gui2cui(get(colors, 0, ''), get(colors, 2, ''))
                                let colors[3] = s:gui2cui(get(colors, 1, ''), get(colors, 3, ''))
 1824              0.001479   endif
 1824   0.631036   0.030135   let old_hi = airline#highlighter#get_highlight(a:group)
 1824              0.006396   if len(colors) == 4
 1364              0.005664     call add(colors, '')
 1824              0.001488   endif
 1824              0.024652   let new_hi = [colors[0], colors[1], printf('%s', colors[2]), printf('%s', colors[3]), colors[4]]
 1824   0.103825   0.024438   let colors = s:CheckDefined(colors)
 1824   0.057187   0.023092   if old_hi != new_hi || !s:hl_group_exists(a:group)
  469   0.100885   0.008194     let cmd = printf('hi %s%s', a:group, s:GetHiCmd(colors))
  469              0.009442     exe cmd
  469              0.002682     if has_key(s:hl_groups, a:group)
  469              0.002278       let s:hl_groups[a:group] = colors
  469              0.000436     endif
 1824              0.001406   endif

FUNCTION  <SNR>133_can_diffoff()
    Defined: ~\.vim\plugged\vim-fugitive\autoload\fugitive.vim:5277
Called 16 times
Total time:   0.000248
 Self time:   0.000248

count  total (s)   self (s)
   16              0.000221   return getwinvar(bufwinnr(a:buf), '&diff') && !empty(getwinvar(bufwinnr(a:buf), 'fugitive_diff_restore'))

FUNCTION  airline#extensions#searchcount#apply()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\searchcount.vim:15
Called 37 times
Total time:   0.002164
 Self time:   0.000640

count  total (s)   self (s)
   37   0.002122   0.000598   call airline#extensions#append_to_section('y', '%{v:hlsearch ? airline#extensions#searchcount#status() : ""}')

FUNCTION  airline#parts#spell()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\parts.vim:67
Called 173 times
Total time:   0.012323
 Self time:   0.012323

count  total (s)   self (s)
  173              0.005669   let spelllang = g:airline_detect_spelllang ? printf(" [%s]", toupper(substitute(&spelllang, ',', '/', 'g'))) : ''
  173              0.000871   if g:airline_detect_spell && &spell
                                let winwidth = airline#util#winwidth()
                                if winwidth >= 90
                                  return g:airline_symbols.spell . spelllang
                                elseif winwidth >= 70
                                  return g:airline_symbols.spell
                                else
                                  return split(g:airline_symbols.spell, '\zs')[0]
                                endif
  173              0.000183   endif
  173              0.000350   return ''

FUNCTION  coc#float#content_height()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:743
Called 3 times
Total time:   0.000302
 Self time:   0.000302

count  total (s)   self (s)
    3              0.000011   if !bufloaded(a:bufnr)
                                return 0
    3              0.000002   endif
    3              0.000004   if !a:wrap
                                return has('nvim') ? nvim_buf_line_count(a:bufnr) : len(getbufline(a:bufnr, 1, '$'))
    3              0.000002   endif
    3              0.000102   let lines = has('nvim') ? nvim_buf_get_lines(a:bufnr, 0, -1, 0) : getbufline(a:bufnr, 1, '$')
    3              0.000005   let total = 0
    6              0.000016   for line in lines
    3              0.000028     let dw = max([1, strdisplaywidth(line)])
    3              0.000044     let total += float2nr(ceil(str2float(string(dw))/a:width))
    6              0.000010   endfor
    3              0.000005   return total

FUNCTION  <SNR>79_CheckDefined()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:129
Called 1824 times
Total time:   0.079387
 Self time:   0.079387

count  total (s)   self (s)
                              " Checks, whether the definition of the colors is valid and is not empty or NONE
                              " e.g. if the colors would expand to this:
                              " hi airline_c ctermfg=NONE ctermbg=NONE
                              " that means to clear that highlighting group, therefore, fallback to Normal
                              " highlighting group for the cterm values
                            
                              " This only works, if the Normal highlighting group is actually defined, so
                              " return early, if it has been cleared
 1824              0.011330   if !exists("g:airline#highlighter#normal_fg_hi")
                                let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cterm')
 1824              0.001576   endif
 1824              0.011324   if empty(g:airline#highlighter#normal_fg_hi) || g:airline#highlighter#normal_fg_hi < 0
                                return a:colors
 1824              0.001439   endif
                            
 1824              0.007745   for val in a:colors
 1824              0.009134     if !empty(val) && val !=# 'NONE'
 1824              0.003639       return a:colors
                                endif
                              endfor
                              " this adds the bold attribute to the term argument of the :hi command,
                              " but at least this makes sure, the group will be defined
                              let fg = g:airline#highlighter#normal_fg_hi
                              let bg = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'cterm')
                              if bg < 0
                                " in case there is no background color defined for Normal
                                let bg = a:colors[3]
                              endif
                              return a:colors[0:1] + [fg, bg] + [a:colors[4]]

FUNCTION  <SNR>25_variables()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\util.vim:239
Called 3 times
Total time:   0.001275
 Self time:   0.001275

count  total (s)   self (s)
    3              0.000058   let info = getbufinfo(a:bufnr)
    3              0.000068   let variables = empty(info) ? {} : copy(info[0]['variables'])
   23              0.000101   for key in keys(variables)
   20              0.000816     if key !~# '\v^coc'
   20              0.000103       unlet variables[key]
   20              0.000026     endif
   23              0.000037   endfor
    3              0.000013   return variables

FUNCTION  airline#parts#crypt()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\parts.vim:59
Called 173 times
Total time:   0.003641
 Self time:   0.003641

count  total (s)   self (s)
  173              0.003349   return g:airline_detect_crypt && exists("+key") && !empty(&key) ? g:airline_symbols.crypt : ''

FUNCTION  217()
    Defined: ~\.vim\plugged\nerdtree\lib\nerdtree\nerdtree.vim:93
Called 7 times
Total time:   0.001262
 Self time:   0.000200

count  total (s)   self (s)
    7   0.000533   0.000043     call g:NERDTree.MustBeOpen()
    7   0.000719   0.000147     call nerdtree#exec(g:NERDTree.GetWinNum() . 'wincmd w', a:0 >0 ? a:1 : 1)

FUNCTION  airline#extensions#keymap#status()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\keymap.vim:10
Called 173 times
Total time:   0.018636
 Self time:   0.018636

count  total (s)   self (s)
  173              0.004405   if (get(g:, 'airline#extensions#keymap#enabled', 1) && has('keymap'))
  173              0.001750     let short_codes = get(g:, 'airline#extensions#keymap#short_codes', {})
  173              0.001842     let label = get(g:, 'airline#extensions#keymap#label', g:airline_symbols.keymap)
  173              0.001396     let default = get(g:, 'airline#extensions#keymap#default', '')
  173              0.000745     if (label !=# '')
  173              0.000987       let label .= ' '
  173              0.000240     endif
  173              0.000753     let keymap = &keymap
  173              0.001140     if has_key(short_codes, keymap)
                                  let keymap = short_codes[keymap]
  173              0.000277     endif
  173              0.002997     return printf('%s', (!empty(keymap) && &iminsert ? (label . keymap) : (!empty(default) ? label . default : default)))
                              else
                                return ''
                              endif

FUNCTION  airline#extensions#branch#head()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\branch.vim:246
Called 173 times
Total time:   0.303909
 Self time:   0.060859

count  total (s)   self (s)
  173              0.001251   if !exists('b:buffer_vcs_config')
    1   0.000060   0.000014     call s:init_buffer()
  173              0.000190   endif
                            
  173   0.112567   0.003257   call s:update_branch()
  173   0.131099   0.003729   call s:update_untracked()
                            
  173              0.001882   if exists('b:airline_head') && !empty(b:airline_head)
                                return b:airline_head
  173              0.000197   endif
                            
  173              0.000673   let b:airline_head = ''
  173              0.002033   let vcs_priority = get(g:, "airline#extensions#branch#vcs_priority", ["git", "mercurial"])
                            
  173              0.000543   let heads = []
  519              0.001605   for vcs in vcs_priority
  346              0.002508     if !empty(b:buffer_vcs_config[vcs].branch)
                                  let heads += [vcs]
  346              0.000413     endif
  519              0.000824   endfor
                            
  173              0.000619   for vcs in heads
                                if !empty(b:airline_head)
                                  let b:airline_head .= ' | '
                                endif
                                if len(heads) > 1
                                  let b:airline_head .= s:vcs_config[vcs].exe .':'
                                endif
                                let b:airline_head .= s:format_name({s:vcs_config[vcs].display_branch}())
                                let additional = b:buffer_vcs_config[vcs].untracked
                                if empty(additional) && has_key(b:buffer_vcs_config[vcs], 'dirty') && b:buffer_vcs_config[vcs].dirty
                                  let additional = g:airline_symbols['dirty']
                                endif
                                let b:airline_head .= additional
  173              0.000509   endfor
                            
  173              0.000782   if empty(heads)
  173   0.007904   0.003540     if airline#util#has_vcscommand()
                                  noa call VCSCommandEnableBufferSetup()
                                  if exists('b:VCSCommandBufferInfo')
                                    let b:airline_head = s:format_name(get(b:VCSCommandBufferInfo, 0, ''))
                                  endif
  173              0.000217     endif
  173              0.000219   endif
                            
  173              0.000747   if empty(heads)
  173   0.005093   0.003132     if airline#util#has_custom_scm()
                                  try
                                    let Fn = function(g:airline#extensions#branch#custom_head)
                                    let b:airline_head = Fn()
                                  endtry
  173              0.000216     endif
  173              0.000201   endif
                            
  173              0.001486   if exists("g:airline#extensions#branch#displayed_head_limit")
                                let w:displayed_head_limit = g:airline#extensions#branch#displayed_head_limit
                                if strwidth(b:airline_head) > w:displayed_head_limit - 1
                                  let b:airline_head = airline#util#strcharpart(b:airline_head, 0, w:displayed_head_limit - 1) . (&encoding ==? 'utf-8' ?  '…' : '.')
                                endif
  173              0.000185   endif
                            
  173              0.000596   return b:airline_head

FUNCTION  coc#helper#dict_pick()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\helper.vim:60
Called 3 times
Total time:   0.000758
 Self time:   0.000758

count  total (s)   self (s)
    3              0.000009   let res = {}
   54              0.000158   for key in keys(a:dict)
   51              0.000243     if index(a:keys, key) != -1
   15              0.000084       let res[key] = a:dict[key]
   51              0.000054     endif
   54              0.000060   endfor
    3              0.000007   return res

FUNCTION  223()
    Defined: ~\.vim\plugged\nerdtree\lib\nerdtree\nerdtree.vim:140
Called 21 times
Total time:   0.001125
 Self time:   0.001068

count  total (s)   self (s)
   21              0.000112     if exists('t:NERDTreeBufName')
                                    return bufwinnr(t:NERDTreeBufName)
   21              0.000020     endif
                            
                                " If WindowTree, there is no t:NERDTreeBufName variable. Search all windows.
   21              0.000160     for w in range(1,winnr('$'))
   21   0.000618   0.000561         if bufname(winbufnr(w)) =~# '^' . g:NERDTreeCreator.BufNamePrefix() . '\d\+$'
   21              0.000035             return w
                                    endif
                                endfor
                            
                                return -1

FUNCTION  224()
    Defined: ~\.vim\plugged\nerdtree\lib\nerdtree\nerdtree.vim:156
Called 14 times
Total time:   0.000997
 Self time:   0.000153

count  total (s)   self (s)
   14   0.000982   0.000138     return s:NERDTree.GetWinNum() !=# -1

FUNCTION  227()
    Defined: ~\.vim\plugged\nerdtree\lib\nerdtree\nerdtree.vim:171
Called 7 times
Total time:   0.000490
 Self time:   0.000083

count  total (s)   self (s)
    7   0.000461   0.000054     if !s:NERDTree.IsOpen()
                                    throw 'NERDTree.TreeNotOpen'
    7              0.000006     endif

FUNCTION  <SNR>132_untracked_output()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\async.vim:12
Called 1 time
Total time:   0.000043
 Self time:   0.000043

count  total (s)   self (s)
    1              0.000017   if a:buf =~? ('^'. a:dict.cfg['untracked_mark'])
                                let a:dict.cfg.untracked[a:dict.file] = get(g:, 'airline#extensions#branch#notexists', g:airline_symbols.notexists)
    1              0.000003   else
    1              0.000010     let a:dict.cfg.untracked[a:dict.file] = ''
    1              0.000002   endif

FUNCTION  airline#parts#mode()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\parts.vim:55
Called 173 times
Total time:   0.018942
 Self time:   0.004767

count  total (s)   self (s)
  173   0.018633   0.004458   return airline#util#shorten(get(w:, 'airline_current_mode', ''), 79, 1)

FUNCTION  <SNR>133_TempDelete()
    Defined: ~\.vim\plugged\vim-fugitive\autoload\fugitive.vim:2456
Called 7 times
Total time:   0.000695
 Self time:   0.000262

count  total (s)   self (s)
    7   0.000532   0.000099   let key = s:cpath(a:file)
    7              0.000086   if has_key(s:temp_files, key) && !has_key(s:temp_files[key], 'job') && key !=# s:cpath(get(get(g:, '_fugitive_last_job', {}), 'file', ''))
                                call delete(a:file)
                                call remove(s:temp_files, key)
    7              0.000005   endif
    7              0.000009   return ''

FUNCTION  coc#util#get_bufoptions()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\util.vim:204
Called 3 times
Total time:   0.002234
 Self time:   0.000958

count  total (s)   self (s)
    3              0.000094   if !bufloaded(a:bufnr) | return v:null | endif
    3              0.000031   let bufname = bufname(a:bufnr)
    3              0.000040   let buftype = getbufvar(a:bufnr, '&buftype')
    3              0.000013   let previewwindow = 0
    3              0.000028   let winid = bufwinid(a:bufnr)
    3              0.000013   if winid != -1
    3              0.000035     let previewwindow = getwinvar(winid, '&previewwindow', 0)
    3              0.000005   endif
    3              0.000010   let size = -1
    3              0.000019   if bufnr('%') == a:bufnr
    3              0.000040     let size = line2byte(line("$") + 1)
                              elseif !empty(bufname)
                                let size = getfsize(bufname)
    3              0.000004   endif
    3              0.000012   let lines = []
    3              0.000040   if getbufvar(a:bufnr, 'coc_enabled', 1) && (buftype == '' || buftype == 'acwrite') && size < a:maxFileSize
    1              0.000044     let lines = getbufline(a:bufnr, 1, '$')
    3              0.000004   endif
    3   0.001720   0.000445   return { 'bufname': bufname, 'size': size, 'buftype': buftype, 'winid': winid, 'previewwindow': previewwindow == 0 ? v:false : v:true, 'variables': s:variables(a:bufnr), 'fullpath': empty(bufname) ? '' : fnamemodify(bufname, ':p'), 'eol': getbufvar(a:bufnr, '&eol'), 'filetype': getbufvar(a:bufnr, '&filetype'), 'iskeyword': getbufvar(a:bufnr, '&iskeyword'), 'changedtick': getbufvar(a:bufnr, 'changedtick'), 'lines': lines,}

FUNCTION  airline#extensions#quickfix#apply()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\quickfix.vim:14
Called 37 times
Total time:   0.000560
 Self time:   0.000560

count  total (s)   self (s)
   37              0.000144   if &buftype == 'quickfix'
                                let w:airline_section_a = airline#extensions#quickfix#get_type()
                                let w:airline_section_b = '%{get(w:, "quickfix_title", "")}'
                                let w:airline_section_c = ''
                                let w:airline_section_x = ''
   37              0.000036   endif

FUNCTION  <SNR>133_function()
    Defined: ~\.vim\plugged\vim-fugitive\autoload\fugitive.vim:11
Called 16 times
Total time:   0.001366
 Self time:   0.001366

count  total (s)   self (s)
   16              0.001300   return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '.*\zs<SNR>\d\+_'),''))

FUNCTION  coc#_complete()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc.vim:50
Called 2 times
Total time:   0.001085
 Self time:   0.000457

count  total (s)   self (s)
    2              0.000018   let items = get(g:coc#_context, 'candidates', [])
    2              0.000011   let preselect = get(g:coc#_context, 'preselect', -1)
    2   0.001009   0.000381   call complete( g:coc#_context.start + 1, items)
    2              0.000017   if s:select_api && len(items) && preselect != -1
                                call nvim_select_popupmenu_item(preselect, v:false, v:false, {})
    2              0.000002   endif
    2              0.000005   return ''

FUNCTION  <SNR>14_LoadFTPlugin()
    Defined: C:\Neovim\share\nvim\runtime\ftplugin.vim:14
Called 3 times
Total time:   0.025550
 Self time:   0.025072

count  total (s)   self (s)
    3              0.000021     if exists("b:undo_ftplugin")
    1              0.000020       exe b:undo_ftplugin
    1              0.000004       unlet! b:undo_ftplugin b:did_ftplugin
    3              0.000003     endif
                            
    3              0.000021     let s = expand("<amatch>")
    3              0.000008     if s != ""
    3              0.000049       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    3              0.000003       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
    6              0.000040       for name in split(s, '\.')
    3   0.025294   0.024816 	exe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
    6              0.000017       endfor
    3              0.000004     endif

FUNCTION  airline#extensions#wordcount#apply()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\wordcount.vim:88
Called 37 times
Total time:   0.002506
 Self time:   0.002506

count  total (s)   self (s)
   37              0.000488   let filetypes = get(g:, 'airline#extensions#wordcount#filetypes',  ['asciidoc', 'help', 'mail', 'markdown', 'nroff', 'org', 'rst', 'plaintex', 'tex', 'text'])
                              " export current filetypes settings to global namespace
   37              0.000238   let g:airline#extensions#wordcount#filetypes = filetypes
                            
                              " Check if filetype needs testing
   37              0.000105   if did_filetype()
                                " correctly test for compound filetypes (e.g. markdown.pandoc)
    3              0.000036     let ft = substitute(&filetype, '\.', '\\|', 'g')
                            
                                " Select test based on type of "filetypes": new=list, old=string
    3              0.000094     if type(filetypes) == get(v:, 't_list', type([])) ? match(filetypes, '\<'. ft. '\>') > -1 || index(filetypes, 'all') > -1 : match(&filetype, filetypes) > -1
                                  let b:airline_changedtick = -1
                                  call s:update_wordcount(1) " force update: ensures initial worcount exists
    3              0.000013     elseif exists('b:airline_wordcount') " cleanup when filetype is removed
                                  unlet b:airline_wordcount
    3              0.000003     endif
   37              0.000029   endif
                            
   37              0.000147   if exists('b:airline_wordcount')
                                call airline#extensions#prepend_to_section( 'z', '%{airline#extensions#wordcount#get()}')
   37              0.000026   endif

FUNCTION  polyglot#init#is_disabled()
    Defined: ~\.vim\plugged\vim-polyglot\autoload\polyglot\init.vim:23
Called 63 times
Total time:   0.002751
 Self time:   0.002751

count  total (s)   self (s)
   63              0.000327   if !g:polyglot_initialized
   63              0.000341     if a:path[0:7] == "autoload"
                                  let g:polyglot_initialized = 1
                            
                                  for p in globpath(&rtp, a:path, 0, 1)
                                    if p != a:caller
                                      exe "source " . p
                                      return 1
                                    endif
                                  endfor
   63              0.000057     endif
   63              0.000065   endif
                            
   63              0.000393   return has_key(g:polyglot_is_disabled, a:name)

FUNCTION  <SNR>73_check_defined_section()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions.vim:47
Called 37 times
Total time:   0.000680
 Self time:   0.000680

count  total (s)   self (s)
   37              0.000276   if !exists('w:airline_section_{a:name}')
   37              0.000315     let w:airline_section_{a:name} = g:airline_section_{a:name}
   37              0.000033   endif

FUNCTION  <SNR>82_update_untracked()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\branch.vim:199
Called 173 times
Total time:   0.127370
 Self time:   0.098199

count  total (s)   self (s)
  173              0.030638   let file = expand("%:p")
  173              0.016329   if empty(file) || isdirectory(file) || !empty(&buftype)
                                return
  173              0.000261   endif
                            
  173              0.000963   let needs_update = 1
  173              0.002403   let vcs_checks   = get(g:, "airline#extensions#branch#vcs_checks", ["untracked", "dirty"])
  519              0.002990   for vcs in keys(s:vcs_config)
  346              0.005837     if file =~ s:vcs_config[vcs].exclude
                                  " Skip check for files that live in the exclude directory
                                  let needs_update = 0
  346              0.000493     endif
  346              0.003039     if has_key(s:vcs_config[vcs].untracked, file)
  166              0.000619       let needs_update = 0
  166   0.012489   0.006073       call airline#extensions#branch#update_untracked_config(file, vcs)
  346              0.000449     endif
  519              0.001029   endfor
                            
  173              0.000497   if !needs_update
  166              0.000343     return
    7              0.000008   endif
                            
   21              0.000103   for vcs in keys(s:vcs_config)
                                " only check, for git, if fugitive is installed
                                " and for 'hg' if lawrencium is installed, else skip
   14   0.000445   0.000292     if vcs is# 'git' && (!airline#util#has_fugitive() && !airline#util#has_gina())
                                  continue
   14   0.000374   0.000227     elseif vcs is# 'mercurial' && !airline#util#has_lawrencium()
    7              0.000014       continue
    7              0.000008     endif
    7              0.000039     let config = s:vcs_config[vcs]
                                " Note that asynchronous update updates s:vcs_config only, and only
                                " s:update_untracked updates b:buffer_vcs_config. If s:vcs_config is
                                " invalidated again before s:update_untracked is called, then we lose the
                                " result of the previous call, i.e. the head string is not updated. It
                                " doesn't happen often in practice, so we let it be.
    7              0.000052     if index(vcs_checks, 'untracked') > -1
    7   0.026738   0.014889       call airline#async#vcs_untracked(config, file, vcs)
    7              0.000011     endif
                                " Check clean state of repo
    7              0.000062     if index(vcs_checks, 'dirty') > -1
    7   0.010840   0.000232       call airline#async#vcs_clean(config.dirty, file, vcs)
    7              0.000026     endif
   14              0.000050   endfor

FUNCTION  <SNR>86_ws_refresh()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\whitespace.vim:185
Called 19 times
Total time:   0.000381
 Self time:   0.000381

count  total (s)   self (s)
   19              0.000217   if get(b:, 'airline_ws_changedtick', 0) == b:changedtick
   16              0.000037     return
    3              0.000003   endif
    3              0.000017   unlet! b:airline_whitespace_check
    3              0.000017   if get(g:, 'airline_skip_empty_sections', 0)
                                exe ':AirlineRefresh!'
    3              0.000003   endif
    3              0.000016   let b:airline_ws_changedtick = b:changedtick

FUNCTION  airline#extensions#nvimlsp#get_warning()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\nvimlsp.vim:38
Called 173 times
Total time:   0.017360
 Self time:   0.004039

count  total (s)   self (s)
  173   0.017130   0.003809   return airline#extensions#nvimlsp#get('Warning')

FUNCTION  airline#async#nvim_vcs_clean()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\async.vim:305
Called 7 times
Total time:   0.009633
 Self time:   0.008899

count  total (s)   self (s)
    7   0.001841   0.001146     let config = { 'buf': '', 'vcs': a:vcs, 'file': a:file, 'cwd': s:valid_dir(fnamemodify(a:file, ':p:h')), 'on_stdout': function('s:nvim_output_handler'), 'on_stderr': function('s:nvim_output_handler'), 'on_exit': function('s:on_exit_clean')}
    7              0.000187     if g:airline#init#is_windows && &shell =~ 'cmd\|powershell'
    7              0.000037       let cmd = a:cmd
                                else
                                  let cmd = [&shell, &shellcmdflag, a:cmd]
    7              0.000009     endif
                            
    7              0.000059     if !has_key(s:clean_jobs, a:vcs)
    1              0.000005       let s:clean_jobs[a:vcs] = {}
    7              0.000007     endif
    7              0.000057     if has_key(s:clean_jobs[a:vcs], a:file)
                                  " still running
    6              0.000012       return
                                  " jobs dict should be cleaned on exit, so not needed here
                                  " call remove(s:clean_jobs[a:vcs], a:file)
    1              0.000001     endif
    1              0.007193     let id = jobstart(cmd, config)
    1   0.000101   0.000062     call s:set_clean_jobs_variable(a:vcs, a:file, id)

FUNCTION  coc#float#nvim_create_related()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:174
Called 3 times
Total time:   0.005193
 Self time:   0.000745

count  total (s)   self (s)
    3              0.000025   let related = getwinvar(a:winid, 'related', [])
    3              0.000015   let exists = !empty(related)
    3              0.000017   let border = get(a:opts, 'border', [])
    3              0.000019   let highlights = get(a:opts, 'borderhighlight', [])
    3              0.000019   let hlgroup = get(a:opts, 'highlight', 'CocFloating')
    3              0.000033   let borderhighlight = type(highlights) == 1 ? highlights : get(highlights, 0, 'CocFloating')
    3   0.000117   0.000065   let borderhighlight =  coc#highlight#compose_hlgroup(borderhighlight, hlgroup)
    3              0.000018   let title = get(a:opts, 'title', '')
    3              0.000017   let buttons = get(a:opts, 'buttons', [])
    3              0.000020   let pad = empty(border) || get(border, 1, 0) == 0
    3              0.000013   if get(a:opts, 'close', 0)
                                call coc#float#nvim_close_btn(a:config, a:winid, border, borderhighlight, related)
    3              0.000007   elseif exists
    1   0.000591   0.000026     call coc#float#close_related(a:winid, 'close')
    3              0.000003   endif
    3              0.000011   if !empty(buttons)
                                call coc#float#nvim_buttons(a:config, a:winid, buttons, get(border, 2, 0), pad, hlgroup, borderhighlight, related)
    3              0.000006   elseif exists
    1   0.000553   0.000029     call coc#float#close_related(a:winid, 'buttons')
    3              0.000003   endif
    3   0.000066   0.000045   if !s:empty_border(border)
                                call coc#float#nvim_border_win(a:config, a:winid, border, title, !empty(buttons), borderhighlight, related)
    3              0.000006   elseif exists
    1   0.000556   0.000025     call coc#float#close_related(a:winid, 'border')
    3              0.000003   endif
                              " Check right border
    3              0.000005   if pad
    3   0.002832   0.000076     call coc#float#nvim_right_pad(a:config, a:winid, hlgroup, related)
                              elseif exists
                                call coc#float#close_related(a:winid, 'pad')
    3              0.000004   endif
    3              0.000072   call setwinvar(a:winid, 'related', filter(related, 'nvim_win_is_valid(v:val)'))

FUNCTION  250()
    Defined: ~\.vim\plugged\nerdtree\lib\nerdtree\ui.vim:364
Called 7 times
Total time:   0.001854
 Self time:   0.000412

count  total (s)   self (s)
    7              0.000030     let win = winnr()
    7              0.000046     let self._screenState = {}
    7              0.000009     try
    7   0.001312   0.000050         call g:NERDTree.CursorToTreeWin()
    7              0.000055         let self._screenState['oldPos'] = getpos('.')
    7              0.000038         let self._screenState['oldTopLine'] = line('w0')
    7              0.000056         let self._screenState['oldWindowSize'] = winnr('$')==1 ? g:NERDTreeWinSize : winwidth('')
    7   0.000259   0.000079         call nerdtree#exec(win . 'wincmd w', 1)
                                catch
    7              0.000008     endtry

FUNCTION  <SNR>98_is_blocking()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:1572
Called 3 times
Total time:   0.020819
 Self time:   0.019791

count  total (s)   self (s)
    3   0.020796   0.019768   if coc#prompt#activated()
                                return 1
    3              0.000004   endif
    3              0.000005   return 0

FUNCTION  <SNR>73_is_excluded_window()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions.vim:111
Called 179 times
Total time:   0.034091
 Self time:   0.034091

count  total (s)   self (s)
  179              0.000811   for matchft in g:airline_exclude_filetypes
                                if matchft ==# &ft
                                  return 1
                                endif
  179              0.000303   endfor
                            
  716              0.001659   for matchw in g:airline_exclude_filenames
  537              0.025265     if matchstr(expand('%'), matchw) ==# matchw
                                  return 1
  537              0.000423     endif
  716              0.000764   endfor
                            
  179              0.000485   if g:airline_exclude_preview && &previewwindow
                                return 1
  179              0.000138   endif
                            
  179              0.000243   return 0

FUNCTION  coc#highlight#clear_highlight()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\highlight.vim:54
Called 6 times
Total time:   0.001009
 Self time:   0.000804

count  total (s)   self (s)
    6              0.000065   let bufnr = a:bufnr == 0 ? bufnr('%') : a:bufnr
    6              0.000037   if !bufloaded(bufnr)
                                return
    6              0.000008   endif
    6   0.000366   0.000161   let src_id = s:create_namespace(a:key)
    6              0.000242   if has('nvim')
    6              0.000170     call nvim_buf_clear_namespace(a:bufnr, src_id, a:start_line, a:end_line)
                              else
                                call coc#api#call('buf_clear_namespace', [a:bufnr, src_id, a:start_line, a:end_line])
    6              0.000007   endif

FUNCTION  <SNR>92_get_transitioned_seperator()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\builder.vim:140
Called 612 times
Total time:   0.800151
 Self time:   0.037337

count  total (s)   self (s)
  612              0.001301   let line = ''
  612              0.004569   if get(a:self._context, 'tabline', 0) && get(g:, 'airline#extensions#tabline#alt_sep', 0) && a:group ==# 'airline_tabsel' && a:side
                                call airline#highlighter#add_separator(a:prev_group, a:group, 0)
                                let line .= '%#'.a:prev_group.'_to_'.a:group.'#'
                                let line .=  a:self._context.right_sep.'%#'.a:group.'#'
  612              0.000522   else
  612   0.772276   0.009463     call airline#highlighter#add_separator(a:prev_group, a:group, a:side)
  612              0.004640     let line .= '%#'.a:prev_group.'_to_'.a:group.'#'
  612              0.003959     let line .= a:side ? a:self._context.left_sep : a:self._context.right_sep
  612              0.002620     let line .= '%#'.a:group.'#'
  612              0.000506   endif
  612              0.001138   return line

FUNCTION  airline#statusline()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline.vim:190
Called 192 times
Total time:   0.008580
 Self time:   0.008580

count  total (s)   self (s)
  192              0.003026   if has_key(s:contexts, a:winnr)
  192              0.004737     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
                              endif
                              " in rare circumstances this happens...see #276
                              return ''

FUNCTION  <SNR>23_Autocmd()
    Defined: ~\.vim\plugged\coc.nvim\plugin\coc.vim:232
Called 234 times
Total time:   0.057176
 Self time:   0.007027

count  total (s)   self (s)
  234              0.001220   if !g:coc_workspace_initialized
                                return
  234              0.000325   endif
  234   0.054341   0.004193   call coc#rpc#notify('CocAutocmd', a:000)

FUNCTION  polyglot#sleuth#GlobForFiletype()
    Defined: ~\.vim\plugged\vim-polyglot\autoload\polyglot\sleuth.vim:642
Called 16 times
Total time:   0.000116
 Self time:   0.000116

count  total (s)   self (s)
   16              0.000098   return get(s:globs, a:type, '')

FUNCTION  airline#util#has_lawrencium()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:158
Called 180 times
Total time:   0.003221
 Self time:   0.003221

count  total (s)   self (s)
  180              0.001254   if !exists("s:has_lawrencium")
    1              0.000006     let s:has_lawrencium  = exists('*lawrencium#statusline')
  180              0.000206   endif
  180              0.000566   return s:has_lawrencium

FUNCTION  <SNR>10_guess()
    Defined: ~\.vim\plugged\vim-polyglot\autoload\polyglot\init.vim:2782
Called 35 times
Total time:   0.110983
 Self time:   0.094724

count  total (s)   self (s)
   35              0.000121     let options = {}
   35              0.000079     let ccomment = 0
   35              0.000071     let podcomment = 0
   35              0.000070     let triplequote = 0
   35              0.000062     let backtick = 0
   35              0.000065     let xmlcomment = 0
   35              0.000072     let heredoc = ''
   35              0.000072     let minindent = 10
   35              0.000090     let spaces_minus_tabs = 0
   35              0.000060     let lineno = 0
   35              0.000093     let stack = [0]
   35              0.000233     let indents = { '2': 0, '3': 0, '4': 0, '6': 0, '8': 0 }
                            
  564              0.001081     for line in a:lines
  529              0.001216       let lineno += 1
                            
  529              0.003540       if line =~# '^\s*$'
   35              0.000068         continue
  494              0.000380       endif
                            
  494              0.003053       if line =~# '^\s*/\*'
    1              0.000004         let ccomment = 1
  494              0.000374       endif
  494              0.000728       if ccomment
    3              0.000027         if line =~# '\*/'
    1              0.000004           let ccomment = 0
    3              0.000005         endif
    3              0.000006         continue
  491              0.000365       endif
                            
  491              0.002253       if line =~# '^=\w'
                                    let podcomment = 1
  491              0.000366       endif
  491              0.000709       if podcomment
                                    if line =~# '^=\%(end\|cut\)\>'
                                      let podcomment = 0
                                    endif
                                    continue
  491              0.000364       endif
                            
  491              0.000705       if triplequote
                                    if line =~# '^[^"]*"""[^"]*$'
                                      let triplequote = 0
                                    endif
                                    continue
  491              0.007552       elseif line =~# '^[^"]*"""[^"]*$'
                                    let triplequote = 1
  491              0.000371       endif
                            
  491              0.000679       if backtick
                                    if line =~# '^[^`]*`[^`]*$'
                                      let backtick = 0
                                    endif
                                    continue
  491              0.001458       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
                                    let backtick = 1
  491              0.000378       endif
                            
  491              0.003452       if line =~# '^\s*<\!--'
                                    let xmlcomment = 1
  491              0.000365       endif
  491              0.000701       if xmlcomment
                                    if line =~# '-->'
                                      let xmlcomment = 0
                                    endif
                                    continue
  491              0.000365       endif
                            
                                  " This is correct order because both "<<EOF" and "EOF" matches end
  491              0.001041       if heredoc != ''
                                    if line =~# heredoc
                                      let heredoc = ''
                                    endif
                                    continue
  491              0.000363       endif
  491              0.004593       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
  491              0.001498       if len(herematch) > 0
                                    let heredoc = herematch[1] . '$'
  491              0.000371       endif
                            
  491              0.001423       if line[0] == "\t"
                                    let spaces_minus_tabs -= 1
  491              0.000437       else
  491              0.001348         if line[0] == " "
  140              0.000425           let spaces_minus_tabs += 1
  491              0.000401         endif
  491              0.004699         let indent = len(matchstr(line, '^ *'))
  522              0.001379         while stack[-1] > indent
   31              0.000131           call remove(stack, -1)
  522              0.000563         endwhile
                            
  491              0.001599         let indent_inc = indent - stack[-1]
                            
  491              0.001851         if indent_inc == 0 && len(stack) > 1
  109              0.000375           let indent_inc = indent - stack[-2]
  491              0.000392         endif
                            
  491              0.002110         if has_key(indents, indent_inc)
  140              0.000536           let indents[indent_inc] += 1
  140              0.000363           let prev_indent = indent
  491              0.000382         endif
                            
  491              0.001166         if stack[-1] != indent
   31              0.000150           call add(stack, indent)
  491              0.000371         endif
  491              0.000418       endif
  526              0.000730     endfor
                            
   35              0.000090     if spaces_minus_tabs < 0
                                  setlocal noexpandtab
                                  let &l:shiftwidth=&tabstop
                                  return 1
   35              0.000028     endif
                            
   35   0.016875   0.000616     let shiftwidth = s:get_shiftwidth(indents)
                            
   35              0.000072     if shiftwidth > 0
    3              0.000026       setlocal expandtab
    3              0.000027       let &l:shiftwidth=shiftwidth
    3              0.000004       try
                                    " Sunchronize tabstop with shiftwidth
    3              0.000017         let &l:softtabstop = -1
                                  catch /^Vim\%((\a\+)\)\=:E487/
                                    " -1 was not supported before Vim 7.4
                                    let &l:softtabstop = a:num_spaces
    3              0.000004       endtry
    3              0.000004       return 1
   32              0.000025     endif
                            
   32              0.000043     return 0

FUNCTION  airline#highlighter#get_highlight()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:65
Called 5454 times
Total time:   1.818188
 Self time:   0.748028

count  total (s)   self (s)
                              " only check for the cterm reverse attribute
                              " TODO: do we need to check all modes (gui, term, as well)?
 5454              0.082830   let reverse = synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'cterm')
 5454              0.037729   if get(g:, 'airline_highlighting_cache', 0) && has_key(s:hl_groups, a:group)
                                let res = s:hl_groups[a:group]
                                return reverse ? [ res[1], res[0], res[3], res[2], res[4] ] : res
 5454              0.005078   else
 5454   0.337884   0.075588     let ctermfg = s:get_syn(a:group, 'fg', 'cterm')
 5454   0.325999   0.072724     let ctermbg = s:get_syn(a:group, 'bg', 'cterm')
 5454   0.317496   0.070081     let guifg = s:get_syn(a:group, 'fg', 'gui')
 5454   0.315804   0.070158     let guibg = s:get_syn(a:group, 'bg', 'gui')
 5454              0.066089     let bold = synIDattr(synIDtrans(hlID(a:group)), 'bold')
 5454              0.009361     if reverse
                                  let res = s:get_array(guibg, guifg, ctermbg, ctermfg, bold ? ['bold'] : a:000)
 5454              0.005309     else
 5454   0.153115   0.091585       let res = s:get_array(guifg, guibg, ctermfg, ctermbg, bold ? ['bold'] : a:000)
 5454              0.004837     endif
 5454              0.004194   endif
 5454              0.030071   let s:hl_groups[a:group] = res
 5454              0.008250   return res

FUNCTION  <SNR>79_hl_group_exists()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:96
Called 1355 times
Total time:   0.034096
 Self time:   0.034096

count  total (s)   self (s)
 1355              0.010744   if !hlexists(a:group)
                                return 0
 1355              0.013760   elseif empty(synIDattr(hlID(a:group), 'fg'))
                                return 0
 1355              0.001105   endif
 1355              0.001715   return 1

FUNCTION  <SNR>18_on_window_changed()
    Defined: ~\.vim\plugged\vim-airline\plugin\airline.vim:51
Called 43 times
Total time:   1.707233
 Self time:   0.003731

count  total (s)   self (s)
                              " don't trigger for Vim popup windows
   43              0.000220   if &buftype is# 'popup'
                                return
   43              0.000038   endif
                            
   43              0.000211   if pumvisible() && (!&previewwindow || g:airline_exclude_preview)
                                " do not trigger for previewwindows
                                return
   43              0.000031   endif
   43              0.000220   let s:active_winnr = winnr()
                              " Handle each window only once, since we might come here several times for
                              " different autocommands.
   43              0.000618   let l:key = [bufnr('%'), s:active_winnr, winnr('$'), tabpagenr(), &ft]
   43              0.000510   if get(g:, 'airline_last_window_changed', []) == l:key && &stl is# '%!airline#statusline('.s:active_winnr.')' && &ft !~? 'gitcommit'
                                " fugitive is special, it changes names and filetypes several times,
                                " make sure the caching does not get into its way
    6              0.000009     return
   37              0.000030   endif
   37              0.000293   let g:airline_last_window_changed = l:key
   37   0.000613   0.000423   call s:init()
   37   1.703784   0.000472   call airline#update_statusline()

FUNCTION  airline#util#shorten()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:28
Called 694 times
Total time:   0.053145
 Self time:   0.035120

count  total (s)   self (s)
  694   0.033685   0.015660   if airline#util#winwidth() < a:winwidth && len(split(a:text, '\zs')) > a:minwidth
                                if get(a:000, 0, 0)
                                  " shorten from tail
                                  return '…'.matchstr(a:text, '.\{'.a:minwidth.'}$')
                                else
                                  " shorten from beginning of string
                                  return matchstr(a:text, '^.\{'.a:minwidth.'}').'…'
                                endif
  694              0.000780   else
  694              0.001960     return a:text
                              endif

FUNCTION  airline#extensions#coc#get_current_function()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\coc.vim:51
Called 175 times
Total time:   0.001627
 Self time:   0.001627

count  total (s)   self (s)
  175              0.001388   return get(b:, 'coc_current_function', '')

FUNCTION  276()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\builder.vim:17
Called 791 times
Total time:   0.005666
 Self time:   0.005666

count  total (s)   self (s)
  791              0.005106   call add(self._sections, [a:group, a:contents])

FUNCTION  airline#util#ignore_next_focusgain()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:195
Called 173 times
Total time:   0.003608
 Self time:   0.003608

count  total (s)   self (s)
  173              0.001252   if has('win32')
                                " Setup an ignore for platforms that trigger FocusLost on calls to
                                " system(). macvim (gui and terminal) and Linux terminal vim do not.
  173              0.001271     let s:focusgained_ignore_time = localtime()
  173              0.000241   endif

FUNCTION  coc#util#set_buf_var()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\util.vim:851
Called 3 times
Total time:   0.000066
 Self time:   0.000066

count  total (s)   self (s)
    3              0.000026   if !bufloaded(a:bufnr) | return | endif
    3              0.000034   call setbufvar(a:bufnr, a:name, a:val)

FUNCTION  coc#float#nvim_refresh_scrollbar()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:759
Called 48 times
Total time:   0.003720
 Self time:   0.001945

count  total (s)   self (s)
   48   0.002919   0.001143   let id = coc#float#get_related(a:winid, 'scrollbar')
   48              0.000316   if id && nvim_win_is_valid(id)
                                call coc#float#nvim_scrollbar(a:winid)
   48              0.000084   endif

FUNCTION  airline#highlighter#highlight_modified_inactive()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\highlighter.vim:226
Called 16 times
Total time:   0.016190
 Self time:   0.001495

count  total (s)   self (s)
   16              0.000168   if getbufvar(a:bufnr, '&modified')
   11              0.000330     let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c : []
    5              0.000006   else
    5              0.000099     let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive.airline_c : []
   16              0.000026   endif
                            
   16              0.000076   if !empty(colors)
   16   0.015181   0.000486     call airline#highlighter#exec('airline_c'.(a:bufnr).'_inactive', colors)
   16              0.000018   endif

FUNCTION  <SNR>15_LoadIndent()
    Defined: C:\Neovim\share\nvim\runtime\indent.vim:13
Called 3 times
Total time:   0.035129
 Self time:   0.033966

count  total (s)   self (s)
    3              0.000020     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    3              0.000003     endif
    3              0.000021     let s = expand("<amatch>")
    3              0.000008     if s != ""
    3              0.000010       if exists("b:did_indent")
                            	unlet b:did_indent
    3              0.000003       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
    6              0.000047       for name in split(s, '\.')
    3   0.034942   0.033779 	exe 'runtime! indent/' . name . '.vim'
    6              0.000015       endfor
    3              0.000004     endif

FUNCTION  <SNR>86_check_mixed_indent_file()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\whitespace.vim:34
Called 4 times
Total time:   0.000434
 Self time:   0.000434

count  total (s)   self (s)
    4              0.000062   let c_like_langs = get(g:, 'airline#extensions#c_like_langs', [ 'arduino', 'c', 'cpp', 'cuda', 'go', 'javascript', 'ld', 'php' ])
    4              0.000039   if index(c_like_langs, &ft) > -1
                                " for C-like languages: allow /** */ comment style with one space before the '*'
                                let head_spc = '\v(^ +\*@!)'
    4              0.000005   else
    4              0.000013     let head_spc = '\v(^ +)'
    4              0.000005   endif
    4              0.000123   let indent_tabs = search('\v(^\t+)', 'nw')
    4              0.000089   let indent_spc  = search(head_spc, 'nw')
    4              0.000017   if indent_tabs > 0 && indent_spc > 0
                                return printf("%d:%d", indent_tabs, indent_spc)
    4              0.000005   else
    4              0.000011     return ''
                              endif

FUNCTION  airline#extensions#branch#get_head()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\branch.vim:315
Called 173 times
Total time:   0.337203
 Self time:   0.018518

count  total (s)   self (s)
  173   0.307561   0.003652   let head = airline#extensions#branch#head()
  173   0.005612   0.003850   let winwidth = get(airline#parts#get('branch'), 'minwidth', 120)
  173              0.001803   let minwidth = empty(get(b:, 'airline_hunks', '')) ? 14 : 7
  173   0.016571   0.003556   let head = airline#util#shorten(head, winwidth, minwidth)
  173              0.001894   let symbol = get(g:, 'airline#extensions#branch#symbol', g:airline_symbols.branch)
  173              0.003020   return empty(head) ? get(g:, 'airline#extensions#branch#empty_message', '') : printf('%s%s', empty(symbol) ? '' : symbol.(g:airline_symbols.space), head)

FUNCTION  airline#extensions#nvimlsp#get_error()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\nvimlsp.vim:42
Called 173 times
Total time:   0.014182
 Self time:   0.003596

count  total (s)   self (s)
  173   0.013963   0.003377   return airline#extensions#nvimlsp#get('Error')

FUNCTION  281()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\builder.vim:62
Called 179 times
Total time:   1.379883
 Self time:   0.170829

count  total (s)   self (s)
  179              0.000357   let side = 1
  179              0.000313   let line = ''
  179              0.000302   let i = 0
  179              0.000689   let length = len(self._sections)
  179              0.000314   let split = 0
  179              0.000357   let is_empty = 0
  179              0.000395   let prev_group = ''
                            
 1149              0.002727   while i < length
  970              0.003564     let section = self._sections[i]
  970              0.002855     let group = section[0]
  970              0.002955     let contents = section[1]
  970              0.002424     let pgroup = prev_group
  970   0.034085   0.014907     let prev_group = airline#builder#get_prev_group(self._sections, i)
  970              0.004281     if group ==# 'airline_c' && &buftype ==# 'terminal' && self._context.active
                                  let group = 'airline_term'
  970              0.005600     elseif group ==# 'airline_c' && !self._context.active && has_key(self._context, 'bufnr')
   19              0.000091       let group = 'airline_c'. self._context.bufnr
  951              0.005297     elseif prev_group ==# 'airline_c' && !self._context.active && has_key(self._context, 'bufnr')
   19              0.000098       let prev_group = 'airline_c'. self._context.bufnr
  970              0.000822     endif
  970              0.001463     if is_empty
                                  let prev_group = pgroup
  970              0.000691     endif
  970   0.025767   0.013528     let is_empty = s:section_is_empty(self, contents)
                            
  970              0.001405     if is_empty
                                  " need to fix highlighting groups, since we
                                  " have skipped a section, we actually need
                                  " the previous previous group and so the
                                  " seperator goes from the previous previous group
                                  " to the current group
                                  let pgroup = group
  970              0.000755     endif
                            
  970              0.002028     if group == ''
                                  let line .= contents
  970              0.002031     elseif group == '|'
  179              0.000290       let side = 0
  179              0.000716       let line .= contents
  179              0.000288       let split = 1
  791              0.000707     else
  791              0.001726       if prev_group == ''
  179              0.000931         let line .= '%#'.group.'#'
  612              0.000858       elseif split
  158              0.000238         if !is_empty
  158   0.221624   0.003058           let line .= s:get_transitioned_seperator(self, prev_group, group, side)
  158              0.000159         endif
  158              0.000312         let split = 0
  454              0.000396       else
  454              0.000705         if !is_empty
  454   0.905600   0.008011           let line .= s:get_seperator(self, prev_group, group, side)
  454              0.000460         endif
  791              0.000826       endif
  791   0.077129   0.015645       let line .= is_empty ? '' : s:get_accented_line(self, group, contents)
  970              0.000878     endif
                            
  970              0.002257     let i = i + 1
 1149              0.001917   endwhile
                            
  179              0.000409   if !self._context.active
                                "let line = substitute(line, '%#airline_c#', '%#airline_c'.self._context.bufnr.'#', '')
  142              0.008298     let line = substitute(line, '%#.\{-}\ze#', '\0_inactive', 'g')
  179              0.000185   endif
  179              0.000489   return line

FUNCTION  coc#rpc#notify()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\rpc.vim:96
Called 254 times
Total time:   0.055647
 Self time:   0.010814

count  total (s)   self (s)
  254   0.007898   0.003459   if !coc#rpc#ready()
                                return ''
  254              0.000252   endif
  254   0.045711   0.005318   call s:client['notify'](a:method, a:args)
  254              0.000603   return ''

FUNCTION  <SNR>132_nvim_untracked_job_handler()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\async.vim:238
Called 1 time
Total time:   0.000102
 Self time:   0.000059

count  total (s)   self (s)
    1              0.000005     if a:event == 'exit'
    1   0.000072   0.000029       call s:untracked_output(self, self.buf)
    1              0.000010       if has_key(s:untracked_jobs, self.file)
    1              0.000008         call remove(s:untracked_jobs, self.file)
    1              0.000001       endif
    1              0.000001     endif

FUNCTION  airline#extensions#hunks#get_hunks()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\hunks.vim:95
Called 173 times
Total time:   0.073429
 Self time:   0.039343

count  total (s)   self (s)
  173              0.001286   if !get(w:, 'airline_active', 0)
                                return ''
  173              0.000194   endif
                              " Cache values, so that it isn't called too often
  173   0.013506   0.009461   if exists("b:airline_hunks") && get(b:,  'airline_changenr', 0) == b:changedtick && airline#util#winwidth() == get(s:, 'airline_winwidth', 0) && get(b:, 'source_func', '') isnot# 's:get_hunks_signify' && get(b:, 'source_func', '') isnot# 's:get_hunks_gitgutter' && get(b:, 'source_func', '') isnot# 's:get_hunks_empty' && get(b:, 'source_func', '') isnot# 's:get_hunks_changes' && get(b:, 'source_func', '') isnot# 's:get_hunks_coc'
                                return b:airline_hunks
  173              0.000204   endif
  173   0.027085   0.003706   let hunks = airline#extensions#hunks#get_raw_hunks()
  173              0.000521   let string = ''
  173   0.005476   0.003648   let winwidth = get(airline#parts#get('hunks'), 'minwidth', 100)
  173              0.000850   if !empty(hunks)
                                " hunks should contain [added, changed, deleted]
                                for i in [0, 1, 2]
                                  if (s:non_zero_only == 0 && airline#util#winwidth() > winwidth) || hunks[i] > 0
                                    let string .= printf('%s%s ', s:hunk_symbols[i], hunks[i])
                                  endif
                                endfor
  173              0.000203   endif
  173   0.005800   0.004952   if index(airline#extensions#get_loaded_extensions(), 'branch') == -1 && string[-1:] == ' '
                                " branch extension not loaded, skip trailing whitespace
                                let string = string[0:-2]
  173              0.000212   endif
                            
  173              0.000844   let b:airline_hunks = string
  173              0.000911   let b:airline_changenr = b:changedtick
  173   0.006977   0.002991   let s:airline_winwidth = airline#util#winwidth()
  173              0.000490   return string

FUNCTION  coc#float#valid()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:164
Called 7 times
Total time:   0.000278
 Self time:   0.000278

count  total (s)   self (s)
    7              0.000017   if a:winid <= 0
                                return 0
    7              0.000006   endif
    7              0.000176   if has('nvim')
    7              0.000050     return nvim_win_is_valid(a:winid) ? 1 : 0
                              endif
                              return s:popup_visible(a:winid)

FUNCTION  <SNR>18_init()
    Defined: ~\.vim\plugged\vim-airline\plugin\airline.vim:15
Called 37 times
Total time:   0.000190
 Self time:   0.000190

count  total (s)   self (s)
   37              0.000086   if s:airline_initialized
   37              0.000047     return
                              endif
                              let s:airline_initialized = 1
                            
                              call airline#extensions#load()
                              call airline#init#sections()
                            
                              let s:theme_in_vimrc = exists('g:airline_theme')
                              if s:theme_in_vimrc
                                try
                                  if g:airline_theme is# 'random'
                                    let g:airline_theme=s:random_theme()
                                  endif
                                  let palette = g:airline#themes#{g:airline_theme}#palette
                                catch
                                  call airline#util#warning(printf('Could not resolve airline theme "%s". Themes have been migrated to github.com/vim-airline/vim-airline-themes.', g:airline_theme))
                                  let g:airline_theme = 'dark'
                                endtry
                                try
                                  silent call airline#switch_theme(g:airline_theme)
                                catch
                                  call airline#util#warning(printf('Could not find airline theme "%s".', g:airline_theme))
                                  let g:airline_theme = 'dark'
                                  silent call airline#switch_theme(g:airline_theme)
                                endtry
                              else
                                let g:airline_theme = 'dark'
                                silent call s:on_colorscheme_changed()
                              endif
                            
                              call airline#util#doautocmd('AirlineAfterInit')

FUNCTION  <SNR>82_update_hg_branch()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\branch.vim:145
Called 173 times
Total time:   0.026940
 Self time:   0.023865

count  total (s)   self (s)
  173   0.006117   0.003042   if airline#util#has_lawrencium()
                                let cmd='LC_ALL=C hg qtop'
                                let stl=lawrencium#statusline()
                                let file=expand('%:p')
                                if !empty(stl) && get(b:, 'airline_do_mq_check', 1)
                                  if g:airline#init#vim_async
                                    noa call airline#async#get_mq_async(cmd, file)
                                  elseif has("nvim")
                                    noa call airline#async#nvim_get_mq_async(cmd, file)
                                  else
                                    " remove \n at the end of the command
                                    let output=system(cmd)[0:-2]
                                    noa call airline#async#mq_output(output, file)
                                  endif
                                endif
                                " do not do mq check anymore
                                let b:airline_do_mq_check = 0
                                if exists("b:mq") && !empty(b:mq)
                                  if stl is# 'default'
                                    " Shorten default a bit
                                    let stl='def'
                                  endif
                                  let stl.=' ['.b:mq.']'
                                endif
                                let s:vcs_config['mercurial'].branch = stl
  173              0.000242   else
  173              0.001106     let s:vcs_config['mercurial'].branch = ''
  173              0.000226   endif

FUNCTION  airline#util#prepend()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:63
Called 1050 times
Total time:   0.019160
 Self time:   0.019160

count  total (s)   self (s)
 1050              0.006311   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
 1050              0.001142   endif
 1050              0.007622   return empty(a:text) ? '' : a:text.s:spc.g:airline_right_alt_sep.s:spc

FUNCTION  <SNR>102_execute()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\highlight.vim:319
Called 3 times
Total time:   0.000265
 Self time:   0.000265

count  total (s)   self (s)
    3              0.000090   if has('nvim')
    3              0.000142     execute 'silent! ' a:cmd
                              else
                                call win_execute(a:winid, a:cmd, 'silent!')
    3              0.000004   endif

FUNCTION  airline#util#has_vcscommand()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:165
Called 173 times
Total time:   0.004363
 Self time:   0.004363

count  total (s)   self (s)
  173              0.001269   if !exists("s:has_vcscommand")
    1              0.000011     let s:has_vcscommand = exists('*VCSCommandGetStatusLine')
  173              0.000201   endif
  173              0.001592   return get(g:, 'airline#extensions#branch#use_vcscommand', 0) && s:has_vcscommand

FUNCTION  coc#float#nvim_scrollbar()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:340
Called 3 times
Total time:   0.001088
 Self time:   0.000526

count  total (s)   self (s)
    3   0.000223   0.000120   if !has('nvim-0.4.0') || !coc#float#valid(a:winid) || getwinvar(a:winid, 'target_winid', 0)
                                return
    3              0.000002   endif
    3              0.000051   let config = nvim_win_get_config(a:winid)
    3              0.000028   let [row, column] = nvim_win_get_position(a:winid)
    3              0.000019   let width = nvim_win_get_width(a:winid)
    3              0.000018   let height = nvim_win_get_height(a:winid)
    3              0.000015   let bufnr = winbufnr(a:winid)
    3              0.000027   let cw = getwinvar(a:winid, '&foldcolumn', 0) ? width - 1 : width
    3   0.000364   0.000062   let ch = coc#float#content_height(bufnr, cw, getwinvar(a:winid, '&wrap'))
    3   0.000130   0.000041   let closewin = coc#float#get_related(a:winid, 'close')
    3              0.000018   let border = getwinvar(a:winid, 'border', [])
    3              0.000014   let move_down = closewin && !get(border, 0, 0)
    3              0.000005   if move_down
                                let height = height - 1
    3              0.000002   endif
    3   0.000103   0.000034   let id = coc#float#get_related(a:winid, 'scrollbar')
    3              0.000008   if ch <= height || height <= 0
                                " no scrollbar, remove exists
    3              0.000004     if id
                                  call s:close_win(id)
    3              0.000002     endif
    3              0.000003     return
                              endif
                              call coc#float#close_related(a:winid, 'pad')
                              let sbuf = id ? winbufnr(id) : 0
                              let sbuf = coc#float#create_buf(sbuf, repeat([' '], height))
                              let opts = { 'row': move_down ? row + 1 : row, 'col': column + width, 'relative': 'editor', 'width': 1, 'height': height, 'focusable': v:false, 'style': 'minimal', }
                              if id
                                call nvim_win_set_config(id, opts)
                              else
                                noa let id = nvim_open_win(sbuf, 0 , opts)
                                if id == 0
                                  return
                                endif
                                call setwinvar(id, 'kind', 'scrollbar')
                                call setwinvar(id, 'target_winid', a:winid)
                              endif
                              let thumb_height = max([1, float2nr(floor(height * (height + 0.0)/ch))])
                              let wininfo = getwininfo(a:winid)[0]
                              let start = 0
                              if wininfo['topline'] != 1
                                " needed for correct getwininfo
                                let firstline = wininfo['topline']
                                let lastline = s:nvim_get_botline(firstline, height, cw, bufnr)
                                let linecount = nvim_buf_line_count(winbufnr(a:winid))
                                if lastline >= linecount
                                  let start = height - thumb_height
                                else
                                  let start = max([1, float2nr(round((height - thumb_height + 0.0)*(firstline - 1.0)/(ch - height)))])
                                endif
                              endif
                              " add highlights
                              call nvim_buf_clear_namespace(sbuf, -1, 0, -1)
                              for idx in range(0, height - 1)
                                if idx >= start && idx < start + thumb_height
                                  call nvim_buf_add_highlight(sbuf, -1, 'PmenuThumb', idx, 0, 1)
                                else
                                  call nvim_buf_add_highlight(sbuf, -1, 'PmenuSbar', idx, 0, 1)
                                endif
                              endfor
                              call s:add_related(id, a:winid)

FUNCTION  coc#float#nvim_right_pad()
    Defined: ~\.vim\plugged\coc.nvim\autoload\coc\float.vim:270
Called 3 times
Total time:   0.002756
 Self time:   0.001403

count  total (s)   self (s)
    3   0.000115   0.000050   let winid = coc#float#get_related(a:winid, 'pad')
    3              0.000069   let config = { 'relative': a:config['relative'], 'width': 1, 'height': a:config['height'], 'row': a:config['row'], 'col': a:config['col'] + a:config['width'], 'focusable': v:false, 'style': 'minimal', }
    3              0.000006   if winid
    1              0.000578     noa call nvim_win_close(winid, 1)
    3              0.000004   endif
    3   0.001378   0.000091   let bufnr = coc#float#create_buf(0, repeat([''], a:config['height']))
    3              0.000359   noa let winid = nvim_open_win(bufnr, 0, config)
    3              0.000007   if winid
                                " neovim'bug: the content shown in window could be wired.
    3              0.000042     call setwinvar(winid, '&foldcolumn', 1)
    3              0.000080     call setwinvar(winid, '&winhl', 'FoldColumn:'.a:hlgroup)
    3              0.000023     call setwinvar(winid, 'target_winid', a:winid)
    3              0.000017     call setwinvar(winid, 'kind', 'pad')
    3              0.000017     call add(a:related, winid)
    3              0.000004   endif

FUNCTION  airline#util#getbufvar()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\util.vim:71
Called 216 times
Total time:   0.001241
 Self time:   0.001241

count  total (s)   self (s)
  216              0.001094     return getbufvar(a:bufnr, a:key, a:def)

FUNCTION  <SNR>78_wrap_accent()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\section.vim:9
Called 7 times
Total time:   0.000219
 Self time:   0.000182

count  total (s)   self (s)
    7              0.000030   if exists('a:part.accent')
    7   0.000131   0.000095     call airline#highlighter#add_accent(a:part.accent)
    7              0.000047     return '%#__accent_'.(a:part.accent).'#'.a:value.'%#__restore__#'
                              endif
                              return a:value

FUNCTION  <SNR>133_add_methods()
    Defined: ~\.vim\plugged\vim-fugitive\autoload\fugitive.vim:822
Called 5 times
Total time:   0.002108
 Self time:   0.000742

count  total (s)   self (s)
   21              0.000084   for name in a:method_names
   16   0.001920   0.000554     let s:{a:namespace}_prototype[name] = s:function('s:'.a:namespace.'_'.name)
   21              0.000048   endfor

FUNCTION  <SNR>92_get_accented_line()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\builder.vim:163
Called 791 times
Total time:   0.061484
 Self time:   0.061484

count  total (s)   self (s)
  791              0.001914   if a:self._context.active
                                " active window
  242              0.000569     let contents = []
  242              0.003364     let content_parts = split(a:contents, '__accent')
  674              0.001591     for cpart in content_parts
  432              0.004777       let accent = matchstr(cpart, '_\zs[^#]*\ze')
  432              0.001851       call add(contents, cpart)
  674              0.000853     endfor
  242              0.001680     let line = join(contents, a:group)
  242              0.003083     let line = substitute(line, '__restore__', a:group, 'g')
  549              0.000478   else
                                " inactive window
  549              0.012560     let line = substitute(a:contents, '%#__accent[^#]*#', '', 'g')
  549              0.007173     let line = substitute(line, '%#__restore__#', '', 'g')
  791              0.000727   endif
  791              0.001625   return line

FUNCTION  <SNR>93_build_sections()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions\default.vim:35
Called 214 times
Total time:   0.116574
 Self time:   0.021501

count  total (s)   self (s)
 1172              0.002386   for key in a:keys
  958              0.004518     if (key == 'warning' || key == 'error') && !a:context.active
  246              0.000267       continue
  712              0.000561     endif
  712   0.104195   0.009123     call s:add_section(a:builder, a:context, key)
  926              0.001128   endfor

FUNCTION  airline#extensions#get_loaded_extensions()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\extensions.vim:500
Called 173 times
Total time:   0.000848
 Self time:   0.000848

count  total (s)   self (s)
  173              0.000628   return s:loaded_ext

FUNCTION  airline#builder#new()
    Defined: ~\.vim\plugged\vim-airline\autoload\airline\builder.vim:229
Called 179 times
Total time:   0.015167
 Self time:   0.015167

count  total (s)   self (s)
  179              0.001890   let builder = copy(s:prototype)
  179              0.000650   let builder._context = a:context
  179              0.000522   let builder._sections = []
                            
  179              0.011159   call extend(builder._context, { 'left_sep': g:airline_left_sep, 'left_alt_sep': g:airline_left_alt_sep, 'right_sep': g:airline_right_sep, 'right_alt_sep': g:airline_right_alt_sep, }, 'keep')
  179              0.000353   return builder

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
 5454   1.818188   0.748028  airline#highlighter#get_highlight()
 1361   1.798843   0.108642  <SNR>79_exec_separator()
   43   1.707233   0.003731  <SNR>18_on_window_changed()
   37   1.703312   0.004532  airline#update_statusline()
  179   1.674028   0.015646  <SNR>75_invoke_funcrefs()
  192   1.586176   0.062627  airline#check_mode()
   16   1.504665   0.135459  airline#highlighter#highlight()
  179   1.379883   0.170829  281()
   37   1.159404   0.011660  airline#update_statusline_inactive()
 1824   1.021327   0.214255  airline#highlighter#exec()
21816   1.008630             <SNR>79_get_syn()
 2722   0.989557   0.053075  airline#themes#get_highlight()
  454   0.897588   0.015126  <SNR>92_get_seperator()
  612   0.800151   0.037337  <SNR>92_get_transitioned_seperator()
  612   0.762813   0.017286  airline#highlighter#add_separator()
    7   0.520215   0.060484  <SNR>3_SynSet()
  173   0.337203   0.018518  airline#extensions#branch#get_head()
  173   0.303909   0.060859  airline#extensions#branch#head()
  454   0.300877   0.020071  airline#builder#should_change_group()
   20   0.270424             UltiSnips#TrackChange()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
21816              1.008630  <SNR>79_get_syn()
 5454   1.818188   0.748028  airline#highlighter#get_highlight()
   20              0.270424  UltiSnips#TrackChange()
   20              0.269427  provider#python3#Call()
 1824   1.021327   0.214255  airline#highlighter#exec()
  179   1.379883   0.170829  281()
   16   1.504665   0.135459  airline#highlighter#highlight()
 1361   1.798843   0.108642  <SNR>79_exec_separator()
  173   0.127370   0.098199  <SNR>82_update_untracked()
   35   0.110983   0.094724  <SNR>10_guess()
  469              0.092690  <SNR>79_GetHiCmd()
  175   0.108552   0.085900  airline#extensions#fugitiveline#bufname()
 1824              0.079387  <SNR>79_CheckDefined()
  173   0.087651   0.070250  airline#extensions#whitespace#check()
  192   1.586176   0.062627  airline#check_mode()
 5454              0.061530  <SNR>79_get_array()
  791              0.061484  <SNR>92_get_accented_line()
  173   0.303909   0.060859  airline#extensions#branch#head()
    7   0.520215   0.060484  <SNR>3_SynSet()
 1040   0.074431   0.059706  <SNR>93_get_section()

